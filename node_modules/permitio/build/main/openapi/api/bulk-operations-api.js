"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkOperationsApi = exports.BulkOperationsApiFactory = exports.BulkOperationsApiFp = exports.BulkOperationsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * BulkOperationsApi - axios parameter creator
 * @export
 */
const BulkOperationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Bulk Create Tenants
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {any} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateTenants: async (projId, envId, requestBody, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('bulkCreateTenants', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('bulkCreateTenants', 'envId', envId);
            // verify required parameter 'requestBody' is not null or undefined
            (0, common_1.assertParamExists)('bulkCreateTenants', 'requestBody', requestBody);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/tenants`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Bulk Create Users
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param userCreateBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateUsers: async (projId, envId, userCreateBulkOperation, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('bulkCreateUsers', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('bulkCreateUsers', 'envId', envId);
            // verify required parameter 'requestBody' is not null or undefined
            (0, common_1.assertParamExists)('bulkCreateUsers', 'requestBody', userCreateBulkOperation);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/users`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userCreateBulkOperation, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes many Resource Instances.
         * @summary Bulk Delete Resource Instances
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceInstanceDeleteBulkOperation} resourceInstanceDeleteBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteResourceInstances: async (projId, envId, resourceInstanceDeleteBulkOperation, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('bulkDeleteResourceInstances', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('bulkDeleteResourceInstances', 'envId', envId);
            // verify required parameter 'resourceInstanceDeleteBulkOperation' is not null or undefined
            (0, common_1.assertParamExists)('bulkDeleteResourceInstances', 'resourceInstanceDeleteBulkOperation', resourceInstanceDeleteBulkOperation);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/resource_instances`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(resourceInstanceDeleteBulkOperation, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Bulk Delete Tenants
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {any} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteTenants: async (projId, envId, requestBody, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('bulkDeleteTenants', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('bulkDeleteTenants', 'envId', envId);
            // verify required parameter 'requestBody' is not null or undefined
            (0, common_1.assertParamExists)('bulkDeleteTenants', 'requestBody', requestBody);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/tenants`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Bulk Delete Users
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param userDeleteBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteUsers: async (projId, envId, userDeleteBulkOperation, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('bulkDeleteUsers', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('bulkDeleteUsers', 'envId', envId);
            // verify required parameter 'requestBody' is not null or undefined
            (0, common_1.assertParamExists)('bulkDeleteUsers', 'requestBody', userDeleteBulkOperation);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/users`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userDeleteBulkOperation, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.
         * @summary Bulk Replace Resource Instances
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceInstanceCreateBulkOperation} resourceInstanceCreateBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkReplaceResourceInstances: async (projId, envId, resourceInstanceCreateBulkOperation, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('bulkReplaceResourceInstances', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('bulkReplaceResourceInstances', 'envId', envId);
            // verify required parameter 'resourceInstanceCreateBulkOperation' is not null or undefined
            (0, common_1.assertParamExists)('bulkReplaceResourceInstances', 'resourceInstanceCreateBulkOperation', resourceInstanceCreateBulkOperation);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/resource_instances`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(resourceInstanceCreateBulkOperation, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Bulk Replace Users
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param userReplaceBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkReplaceUsers: async (projId, envId, userReplaceBulkOperation, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            (0, common_1.assertParamExists)('bulkReplaceUsers', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            (0, common_1.assertParamExists)('bulkReplaceUsers', 'envId', envId);
            // verify required parameter 'requestBody' is not null or undefined
            (0, common_1.assertParamExists)('bulkReplaceUsers', 'requestBody', userReplaceBulkOperation);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/users`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userReplaceBulkOperation, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.BulkOperationsApiAxiosParamCreator = BulkOperationsApiAxiosParamCreator;
/**
 * BulkOperationsApi - functional programming interface
 * @export
 */
const BulkOperationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.BulkOperationsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Bulk Create Tenants
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {{ [key: string]: any; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkCreateTenants(projId, envId, requestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreateTenants(projId, envId, requestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Bulk Create Users
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param userCreateBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkCreateUsers(projId, envId, userCreateBulkOperation, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreateUsers(projId, envId, userCreateBulkOperation, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Deletes many Resource Instances.
         * @summary Bulk Delete Resource Instances
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceInstanceDeleteBulkOperation} resourceInstanceDeleteBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkDeleteResourceInstances(projId, envId, resourceInstanceDeleteBulkOperation, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteResourceInstances(projId, envId, resourceInstanceDeleteBulkOperation, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Bulk Delete Tenants
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {{ [key: string]: any; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkDeleteTenants(projId, envId, requestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteTenants(projId, envId, requestBody, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Bulk Delete Users
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param userDeleteBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkDeleteUsers(projId, envId, userDeleteBulkOperation, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteUsers(projId, envId, userDeleteBulkOperation, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.
         * @summary Bulk Replace Resource Instances
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceInstanceCreateBulkOperation} resourceInstanceCreateBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkReplaceResourceInstances(projId, envId, resourceInstanceCreateBulkOperation, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkReplaceResourceInstances(projId, envId, resourceInstanceCreateBulkOperation, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @summary Bulk Replace Users
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param userReplaceBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkReplaceUsers(projId, envId, userReplaceBulkOperation, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkReplaceUsers(projId, envId, userReplaceBulkOperation, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.BulkOperationsApiFp = BulkOperationsApiFp;
/**
 * BulkOperationsApi - factory interface
 * @export
 */
const BulkOperationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.BulkOperationsApiFp)(configuration);
    return {
        /**
         *
         * @summary Bulk Create Tenants
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {{ [key: string]: any; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateTenants(projId, envId, requestBody, options) {
            return localVarFp
                .bulkCreateTenants(projId, envId, requestBody, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bulk Create Users
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param userCreateBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateUsers(projId, envId, userCreateBulkOperation, options) {
            return localVarFp
                .bulkCreateUsers(projId, envId, userCreateBulkOperation, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes many Resource Instances.
         * @summary Bulk Delete Resource Instances
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceInstanceDeleteBulkOperation} resourceInstanceDeleteBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteResourceInstances(projId, envId, resourceInstanceDeleteBulkOperation, options) {
            return localVarFp
                .bulkDeleteResourceInstances(projId, envId, resourceInstanceDeleteBulkOperation, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bulk Delete Tenants
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {{ [key: string]: any; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteTenants(projId, envId, requestBody, options) {
            return localVarFp
                .bulkDeleteTenants(projId, envId, requestBody, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bulk Delete Users
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param userDeleteBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteUsers(projId, envId, userDeleteBulkOperation, options) {
            return localVarFp
                .bulkDeleteUsers(projId, envId, userDeleteBulkOperation, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.
         * @summary Bulk Replace Resource Instances
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceInstanceCreateBulkOperation} resourceInstanceCreateBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkReplaceResourceInstances(projId, envId, resourceInstanceCreateBulkOperation, options) {
            return localVarFp
                .bulkReplaceResourceInstances(projId, envId, resourceInstanceCreateBulkOperation, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bulk Replace Users
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param userReplaceBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkReplaceUsers(projId, envId, userReplaceBulkOperation, options) {
            return localVarFp
                .bulkReplaceUsers(projId, envId, userReplaceBulkOperation, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.BulkOperationsApiFactory = BulkOperationsApiFactory;
/**
 * BulkOperationsApi - object-oriented interface
 * @export
 * @class BulkOperationsApi
 * @extends {BaseAPI}
 */
class BulkOperationsApi extends base_1.BaseAPI {
    /**
     *
     * @summary Bulk Create Tenants
     * @param {BulkOpertionsApiBulkCreateTenantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    bulkCreateTenants(requestParameters, options) {
        return (0, exports.BulkOperationsApiFp)(this.configuration)
            .bulkCreateTenants(requestParameters.projId, requestParameters.envId, requestParameters.requestBody, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bulk Create Users
     * @param {BulkOperationsApiBulkCreateUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    bulkCreateUsers(requestParameters, options) {
        return (0, exports.BulkOperationsApiFp)(this.configuration)
            .bulkCreateUsers(requestParameters.projId, requestParameters.envId, requestParameters.userCreateBulkOperations, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes many Resource Instances.
     * @summary Bulk Delete Resource Instances
     * @param {BulkOperationsApiBulkDeleteResourceInstancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    bulkDeleteResourceInstances(requestParameters, options) {
        return (0, exports.BulkOperationsApiFp)(this.configuration)
            .bulkDeleteResourceInstances(requestParameters.projId, requestParameters.envId, requestParameters.resourceInstanceDeleteBulkOperation, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bulk Delete Tenants
     * @param {BulkOperationsApiBulkDeleteTenantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    bulkDeleteTenants(requestParameters, options) {
        return (0, exports.BulkOperationsApiFp)(this.configuration)
            .bulkDeleteTenants(requestParameters.projId, requestParameters.envId, requestParameters.requestBody, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bulk Delete Users
     * @param {BulkOperationsApiBulkDeleteUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    async bulkDeleteUsers(requestParameters, options) {
        let request = await (0, exports.BulkOperationsApiFp)(this.configuration).bulkDeleteUsers(requestParameters.projId, requestParameters.envId, requestParameters.userDeleteBulkOperation, options);
        return request(this.axios, this.basePath);
    }
    /**
     * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.
     * @summary Bulk Replace Resource Instances
     * @param {BulkOperationsApiBulkReplaceResourceInstancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    bulkReplaceResourceInstances(requestParameters, options) {
        return (0, exports.BulkOperationsApiFp)(this.configuration)
            .bulkReplaceResourceInstances(requestParameters.projId, requestParameters.envId, requestParameters.resourceInstanceCreateBulkOperation, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bulk Replace Users
     * @param {BulkOperationsApiBulkReplaceUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    bulkReplaceUsers(requestParameters, options) {
        return (0, exports.BulkOperationsApiFp)(this.configuration)
            .bulkReplaceUsers(requestParameters.projId, requestParameters.envId, requestParameters.userReplaceBulkOperation, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.BulkOperationsApi = BulkOperationsApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVsay1vcGVyYXRpb25zLWFwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9vcGVuYXBpL2FwaS9idWxrLW9wZXJhdGlvbnMtYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvQkFBb0I7QUFDcEIsb0JBQW9CO0FBQ3BCOzs7Ozs7Ozs7O0dBVUc7Ozs7OztBQUVILGtEQUFxRjtBQUVyRix5REFBeUQ7QUFDekQsYUFBYTtBQUNiLHNDQVdtQjtBQUNuQixhQUFhO0FBQ2Isa0NBQTZGO0FBaUI3Rjs7O0dBR0c7QUFDSSxNQUFNLGtDQUFrQyxHQUFHLFVBQVUsYUFBNkI7SUFDdkYsT0FBTztRQUNMOzs7Ozs7OztXQVFHO1FBQ0gsaUJBQWlCLEVBQUUsS0FBSyxFQUN0QixNQUFXLEVBQ1gsS0FBVSxFQUNWLFdBQW1DLEVBQ25DLFVBQThCLEVBQUUsRUFDVixFQUFFO1lBQ3hCLDhEQUE4RDtZQUM5RCxJQUFBLDBCQUFpQixFQUFDLG1CQUFtQixFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN6RCw2REFBNkQ7WUFDN0QsSUFBQSwwQkFBaUIsRUFBQyxtQkFBbUIsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDdkQsbUVBQW1FO1lBQ25FLElBQUEsMEJBQWlCLEVBQUMsbUJBQW1CLEVBQUUsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQ25FLE1BQU0sWUFBWSxHQUFHLDJDQUEyQztpQkFDN0QsT0FBTyxDQUFDLElBQUksU0FBUyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7aUJBQzdELE9BQU8sQ0FBQyxJQUFJLFFBQVEsR0FBRyxFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0Qsb0ZBQW9GO1lBQ3BGLE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDLFlBQVksRUFBRSx1QkFBYyxDQUFDLENBQUM7WUFDN0QsSUFBSSxXQUFXLENBQUM7WUFDaEIsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLFdBQVcsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDO2FBQ3pDO1lBRUQsTUFBTSxzQkFBc0IsaUNBQUssTUFBTSxFQUFFLE1BQU0sSUFBSyxXQUFXLEdBQUssT0FBTyxDQUFFLENBQUM7WUFDOUUsTUFBTSx1QkFBdUIsR0FBRyxFQUFTLENBQUM7WUFDMUMsTUFBTSxzQkFBc0IsR0FBRyxFQUFTLENBQUM7WUFFekMscUNBQXFDO1lBQ3JDLHNDQUFzQztZQUN0QyxNQUFNLElBQUEsOEJBQXFCLEVBQUMsdUJBQXVCLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFFcEUsdUJBQXVCLENBQUMsY0FBYyxDQUFDLEdBQUcsa0JBQWtCLENBQUM7WUFFN0QsSUFBQSx3QkFBZSxFQUFDLGNBQWMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1lBQ3hELElBQUksc0JBQXNCLEdBQUcsV0FBVyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUMzRixzQkFBc0IsQ0FBQyxPQUFPLGlEQUN6Qix1QkFBdUIsR0FDdkIsc0JBQXNCLEdBQ3RCLE9BQU8sQ0FBQyxPQUFPLENBQ25CLENBQUM7WUFDRixzQkFBc0IsQ0FBQyxJQUFJLEdBQUcsSUFBQSw4QkFBcUIsRUFDakQsV0FBVyxFQUNYLHNCQUFzQixFQUN0QixhQUFhLENBQ2QsQ0FBQztZQUVGLE9BQU87Z0JBQ0wsR0FBRyxFQUFFLElBQUEscUJBQVksRUFBQyxjQUFjLENBQUM7Z0JBQ2pDLE9BQU8sRUFBRSxzQkFBc0I7YUFDaEMsQ0FBQztRQUNKLENBQUM7UUFDRDs7Ozs7Ozs7V0FRRztRQUNILGVBQWUsRUFBRSxLQUFLLEVBQ3BCLE1BQVcsRUFDWCxLQUFVLEVBQ1YsdUJBQWdELEVBQ2hELFVBQThCLEVBQUUsRUFDVixFQUFFO1lBQ3hCLDhEQUE4RDtZQUM5RCxJQUFBLDBCQUFpQixFQUFDLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN2RCw2REFBNkQ7WUFDN0QsSUFBQSwwQkFBaUIsRUFBQyxpQkFBaUIsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDckQsbUVBQW1FO1lBQ25FLElBQUEsMEJBQWlCLEVBQUMsaUJBQWlCLEVBQUUsYUFBYSxFQUFFLHVCQUF1QixDQUFDLENBQUM7WUFDN0UsTUFBTSxZQUFZLEdBQUcseUNBQXlDO2lCQUMzRCxPQUFPLENBQUMsSUFBSSxTQUFTLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztpQkFDN0QsT0FBTyxDQUFDLElBQUksUUFBUSxHQUFHLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvRCxvRkFBb0Y7WUFDcEYsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxFQUFFLHVCQUFjLENBQUMsQ0FBQztZQUM3RCxJQUFJLFdBQVcsQ0FBQztZQUNoQixJQUFJLGFBQWEsRUFBRTtnQkFDakIsV0FBVyxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUM7YUFDekM7WUFFRCxNQUFNLHNCQUFzQixpQ0FBSyxNQUFNLEVBQUUsTUFBTSxJQUFLLFdBQVcsR0FBSyxPQUFPLENBQUUsQ0FBQztZQUM5RSxNQUFNLHVCQUF1QixHQUFHLEVBQVMsQ0FBQztZQUMxQyxNQUFNLHNCQUFzQixHQUFHLEVBQVMsQ0FBQztZQUV6QyxxQ0FBcUM7WUFDckMsc0NBQXNDO1lBQ3RDLE1BQU0sSUFBQSw4QkFBcUIsRUFBQyx1QkFBdUIsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUVwRSx1QkFBdUIsQ0FBQyxjQUFjLENBQUMsR0FBRyxrQkFBa0IsQ0FBQztZQUU3RCxJQUFBLHdCQUFlLEVBQUMsY0FBYyxFQUFFLHNCQUFzQixDQUFDLENBQUM7WUFDeEQsSUFBSSxzQkFBc0IsR0FBRyxXQUFXLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzNGLHNCQUFzQixDQUFDLE9BQU8saURBQ3pCLHVCQUF1QixHQUN2QixzQkFBc0IsR0FDdEIsT0FBTyxDQUFDLE9BQU8sQ0FDbkIsQ0FBQztZQUNGLHNCQUFzQixDQUFDLElBQUksR0FBRyxJQUFBLDhCQUFxQixFQUNqRCx1QkFBdUIsRUFDdkIsc0JBQXNCLEVBQ3RCLGFBQWEsQ0FDZCxDQUFDO1lBRUYsT0FBTztnQkFDTCxHQUFHLEVBQUUsSUFBQSxxQkFBWSxFQUFDLGNBQWMsQ0FBQztnQkFDakMsT0FBTyxFQUFFLHNCQUFzQjthQUNoQyxDQUFDO1FBQ0osQ0FBQztRQUNEOzs7Ozs7OztXQVFHO1FBQ0gsMkJBQTJCLEVBQUUsS0FBSyxFQUNoQyxNQUFXLEVBQ1gsS0FBVSxFQUNWLG1DQUF3RSxFQUN4RSxVQUE4QixFQUFFLEVBQ1YsRUFBRTtZQUN4Qiw4REFBOEQ7WUFDOUQsSUFBQSwwQkFBaUIsRUFBQyw2QkFBNkIsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDbkUsNkRBQTZEO1lBQzdELElBQUEsMEJBQWlCLEVBQUMsNkJBQTZCLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ2pFLDJGQUEyRjtZQUMzRixJQUFBLDBCQUFpQixFQUNmLDZCQUE2QixFQUM3QixxQ0FBcUMsRUFDckMsbUNBQW1DLENBQ3BDLENBQUM7WUFDRixNQUFNLFlBQVksR0FBRyxzREFBc0Q7aUJBQ3hFLE9BQU8sQ0FBQyxJQUFJLFNBQVMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2lCQUM3RCxPQUFPLENBQUMsSUFBSSxRQUFRLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9ELG9GQUFvRjtZQUNwRixNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxZQUFZLEVBQUUsdUJBQWMsQ0FBQyxDQUFDO1lBQzdELElBQUksV0FBVyxDQUFDO1lBQ2hCLElBQUksYUFBYSxFQUFFO2dCQUNqQixXQUFXLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQzthQUN6QztZQUVELE1BQU0sc0JBQXNCLGlDQUFLLE1BQU0sRUFBRSxRQUFRLElBQUssV0FBVyxHQUFLLE9BQU8sQ0FBRSxDQUFDO1lBQ2hGLE1BQU0sdUJBQXVCLEdBQUcsRUFBUyxDQUFDO1lBQzFDLE1BQU0sc0JBQXNCLEdBQUcsRUFBUyxDQUFDO1lBRXpDLHFDQUFxQztZQUNyQyxzQ0FBc0M7WUFDdEMsTUFBTSxJQUFBLDhCQUFxQixFQUFDLHVCQUF1QixFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBRXBFLHVCQUF1QixDQUFDLGNBQWMsQ0FBQyxHQUFHLGtCQUFrQixDQUFDO1lBRTdELElBQUEsd0JBQWUsRUFBQyxjQUFjLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztZQUN4RCxJQUFJLHNCQUFzQixHQUFHLFdBQVcsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDM0Ysc0JBQXNCLENBQUMsT0FBTyxpREFDekIsdUJBQXVCLEdBQ3ZCLHNCQUFzQixHQUN0QixPQUFPLENBQUMsT0FBTyxDQUNuQixDQUFDO1lBQ0Ysc0JBQXNCLENBQUMsSUFBSSxHQUFHLElBQUEsOEJBQXFCLEVBQ2pELG1DQUFtQyxFQUNuQyxzQkFBc0IsRUFDdEIsYUFBYSxDQUNkLENBQUM7WUFFRixPQUFPO2dCQUNMLEdBQUcsRUFBRSxJQUFBLHFCQUFZLEVBQUMsY0FBYyxDQUFDO2dCQUNqQyxPQUFPLEVBQUUsc0JBQXNCO2FBQ2hDLENBQUM7UUFDSixDQUFDO1FBQ0Q7Ozs7Ozs7O1dBUUc7UUFDSCxpQkFBaUIsRUFBRSxLQUFLLEVBQ3RCLE1BQVcsRUFDWCxLQUFVLEVBQ1YsV0FBbUMsRUFDbkMsVUFBOEIsRUFBRSxFQUNWLEVBQUU7WUFDeEIsOERBQThEO1lBQzlELElBQUEsMEJBQWlCLEVBQUMsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3pELDZEQUE2RDtZQUM3RCxJQUFBLDBCQUFpQixFQUFDLG1CQUFtQixFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN2RCxtRUFBbUU7WUFDbkUsSUFBQSwwQkFBaUIsRUFBQyxtQkFBbUIsRUFBRSxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDbkUsTUFBTSxZQUFZLEdBQUcsMkNBQTJDO2lCQUM3RCxPQUFPLENBQUMsSUFBSSxTQUFTLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztpQkFDN0QsT0FBTyxDQUFDLElBQUksUUFBUSxHQUFHLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvRCxvRkFBb0Y7WUFDcEYsTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxFQUFFLHVCQUFjLENBQUMsQ0FBQztZQUM3RCxJQUFJLFdBQVcsQ0FBQztZQUNoQixJQUFJLGFBQWEsRUFBRTtnQkFDakIsV0FBVyxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUM7YUFDekM7WUFFRCxNQUFNLHNCQUFzQixpQ0FBSyxNQUFNLEVBQUUsUUFBUSxJQUFLLFdBQVcsR0FBSyxPQUFPLENBQUUsQ0FBQztZQUNoRixNQUFNLHVCQUF1QixHQUFHLEVBQVMsQ0FBQztZQUMxQyxNQUFNLHNCQUFzQixHQUFHLEVBQVMsQ0FBQztZQUV6QyxxQ0FBcUM7WUFDckMsc0NBQXNDO1lBQ3RDLE1BQU0sSUFBQSw4QkFBcUIsRUFBQyx1QkFBdUIsRUFBRSxhQUFhLENBQUMsQ0FBQztZQUVwRSx1QkFBdUIsQ0FBQyxjQUFjLENBQUMsR0FBRyxrQkFBa0IsQ0FBQztZQUU3RCxJQUFBLHdCQUFlLEVBQUMsY0FBYyxFQUFFLHNCQUFzQixDQUFDLENBQUM7WUFDeEQsSUFBSSxzQkFBc0IsR0FBRyxXQUFXLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzNGLHNCQUFzQixDQUFDLE9BQU8saURBQ3pCLHVCQUF1QixHQUN2QixzQkFBc0IsR0FDdEIsT0FBTyxDQUFDLE9BQU8sQ0FDbkIsQ0FBQztZQUNGLHNCQUFzQixDQUFDLElBQUksR0FBRyxJQUFBLDhCQUFxQixFQUNqRCxXQUFXLEVBQ1gsc0JBQXNCLEVBQ3RCLGFBQWEsQ0FDZCxDQUFDO1lBRUYsT0FBTztnQkFDTCxHQUFHLEVBQUUsSUFBQSxxQkFBWSxFQUFDLGNBQWMsQ0FBQztnQkFDakMsT0FBTyxFQUFFLHNCQUFzQjthQUNoQyxDQUFDO1FBQ0osQ0FBQztRQUNEOzs7Ozs7OztXQVFHO1FBQ0gsZUFBZSxFQUFFLEtBQUssRUFDcEIsTUFBVyxFQUNYLEtBQVUsRUFDVix1QkFBZ0QsRUFDaEQsVUFBOEIsRUFBRSxFQUNWLEVBQUU7WUFDeEIsOERBQThEO1lBQzlELElBQUEsMEJBQWlCLEVBQUMsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3ZELDZEQUE2RDtZQUM3RCxJQUFBLDBCQUFpQixFQUFDLGlCQUFpQixFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNyRCxtRUFBbUU7WUFDbkUsSUFBQSwwQkFBaUIsRUFBQyxpQkFBaUIsRUFBRSxhQUFhLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztZQUM3RSxNQUFNLFlBQVksR0FBRyx5Q0FBeUM7aUJBQzNELE9BQU8sQ0FBQyxJQUFJLFNBQVMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2lCQUM3RCxPQUFPLENBQUMsSUFBSSxRQUFRLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9ELG9GQUFvRjtZQUNwRixNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxZQUFZLEVBQUUsdUJBQWMsQ0FBQyxDQUFDO1lBQzdELElBQUksV0FBVyxDQUFDO1lBQ2hCLElBQUksYUFBYSxFQUFFO2dCQUNqQixXQUFXLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQzthQUN6QztZQUVELE1BQU0sc0JBQXNCLGlDQUFLLE1BQU0sRUFBRSxRQUFRLElBQUssV0FBVyxHQUFLLE9BQU8sQ0FBRSxDQUFDO1lBQ2hGLE1BQU0sdUJBQXVCLEdBQUcsRUFBUyxDQUFDO1lBQzFDLE1BQU0sc0JBQXNCLEdBQUcsRUFBUyxDQUFDO1lBRXpDLHFDQUFxQztZQUNyQyxzQ0FBc0M7WUFDdEMsTUFBTSxJQUFBLDhCQUFxQixFQUFDLHVCQUF1QixFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBRXBFLHVCQUF1QixDQUFDLGNBQWMsQ0FBQyxHQUFHLGtCQUFrQixDQUFDO1lBRTdELElBQUEsd0JBQWUsRUFBQyxjQUFjLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztZQUN4RCxJQUFJLHNCQUFzQixHQUFHLFdBQVcsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDM0Ysc0JBQXNCLENBQUMsT0FBTyxpREFDekIsdUJBQXVCLEdBQ3ZCLHNCQUFzQixHQUN0QixPQUFPLENBQUMsT0FBTyxDQUNuQixDQUFDO1lBQ0Ysc0JBQXNCLENBQUMsSUFBSSxHQUFHLElBQUEsOEJBQXFCLEVBQ2pELHVCQUF1QixFQUN2QixzQkFBc0IsRUFDdEIsYUFBYSxDQUNkLENBQUM7WUFFRixPQUFPO2dCQUNMLEdBQUcsRUFBRSxJQUFBLHFCQUFZLEVBQUMsY0FBYyxDQUFDO2dCQUNqQyxPQUFPLEVBQUUsc0JBQXNCO2FBQ2hDLENBQUM7UUFDSixDQUFDO1FBQ0Q7Ozs7Ozs7O1dBUUc7UUFDSCw0QkFBNEIsRUFBRSxLQUFLLEVBQ2pDLE1BQVcsRUFDWCxLQUFVLEVBQ1YsbUNBQXdFLEVBQ3hFLFVBQThCLEVBQUUsRUFDVixFQUFFO1lBQ3hCLDhEQUE4RDtZQUM5RCxJQUFBLDBCQUFpQixFQUFDLDhCQUE4QixFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNwRSw2REFBNkQ7WUFDN0QsSUFBQSwwQkFBaUIsRUFBQyw4QkFBOEIsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDbEUsMkZBQTJGO1lBQzNGLElBQUEsMEJBQWlCLEVBQ2YsOEJBQThCLEVBQzlCLHFDQUFxQyxFQUNyQyxtQ0FBbUMsQ0FDcEMsQ0FBQztZQUNGLE1BQU0sWUFBWSxHQUFHLHNEQUFzRDtpQkFDeEUsT0FBTyxDQUFDLElBQUksU0FBUyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7aUJBQzdELE9BQU8sQ0FBQyxJQUFJLFFBQVEsR0FBRyxFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDL0Qsb0ZBQW9GO1lBQ3BGLE1BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDLFlBQVksRUFBRSx1QkFBYyxDQUFDLENBQUM7WUFDN0QsSUFBSSxXQUFXLENBQUM7WUFDaEIsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLFdBQVcsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDO2FBQ3pDO1lBRUQsTUFBTSxzQkFBc0IsaUNBQUssTUFBTSxFQUFFLEtBQUssSUFBSyxXQUFXLEdBQUssT0FBTyxDQUFFLENBQUM7WUFDN0UsTUFBTSx1QkFBdUIsR0FBRyxFQUFTLENBQUM7WUFDMUMsTUFBTSxzQkFBc0IsR0FBRyxFQUFTLENBQUM7WUFFekMscUNBQXFDO1lBQ3JDLHNDQUFzQztZQUN0QyxNQUFNLElBQUEsOEJBQXFCLEVBQUMsdUJBQXVCLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFFcEUsdUJBQXVCLENBQUMsY0FBYyxDQUFDLEdBQUcsa0JBQWtCLENBQUM7WUFFN0QsSUFBQSx3QkFBZSxFQUFDLGNBQWMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1lBQ3hELElBQUksc0JBQXNCLEdBQUcsV0FBVyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUMzRixzQkFBc0IsQ0FBQyxPQUFPLGlEQUN6Qix1QkFBdUIsR0FDdkIsc0JBQXNCLEdBQ3RCLE9BQU8sQ0FBQyxPQUFPLENBQ25CLENBQUM7WUFDRixzQkFBc0IsQ0FBQyxJQUFJLEdBQUcsSUFBQSw4QkFBcUIsRUFDakQsbUNBQW1DLEVBQ25DLHNCQUFzQixFQUN0QixhQUFhLENBQ2QsQ0FBQztZQUVGLE9BQU87Z0JBQ0wsR0FBRyxFQUFFLElBQUEscUJBQVksRUFBQyxjQUFjLENBQUM7Z0JBQ2pDLE9BQU8sRUFBRSxzQkFBc0I7YUFDaEMsQ0FBQztRQUNKLENBQUM7UUFDRDs7Ozs7Ozs7V0FRRztRQUNILGdCQUFnQixFQUFFLEtBQUssRUFDckIsTUFBVyxFQUNYLEtBQVUsRUFDVix3QkFBa0QsRUFDbEQsVUFBOEIsRUFBRSxFQUNWLEVBQUU7WUFDeEIsOERBQThEO1lBQzlELElBQUEsMEJBQWlCLEVBQUMsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3hELDZEQUE2RDtZQUM3RCxJQUFBLDBCQUFpQixFQUFDLGtCQUFrQixFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN0RCxtRUFBbUU7WUFDbkUsSUFBQSwwQkFBaUIsRUFBQyxrQkFBa0IsRUFBRSxhQUFhLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztZQUMvRSxNQUFNLFlBQVksR0FBRyx5Q0FBeUM7aUJBQzNELE9BQU8sQ0FBQyxJQUFJLFNBQVMsR0FBRyxFQUFFLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2lCQUM3RCxPQUFPLENBQUMsSUFBSSxRQUFRLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9ELG9GQUFvRjtZQUNwRixNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxZQUFZLEVBQUUsdUJBQWMsQ0FBQyxDQUFDO1lBQzdELElBQUksV0FBVyxDQUFDO1lBQ2hCLElBQUksYUFBYSxFQUFFO2dCQUNqQixXQUFXLEdBQUcsYUFBYSxDQUFDLFdBQVcsQ0FBQzthQUN6QztZQUVELE1BQU0sc0JBQXNCLGlDQUFLLE1BQU0sRUFBRSxLQUFLLElBQUssV0FBVyxHQUFLLE9BQU8sQ0FBRSxDQUFDO1lBQzdFLE1BQU0sdUJBQXVCLEdBQUcsRUFBUyxDQUFDO1lBQzFDLE1BQU0sc0JBQXNCLEdBQUcsRUFBUyxDQUFDO1lBRXpDLHFDQUFxQztZQUNyQyxzQ0FBc0M7WUFDdEMsTUFBTSxJQUFBLDhCQUFxQixFQUFDLHVCQUF1QixFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBRXBFLHVCQUF1QixDQUFDLGNBQWMsQ0FBQyxHQUFHLGtCQUFrQixDQUFDO1lBRTdELElBQUEsd0JBQWUsRUFBQyxjQUFjLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztZQUN4RCxJQUFJLHNCQUFzQixHQUFHLFdBQVcsSUFBSSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDM0Ysc0JBQXNCLENBQUMsT0FBTyxpREFDekIsdUJBQXVCLEdBQ3ZCLHNCQUFzQixHQUN0QixPQUFPLENBQUMsT0FBTyxDQUNuQixDQUFDO1lBQ0Ysc0JBQXNCLENBQUMsSUFBSSxHQUFHLElBQUEsOEJBQXFCLEVBQ2pELHdCQUF3QixFQUN4QixzQkFBc0IsRUFDdEIsYUFBYSxDQUNkLENBQUM7WUFFRixPQUFPO2dCQUNMLEdBQUcsRUFBRSxJQUFBLHFCQUFZLEVBQUMsY0FBYyxDQUFDO2dCQUNqQyxPQUFPLEVBQUUsc0JBQXNCO2FBQ2hDLENBQUM7UUFDSixDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQztBQXhhVyxRQUFBLGtDQUFrQyxzQ0F3YTdDO0FBRUY7OztHQUdHO0FBQ0ksTUFBTSxtQkFBbUIsR0FBRyxVQUFVLGFBQTZCO0lBQ3hFLE1BQU0seUJBQXlCLEdBQUcsSUFBQSwwQ0FBa0MsRUFBQyxhQUFhLENBQUMsQ0FBQztJQUNwRixPQUFPO1FBQ0w7Ozs7Ozs7O1dBUUc7UUFDSCxLQUFLLENBQUMsaUJBQWlCLENBQ3JCLE1BQVcsRUFDWCxLQUFVLEVBQ1YsV0FBbUMsRUFDbkMsT0FBNEI7WUFFNUIsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLHlCQUF5QixDQUFDLGlCQUFpQixDQUN6RSxNQUFNLEVBQ04sS0FBSyxFQUNMLFdBQVcsRUFDWCxPQUFPLENBQ1IsQ0FBQztZQUNGLE9BQU8sSUFBQSw4QkFBcUIsRUFBQyxpQkFBaUIsRUFBRSxlQUFXLEVBQUUsZ0JBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN6RixDQUFDO1FBQ0Q7Ozs7Ozs7O1dBUUc7UUFDSCxLQUFLLENBQUMsZUFBZSxDQUNuQixNQUFXLEVBQ1gsS0FBVSxFQUNWLHVCQUFnRCxFQUNoRCxPQUE0QjtZQU81QixNQUFNLGlCQUFpQixHQUFHLE1BQU0seUJBQXlCLENBQUMsZUFBZSxDQUN2RSxNQUFNLEVBQ04sS0FBSyxFQUNMLHVCQUF1QixFQUN2QixPQUFPLENBQ1IsQ0FBQztZQUNGLE9BQU8sSUFBQSw4QkFBcUIsRUFBQyxpQkFBaUIsRUFBRSxlQUFXLEVBQUUsZ0JBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN6RixDQUFDO1FBQ0Q7Ozs7Ozs7O1dBUUc7UUFDSCxLQUFLLENBQUMsMkJBQTJCLENBQy9CLE1BQVcsRUFDWCxLQUFVLEVBQ1YsbUNBQXdFLEVBQ3hFLE9BQTRCO1lBRTVCLE1BQU0saUJBQWlCLEdBQUcsTUFBTSx5QkFBeUIsQ0FBQywyQkFBMkIsQ0FDbkYsTUFBTSxFQUNOLEtBQUssRUFDTCxtQ0FBbUMsRUFDbkMsT0FBTyxDQUNSLENBQUM7WUFDRixPQUFPLElBQUEsOEJBQXFCLEVBQUMsaUJBQWlCLEVBQUUsZUFBVyxFQUFFLGdCQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDekYsQ0FBQztRQUNEOzs7Ozs7OztXQVFHO1FBQ0gsS0FBSyxDQUFDLGlCQUFpQixDQUNyQixNQUFXLEVBQ1gsS0FBVSxFQUNWLFdBQW1DLEVBQ25DLE9BQTRCO1lBRTVCLE1BQU0saUJBQWlCLEdBQUcsTUFBTSx5QkFBeUIsQ0FBQyxpQkFBaUIsQ0FDekUsTUFBTSxFQUNOLEtBQUssRUFDTCxXQUFXLEVBQ1gsT0FBTyxDQUNSLENBQUM7WUFDRixPQUFPLElBQUEsOEJBQXFCLEVBQUMsaUJBQWlCLEVBQUUsZUFBVyxFQUFFLGdCQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDekYsQ0FBQztRQUNEOzs7Ozs7OztXQVFHO1FBQ0gsS0FBSyxDQUFDLGVBQWUsQ0FDbkIsTUFBVyxFQUNYLEtBQVUsRUFDVix1QkFBZ0QsRUFDaEQsT0FBNEI7WUFPNUIsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLHlCQUF5QixDQUFDLGVBQWUsQ0FDdkUsTUFBTSxFQUNOLEtBQUssRUFDTCx1QkFBdUIsRUFDdkIsT0FBTyxDQUNSLENBQUM7WUFDRixPQUFPLElBQUEsOEJBQXFCLEVBQUMsaUJBQWlCLEVBQUUsZUFBVyxFQUFFLGdCQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDekYsQ0FBQztRQUNEOzs7Ozs7OztXQVFHO1FBQ0gsS0FBSyxDQUFDLDRCQUE0QixDQUNoQyxNQUFXLEVBQ1gsS0FBVSxFQUNWLG1DQUF3RSxFQUN4RSxPQUE0QjtZQUU1QixNQUFNLGlCQUFpQixHQUFHLE1BQU0seUJBQXlCLENBQUMsNEJBQTRCLENBQ3BGLE1BQU0sRUFDTixLQUFLLEVBQ0wsbUNBQW1DLEVBQ25DLE9BQU8sQ0FDUixDQUFDO1lBQ0YsT0FBTyxJQUFBLDhCQUFxQixFQUFDLGlCQUFpQixFQUFFLGVBQVcsRUFBRSxnQkFBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3pGLENBQUM7UUFDRDs7Ozs7Ozs7V0FRRztRQUNILEtBQUssQ0FBQyxnQkFBZ0IsQ0FDcEIsTUFBVyxFQUNYLEtBQVUsRUFDVix3QkFBa0QsRUFDbEQsT0FBNEI7WUFPNUIsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLHlCQUF5QixDQUFDLGdCQUFnQixDQUN4RSxNQUFNLEVBQ04sS0FBSyxFQUNMLHdCQUF3QixFQUN4QixPQUFPLENBQ1IsQ0FBQztZQUNGLE9BQU8sSUFBQSw4QkFBcUIsRUFBQyxpQkFBaUIsRUFBRSxlQUFXLEVBQUUsZ0JBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN6RixDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQztBQXBMVyxRQUFBLG1CQUFtQix1QkFvTDlCO0FBRUY7OztHQUdHO0FBQ0ksTUFBTSx3QkFBd0IsR0FBRyxVQUN0QyxhQUE2QixFQUM3QixRQUFpQixFQUNqQixLQUFxQjtJQUVyQixNQUFNLFVBQVUsR0FBRyxJQUFBLDJCQUFtQixFQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3RELE9BQU87UUFDTDs7Ozs7Ozs7V0FRRztRQUNILGlCQUFpQixDQUNmLE1BQVcsRUFDWCxLQUFVLEVBQ1YsV0FBbUMsRUFDbkMsT0FBYTtZQUViLE9BQU8sVUFBVTtpQkFDZCxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxPQUFPLENBQUM7aUJBQ3RELElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFDRDs7Ozs7Ozs7V0FRRztRQUNILGVBQWUsQ0FDYixNQUFXLEVBQ1gsS0FBVSxFQUNWLHVCQUFnRCxFQUNoRCxPQUFhO1lBRWIsT0FBTyxVQUFVO2lCQUNkLGVBQWUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFLE9BQU8sQ0FBQztpQkFDaEUsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDakQsQ0FBQztRQUNEOzs7Ozs7OztXQVFHO1FBQ0gsMkJBQTJCLENBQ3pCLE1BQVcsRUFDWCxLQUFVLEVBQ1YsbUNBQXdFLEVBQ3hFLE9BQWE7WUFFYixPQUFPLFVBQVU7aUJBQ2QsMkJBQTJCLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxtQ0FBbUMsRUFBRSxPQUFPLENBQUM7aUJBQ3hGLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFDRDs7Ozs7Ozs7V0FRRztRQUNILGlCQUFpQixDQUNmLE1BQVcsRUFDWCxLQUFVLEVBQ1YsV0FBbUMsRUFDbkMsT0FBYTtZQUViLE9BQU8sVUFBVTtpQkFDZCxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxPQUFPLENBQUM7aUJBQ3RELElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFDRDs7Ozs7Ozs7V0FRRztRQUNILGVBQWUsQ0FDYixNQUFXLEVBQ1gsS0FBVSxFQUNWLHVCQUFnRCxFQUNoRCxPQUFhO1lBRWIsT0FBTyxVQUFVO2lCQUNkLGVBQWUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFLE9BQU8sQ0FBQztpQkFDaEUsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDakQsQ0FBQztRQUNEOzs7Ozs7OztXQVFHO1FBQ0gsNEJBQTRCLENBQzFCLE1BQVcsRUFDWCxLQUFVLEVBQ1YsbUNBQXdFLEVBQ3hFLE9BQWE7WUFFYixPQUFPLFVBQVU7aUJBQ2QsNEJBQTRCLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxtQ0FBbUMsRUFBRSxPQUFPLENBQUM7aUJBQ3pGLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFDRDs7Ozs7Ozs7V0FRRztRQUNILGdCQUFnQixDQUNkLE1BQVcsRUFDWCxLQUFVLEVBQ1Ysd0JBQWtELEVBQ2xELE9BQWE7WUFFYixPQUFPLFVBQVU7aUJBQ2QsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSx3QkFBd0IsRUFBRSxPQUFPLENBQUM7aUJBQ2xFLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2pELENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBN0lXLFFBQUEsd0JBQXdCLDRCQTZJbkM7QUFzTUY7Ozs7O0dBS0c7QUFDSCxNQUFhLGlCQUFrQixTQUFRLGNBQU87SUFDNUM7Ozs7Ozs7T0FPRztJQUNJLGlCQUFpQixDQUN0QixpQkFBNEQsRUFDNUQsT0FBNEI7UUFFNUIsT0FBTyxJQUFBLDJCQUFtQixFQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7YUFDM0MsaUJBQWlCLENBQ2hCLGlCQUFpQixDQUFDLE1BQU0sRUFDeEIsaUJBQWlCLENBQUMsS0FBSyxFQUN2QixpQkFBaUIsQ0FBQyxXQUFXLEVBQzdCLE9BQU8sQ0FDUjthQUNBLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSSxlQUFlLENBQ3BCLGlCQUEwRCxFQUMxRCxPQUE0QjtRQUU1QixPQUFPLElBQUEsMkJBQW1CLEVBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQzthQUMzQyxlQUFlLENBQ2QsaUJBQWlCLENBQUMsTUFBTSxFQUN4QixpQkFBaUIsQ0FBQyxLQUFLLEVBQ3ZCLGlCQUFpQixDQUFDLHdCQUF3QixFQUMxQyxPQUFPLENBQ1I7YUFDQSxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksMkJBQTJCLENBQ2hDLGlCQUFzRSxFQUN0RSxPQUE0QjtRQUU1QixPQUFPLElBQUEsMkJBQW1CLEVBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQzthQUMzQywyQkFBMkIsQ0FDMUIsaUJBQWlCLENBQUMsTUFBTSxFQUN4QixpQkFBaUIsQ0FBQyxLQUFLLEVBQ3ZCLGlCQUFpQixDQUFDLG1DQUFtQyxFQUNyRCxPQUFPLENBQ1I7YUFDQSxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksaUJBQWlCLENBQ3RCLGlCQUE0RCxFQUM1RCxPQUE0QjtRQUU1QixPQUFPLElBQUEsMkJBQW1CLEVBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQzthQUMzQyxpQkFBaUIsQ0FDaEIsaUJBQWlCLENBQUMsTUFBTSxFQUN4QixpQkFBaUIsQ0FBQyxLQUFLLEVBQ3ZCLGlCQUFpQixDQUFDLFdBQVcsRUFDN0IsT0FBTyxDQUNSO2FBQ0EsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNJLEtBQUssQ0FBQyxlQUFlLENBQzFCLGlCQUEwRCxFQUMxRCxPQUE0QjtRQUU1QixJQUFJLE9BQU8sR0FBRyxNQUFNLElBQUEsMkJBQW1CLEVBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLGVBQWUsQ0FDekUsaUJBQWlCLENBQUMsTUFBTSxFQUN4QixpQkFBaUIsQ0FBQyxLQUFLLEVBQ3ZCLGlCQUFpQixDQUFDLHVCQUF1QixFQUN6QyxPQUFPLENBQ1IsQ0FBQztRQUNGLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksNEJBQTRCLENBQ2pDLGlCQUF1RSxFQUN2RSxPQUE0QjtRQUU1QixPQUFPLElBQUEsMkJBQW1CLEVBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQzthQUMzQyw0QkFBNEIsQ0FDM0IsaUJBQWlCLENBQUMsTUFBTSxFQUN4QixpQkFBaUIsQ0FBQyxLQUFLLEVBQ3ZCLGlCQUFpQixDQUFDLG1DQUFtQyxFQUNyRCxPQUFPLENBQ1I7YUFDQSxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksZ0JBQWdCLENBQ3JCLGlCQUEyRCxFQUMzRCxPQUE0QjtRQUU1QixPQUFPLElBQUEsMkJBQW1CLEVBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQzthQUMzQyxnQkFBZ0IsQ0FDZixpQkFBaUIsQ0FBQyxNQUFNLEVBQ3hCLGlCQUFpQixDQUFDLEtBQUssRUFDdkIsaUJBQWlCLENBQUMsd0JBQXdCLEVBQzFDLE9BQU8sQ0FDUjthQUNBLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQztDQUNGO0FBekpELDhDQXlKQyJ9