"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const fixtures_1 = require("./fixtures");
const test_relationship_tuples = ava_1.default;
test_relationship_tuples.before(fixtures_1.provideTestExecutionContext);
test_relationship_tuples('Bulk relationship tuples test', async (t) => {
    const permit = t.context.permit;
    const logger = t.context.logger;
    try {
        const tuples = [
            {
                subject: 'folders:pdf',
                relation: 'parent',
                object: 'docs:tasks',
                tenant: 'default',
            },
            {
                subject: 'folders:png',
                relation: 'parent',
                object: 'docs:files',
                tenant: 'default',
            },
        ];
        logger.info('Tuples: ' + JSON.stringify(tuples));
        await permit.api.relationshipTuples.bulkRelationshipTuples(tuples);
    }
    catch (error) {
        logger.error(`Got error: ${error}`);
        t.fail(`Got error: ${error}`);
    }
});
const test_bulk_add_users = ava_1.default;
test_bulk_add_users.before(fixtures_1.provideTestExecutionContext);
test_bulk_add_users('Bulk users test', async (t) => {
    const permit = t.context.permit;
    const logger = t.context.logger;
    try {
        const users = [
            {
                key: 'user_maya_test_1',
            },
            {
                key: 'user_maya_test_2',
            },
        ];
        logger.info('users: ' + JSON.stringify(users));
        await permit.api.users.bulkUserCreate(users);
    }
    catch (error) {
        logger.error(`Got error: ${error}`);
        t.fail(`Got error: ${error}`);
    }
});
const test_bulk_replace_users = ava_1.default;
test_bulk_replace_users.before(fixtures_1.provideTestExecutionContext);
test_bulk_replace_users('Bulk users replace test', async (t) => {
    const permit = t.context.permit;
    const logger = t.context.logger;
    try {
        const users = [
            {
                key: 'user_maya_test_1',
                first_name: '1',
            },
            {
                key: 'user_maya_test_2',
                first_name: '2',
            },
        ];
        logger.info('users: ' + JSON.stringify(users));
        await permit.api.users.bulkUserReplace(users);
    }
    catch (error) {
        logger.error(`Got error: ${error}`);
        t.fail(`Got error: ${error}`);
    }
});
const test_bulk_delete_users = ava_1.default;
test_bulk_delete_users.before(fixtures_1.provideTestExecutionContext);
test_bulk_delete_users('Bulk users delete test', async (t) => {
    const permit = t.context.permit;
    const logger = t.context.logger;
    try {
        const users = [
            {
                key: 'user_maya_1',
            },
            {
                key: 'user_maya_2',
            },
        ];
        logger.info('users: ' + JSON.stringify(users));
        await permit.api.users.bulkUserCreate(users);
        const users_key = ['user_maya_1', 'user_maya_2'];
        logger.info('users: ' + JSON.stringify(users_key));
        await permit.api.users.bulkUserDelete(users_key);
    }
    catch (error) {
        logger.error(`Got error: ${error}`);
        t.fail(`Got error: ${error}`);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVsa190ZXN0LnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdGVzdHMvYnVsa190ZXN0LnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4Q0FBNkM7QUFFN0MseUNBQXNFO0FBRXRFLE1BQU0sd0JBQXdCLEdBQUcsYUFBcUMsQ0FBQztBQUN2RSx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsc0NBQTJCLENBQUMsQ0FBQztBQUM3RCx3QkFBd0IsQ0FBQywrQkFBK0IsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDcEUsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDaEMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFFaEMsSUFBSTtRQUNGLE1BQU0sTUFBTSxHQUFHO1lBQ2I7Z0JBQ0UsT0FBTyxFQUFFLGFBQWE7Z0JBQ3RCLFFBQVEsRUFBRSxRQUFRO2dCQUNsQixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsTUFBTSxFQUFFLFNBQVM7YUFDbEI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsYUFBYTtnQkFDdEIsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLE1BQU0sRUFBRSxZQUFZO2dCQUNwQixNQUFNLEVBQUUsU0FBUzthQUNsQjtTQUNGLENBQUM7UUFDRixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDakQsTUFBTSxNQUFNLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3BFO0lBQUMsT0FBTyxLQUFLLEVBQUU7UUFDZCxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsS0FBSyxFQUFFLENBQUMs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