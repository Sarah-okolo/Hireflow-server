import axios from 'axios';
import URL from 'url-parse';
import { ContextStore } from '../utils/context';
import { AxiosLoggingInterceptor } from '../utils/http-logger';
import { isOpaGetUserPermissionsResult, } from './interfaces';
const RESOURCE_DELIMITER = ':';
function isString(x) {
    return typeof x === 'string';
}
export class PermitError extends Error {
    constructor(message) {
        super(message);
        this.name = 'PermitError';
    }
}
export class PermitConnectionError extends PermitError {
    constructor(message) {
        super(message);
        this.name = 'PermitConnectionError';
    }
}
export class PermitPDPStatusError extends PermitError {
    constructor(message) {
        super(message);
        this.name = 'PermitPDPStatusError';
    }
}
/**
 * The {@link Enforcer} class is responsible for performing permission checks against the PDP.
 * It implements the {@link IEnforcer} interface.
 */
export class Enforcer {
    config;
    logger;
    contextStore; // cross-query context (global context)
    client;
    opaClient;
    /**
     * Creates an instance of the Enforcer class.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger instance for logging.
     */
    constructor(config, logger) {
        this.config = config;
        this.logger = logger;
        const opaBaseUrl = new URL(this.config.pdp);
        opaBaseUrl.set('port', '8181');
        opaBaseUrl.set('pathname', `${opaBaseUrl.pathname}v1/data/permit/`);
        const version = process.env.npm_package_version ?? 'unknown';
        if (config.axiosInstance) {
            this.client = config.axiosInstance;
            this.client.defaults.baseURL = `${this.config.pdp}/`;
            this.client.defaults.headers.common['X-Permit-SDK-Version'] = `node:${version}`;
        }
        else {
            this.client = axios.create({
                baseURL: `${this.config.pdp}/`,
                headers: {
                    'X-Permit-SDK-Version': `node:${version}`,
                },
            });
        }
        if (config.opaAxiosInstance) {
            this.opaClient = config.opaAxiosInstance;
            this.opaClient.defaults.baseURL = opaBaseUrl.toString();
            this.opaClient.defaults.headers.common['X-Permit-SDK-Version'] = `node:${version}`;
        }
        else {
            this.opaClient = axios.create({
                baseURL: opaBaseUrl.toString(),
                headers: {
                    'X-Permit-SDK-Version': `node:${version}`,
                },
            });
        }
        this.logger = logger;
        AxiosLoggingInterceptor.setupInterceptor(this.client, this.logger);
        this.contextStore = new ContextStore();
    }
    async getUserPermissions(user, tenants, resources, resource_types, config = {}) {
        return await this.getUserPermissionsWithExceptions(user, tenants, resources, resource_types, config).catch((err) => {
            const shouldThrow = config.throwOnError === undefined ? this.config.throwOnError : config.throwOnError;
            if (shouldThrow) {
                throw err;
            }
            else {
                this.logger.error(err);
                return {};
            }
        });
    }
    async getUserPermissionsWithExceptions(user, tenants, resources, resource_types, config = {}) {
        const checkTimeout = config.timeout || this.config.timeout;
        const input = {
            user: isString(user) ? { key: user } : user,
            tenants,
            resources,
            resource_types,
        };
        return await this.client
            .post('user-permissions', input, {
            headers: {
                Authorization: `Bearer ${this.config.token}`,
            },
            timeout: checkTimeout,
        })
            .then((response) => {
            if (response.status !== 200) {
                throw new PermitPDPStatusError(`Permit.getUserPermissions() got an unexpected status code: ${response.status}, please check your SDK init and make sure the PDP sidecar is configured correctly. \n\
            Read more about setting up the PDP at https://docs.permit.io`);
            }
            const permissions = (isOpaGetUserPermissionsResult(response.data)
                ? response.data.result.permissions
                : response.data) || {};
            this.logger.info(`permit.getUserPermissions(${Enforcer.userRepr(input.user)}) = ${JSON.stringify(permissions)}`);
            return permissions;
        })
            .catch((error) => {
            const errorMessage = `Error in permit.getUserPermissions(${Enforcer.userRepr(input.user)})`;
            if (axios.isAxiosError(error)) {
                const errorStatusCode = error.response?.status.toString() || '';
                const errorDetails = error?.response?.data
                    ? JSON.stringify(error.response.data)
                    : error.message;
                this.logger.error(`[${errorStatusCode}] ${errorMessage}, err: ${errorDetails}`);
            }
            else {
                this.logger.error(`${errorMessage}\n${error}`);
            }
            throw new PermitConnectionError(`Permit SDK got error: \n ${error.message} \n
          and cannot connect to the PDP, please check your configuration and make sure the
          PDP is running at ${this.config.pdp} and accepting requests. \n
          Read more about setting up the PDP at https://docs.permit.io`);
        });
    }
    async bulkCheck(checks, context = {}, // context provided specifically for this query
    config = {}) {
        return await this.bulkCheckWithExceptions(checks, context, config).catch((err) => {
            const shouldThrow = config.throwOnError === undefined ? this.config.throwOnError : config.throwOnError;
            if (shouldThrow) {
                throw err;
            }
            else {
                this.logger.error(err);
                return [];
            }
        });
    }
    buildCheckInput(user, action, resource, context = {}) {
        const normalizedUser = isString(user) ? { key: user } : user;
        const resourceObj = isString(resource) ? Enforcer.resourceFromString(resource) : resource;
        const normalizedResource = this.normalizeResource(resourceObj);
        const queryContext = this.contextStore.getDerivedContext(context);
        return {
            user: normalizedUser,
            action: action,
            resource: normalizedResource,
            context: queryContext,
        };
    }
    checkInputRepr(checkInput) {
        return `${Enforcer.userRepr(checkInput.user)}, ${checkInput.action}, ${Enforcer.resourceRepr(checkInput.resource)}`;
    }
    async bulkCheckWithExceptions(checks, context = {}, // context provided specifically for this query
    config = {}) {
        const checkTimeout = config.timeout || this.config.timeout;
        const inputs = [];
        checks.forEach((check) => {
            const input = this.buildCheckInput(check.user, check.action, check.resource, context);
            inputs.push(input);
        });
        return await this.client
            .post('allowed/bulk', inputs, {
            headers: {
                Authorization: `Bearer ${this.config.token}`,
            },
            timeout: checkTimeout,
        })
            .then((response) => {
            if (response.status !== 200) {
                throw new PermitPDPStatusError(`Permit.bulkCheck() got an unexpected status code: ${response.status}, please check your SDK init and make sure the PDP sidecar is configured correctly. \n\
            Read more about setting up the PDP at https://docs.permit.io`);
            }
            const decisions = (('allow' in response.data ? response.data.allow : response.data.result.allow) || []).map((decision) => decision.allow || false);
            this.logger.info(`permit.bulkCheck(${inputs.map((input) => this.checkInputRepr(input))}) = ${decisions}`);
            return decisions;
        })
            .catch((error) => {
            const errorMessage = `Error in permit.bulkCheck(${inputs.map((input) => this.checkInputRepr(input))})`;
            if (axios.isAxiosError(error)) {
                const errorStatusCode = error.response?.status.toString() || '';
                const errorDetails = error?.response?.data
                    ? JSON.stringify(error.response.data)
                    : error.message;
                this.logger.error(`[${errorStatusCode}] ${errorMessage}, err: ${errorDetails}`);
            }
            else {
                this.logger.error(`${errorMessage}\n${error}`);
            }
            throw new PermitConnectionError(`Permit SDK got error: \n ${error.message} \n
          and cannot connect to the PDP, please check your configuration and make sure the
          PDP is running at ${this.config.pdp} and accepting requests. \n
          Read more about setting up the PDP at https://docs.permit.io`);
        });
    }
    async checkAllTenants(user, action, resource, context = {}, // default to empty context if not provided
    sdk = 'node') {
        try {
            const response = await this.client.post('/allowed/all-tenants', {
                headers: {
                    Authorization: `Bearer ${this.config.token}`,
                    'X-Permit-Sdk-Language': sdk,
                },
                params: {
                    user,
                    action,
                    resource,
                    context,
                },
            });
            return response.data.allowedTenants.map((item) => item.tenant);
        }
        catch (error) {
            this.logger.error('Error fetching all tenants:', error);
            throw error;
        }
    }
    async check(user, action, resource, context = {}, // context provided specifically for this query
    config = {}) {
        return await this.checkWithExceptions(user, action, resource, context, config).catch((err) => {
            const shouldThrow = config.throwOnError === undefined ? this.config.throwOnError : config.throwOnError;
            if (shouldThrow) {
                throw err;
            }
            else {
                this.logger.error(err);
                return false;
            }
        });
    }
    //check
    async checkWithExceptions(user, action, resource, context = {}, // context provided specifically for this query
    config = {}) {
        let input = this.buildCheckInput(user, action, resource, context);
        const client = config?.useOpa ? this.opaClient : this.client;
        const path = config?.useOpa ? 'root' : 'allowed';
        if (config?.useOpa) {
            input = { input: input };
        }
        // /root
        const checkTimeout = config.timeout || this.config.timeout;
        return await client
            .post(path, input, {
            headers: {
                Authorization: `Bearer ${this.config.token}`,
            },
            timeout: checkTimeout,
        })
            .then((response) => {
            if (response.status !== 200) {
                throw new PermitPDPStatusError(`Permit.check() got an unexpected status code: ${response.status}, please check your SDK init and make sure the PDP sidecar is configured correctly. \n\
            Read more about setting up the PDP at https://docs.permit.io`);
            }
            const decision = ('allow' in response.data ? response.data.allow : response.data.result.allow) || false;
            this.logger.info(`permit.check(${this.checkInputRepr(input.input || input)}) = ${decision}`);
            return decision;
        })
            .catch((error) => {
            const errorMessage = `Error in permit.check(${this.checkInputRepr(input.input || input)})`;
            if (axios.isAxiosError(error)) {
                const errorStatusCode = error.response?.status.toString() || '';
                const errorDetails = error?.response?.data
                    ? JSON.stringify(error.response.data)
                    : error.message;
                this.logger.error(`[${errorStatusCode}] ${errorMessage}, err: ${errorDetails}`);
            }
            else {
                this.logger.error(`${errorMessage}\n${error}`);
            }
            throw new PermitConnectionError(`Permit SDK got error: \n ${error.message} \n
          and cannot connect to the PDP, please check your configuration and make sure the PDP is running at ${this.config.pdp} and accepting requests. \n
          Read more about setting up the PDP at https://docs.permit.io`);
        });
    }
    // TODO: remove this eventually, once we decide on finalized structure of AuthzQuery
    normalizeResource(resource) {
        const normalizedResource = Object.assign({}, resource);
        // if tenant is empty, we might auto-set the default tenant according to config
        if (!normalizedResource.tenant && this.config.multiTenancy.useDefaultTenantIfEmpty) {
            normalizedResource.tenant = this.config.multiTenancy.defaultTenant;
        }
        return normalizedResource;
    }
    static userRepr(user) {
        if (user.attributes || user.email) {
            return JSON.stringify(user);
        }
        return user.key;
    }
    static resourceRepr(resource) {
        if (resource.attributes && resource.attributes.length > 0) {
            return JSON.stringify(resource);
        }
        let resourceRepr = '';
        if (resource.tenant) {
            resourceRepr += `${resource.tenant}/`;
        }
        resourceRepr += `${resource.type}:${resource.key ?? '*'}`;
        return resourceRepr;
    }
    static resourceFromString(resource) {
        const parts = resource.split(RESOURCE_DELIMITER);
        if (parts.length < 1 || parts.length > 2) {
            throw Error(`permit.check() got invalid resource string: '${resource}'`);
        }
        return {
            type: parts[0],
            key: parts.length > 1 ? parts[1] : undefined,
        };
    }
    getMethods() {
        return {
            check: this.check.bind(this),
            bulkCheck: this.bulkCheck.bind(this),
            getUserPermissions: this.getUserPermissions.bind(this),
            checkAllTenants: this.checkAllTenants.bind(this),
        };
    }
}
//# sourceMappingURL=data:application/json;base64,