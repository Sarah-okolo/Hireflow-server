import anyTest from 'ava';
import { provideTestExecutionContext } from './fixtures';
const test_relationship_tuples = anyTest;
test_relationship_tuples.before(provideTestExecutionContext);
test_relationship_tuples('Bulk relationship tuples test', async (t) => {
    const permit = t.context.permit;
    const logger = t.context.logger;
    try {
        const tuples = [
            {
                subject: 'folders:pdf',
                relation: 'parent',
                object: 'docs:tasks',
                tenant: 'default',
            },
            {
                subject: 'folders:png',
                relation: 'parent',
                object: 'docs:files',
                tenant: 'default',
            },
        ];
        logger.info('Tuples: ' + JSON.stringify(tuples));
        await permit.api.relationshipTuples.bulkRelationshipTuples(tuples);
    }
    catch (error) {
        logger.error(`Got error: ${error}`);
        t.fail(`Got error: ${error}`);
    }
});
const test_bulk_add_users = anyTest;
test_bulk_add_users.before(provideTestExecutionContext);
test_bulk_add_users('Bulk users test', async (t) => {
    const permit = t.context.permit;
    const logger = t.context.logger;
    try {
        const users = [
            {
                key: 'user_maya_test_1',
            },
            {
                key: 'user_maya_test_2',
            },
        ];
        logger.info('users: ' + JSON.stringify(users));
        await permit.api.users.bulkUserCreate(users);
    }
    catch (error) {
        logger.error(`Got error: ${error}`);
        t.fail(`Got error: ${error}`);
    }
});
const test_bulk_replace_users = anyTest;
test_bulk_replace_users.before(provideTestExecutionContext);
test_bulk_replace_users('Bulk users replace test', async (t) => {
    const permit = t.context.permit;
    const logger = t.context.logger;
    try {
        const users = [
            {
                key: 'user_maya_test_1',
                first_name: '1',
            },
            {
                key: 'user_maya_test_2',
                first_name: '2',
            },
        ];
        logger.info('users: ' + JSON.stringify(users));
        await permit.api.users.bulkUserReplace(users);
    }
    catch (error) {
        logger.error(`Got error: ${error}`);
        t.fail(`Got error: ${error}`);
    }
});
const test_bulk_delete_users = anyTest;
test_bulk_delete_users.before(provideTestExecutionContext);
test_bulk_delete_users('Bulk users delete test', async (t) => {
    const permit = t.context.permit;
    const logger = t.context.logger;
    try {
        const users = [
            {
                key: 'user_maya_1',
            },
            {
                key: 'user_maya_2',
            },
        ];
        logger.info('users: ' + JSON.stringify(users));
        await permit.api.users.bulkUserCreate(users);
        const users_key = ['user_maya_1', 'user_maya_2'];
        logger.info('users: ' + JSON.stringify(users_key));
        await permit.api.users.bulkUserDelete(users_key);
    }
    catch (error) {
        logger.error(`Got error: ${error}`);
        t.fail(`Got error: ${error}`);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVsa190ZXN0LnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdGVzdHMvYnVsa190ZXN0LnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxPQUEwQixNQUFNLEtBQUssQ0FBQztBQUU3QyxPQUFPLEVBQUUsMkJBQTJCLEVBQWUsTUFBTSxZQUFZLENBQUM7QUFFdEUsTUFBTSx3QkFBd0IsR0FBRyxPQUFxQyxDQUFDO0FBQ3ZFLHdCQUF3QixDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQzdELHdCQUF3QixDQUFDLCtCQUErQixFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUNwRSxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUNoQyxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUVoQyxJQUFJO1FBQ0YsTUFBTSxNQUFNLEdBQUc7WUFDYjtnQkFDRSxPQUFPLEVBQUUsYUFBYTtnQkFDdEIsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLE1BQU0sRUFBRSxZQUFZO2dCQUNwQixNQUFNLEVBQUUsU0FBUzthQUNsQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxhQUFhO2dCQUN0QixRQUFRLEVBQUUsUUFBUTtnQkFDbEIsTUFBTSxFQUFFLFlBQVk7Z0JBQ3BCLE1BQU0sRUFBRSxTQUFTO2FBQ2xCO1NBQ0YsQ0FBQztRQUNGLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNqRCxNQUFNLE1BQU0sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDcEU7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNkLE1BQU0sQ0FBQyxLQUFLLENBQUMsY0FBYyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FB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