/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * BulkOperationsApi - axios parameter creator
 * @export
 */
export const BulkOperationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Bulk Create Tenants
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {any} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateTenants: async (projId, envId, requestBody, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('bulkCreateTenants', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('bulkCreateTenants', 'envId', envId);
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('bulkCreateTenants', 'requestBody', requestBody);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/tenants`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Bulk Create Users
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param userCreateBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateUsers: async (projId, envId, userCreateBulkOperation, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('bulkCreateUsers', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('bulkCreateUsers', 'envId', envId);
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('bulkCreateUsers', 'requestBody', userCreateBulkOperation);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/users`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(userCreateBulkOperation, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes many Resource Instances.
         * @summary Bulk Delete Resource Instances
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceInstanceDeleteBulkOperation} resourceInstanceDeleteBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteResourceInstances: async (projId, envId, resourceInstanceDeleteBulkOperation, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('bulkDeleteResourceInstances', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('bulkDeleteResourceInstances', 'envId', envId);
            // verify required parameter 'resourceInstanceDeleteBulkOperation' is not null or undefined
            assertParamExists('bulkDeleteResourceInstances', 'resourceInstanceDeleteBulkOperation', resourceInstanceDeleteBulkOperation);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/resource_instances`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(resourceInstanceDeleteBulkOperation, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Bulk Delete Tenants
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {any} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteTenants: async (projId, envId, requestBody, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('bulkDeleteTenants', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('bulkDeleteTenants', 'envId', envId);
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('bulkDeleteTenants', 'requestBody', requestBody);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/tenants`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Bulk Delete Users
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param userDeleteBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteUsers: async (projId, envId, userDeleteBulkOperation, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('bulkDeleteUsers', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('bulkDeleteUsers', 'envId', envId);
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('bulkDeleteUsers', 'requestBody', userDeleteBulkOperation);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/users`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(userDeleteBulkOperation, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.
         * @summary Bulk Replace Resource Instances
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceInstanceCreateBulkOperation} resourceInstanceCreateBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkReplaceResourceInstances: async (projId, envId, resourceInstanceCreateBulkOperation, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('bulkReplaceResourceInstances', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('bulkReplaceResourceInstances', 'envId', envId);
            // verify required parameter 'resourceInstanceCreateBulkOperation' is not null or undefined
            assertParamExists('bulkReplaceResourceInstances', 'resourceInstanceCreateBulkOperation', resourceInstanceCreateBulkOperation);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/resource_instances`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(resourceInstanceCreateBulkOperation, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Bulk Replace Users
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param userReplaceBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkReplaceUsers: async (projId, envId, userReplaceBulkOperation, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('bulkReplaceUsers', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('bulkReplaceUsers', 'envId', envId);
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('bulkReplaceUsers', 'requestBody', userReplaceBulkOperation);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/bulk/users`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(userReplaceBulkOperation, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * BulkOperationsApi - functional programming interface
 * @export
 */
export const BulkOperationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = BulkOperationsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Bulk Create Tenants
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {{ [key: string]: any; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkCreateTenants(projId, envId, requestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreateTenants(projId, envId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Bulk Create Users
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param userCreateBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkCreateUsers(projId, envId, userCreateBulkOperation, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkCreateUsers(projId, envId, userCreateBulkOperation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes many Resource Instances.
         * @summary Bulk Delete Resource Instances
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceInstanceDeleteBulkOperation} resourceInstanceDeleteBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkDeleteResourceInstances(projId, envId, resourceInstanceDeleteBulkOperation, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteResourceInstances(projId, envId, resourceInstanceDeleteBulkOperation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Bulk Delete Tenants
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {{ [key: string]: any; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkDeleteTenants(projId, envId, requestBody, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteTenants(projId, envId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Bulk Delete Users
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param userDeleteBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkDeleteUsers(projId, envId, userDeleteBulkOperation, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkDeleteUsers(projId, envId, userDeleteBulkOperation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.
         * @summary Bulk Replace Resource Instances
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceInstanceCreateBulkOperation} resourceInstanceCreateBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkReplaceResourceInstances(projId, envId, resourceInstanceCreateBulkOperation, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkReplaceResourceInstances(projId, envId, resourceInstanceCreateBulkOperation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Bulk Replace Users
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param userReplaceBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkReplaceUsers(projId, envId, userReplaceBulkOperation, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkReplaceUsers(projId, envId, userReplaceBulkOperation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * BulkOperationsApi - factory interface
 * @export
 */
export const BulkOperationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = BulkOperationsApiFp(configuration);
    return {
        /**
         *
         * @summary Bulk Create Tenants
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {{ [key: string]: any; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateTenants(projId, envId, requestBody, options) {
            return localVarFp
                .bulkCreateTenants(projId, envId, requestBody, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bulk Create Users
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param userCreateBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkCreateUsers(projId, envId, userCreateBulkOperation, options) {
            return localVarFp
                .bulkCreateUsers(projId, envId, userCreateBulkOperation, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes many Resource Instances.
         * @summary Bulk Delete Resource Instances
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceInstanceDeleteBulkOperation} resourceInstanceDeleteBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteResourceInstances(projId, envId, resourceInstanceDeleteBulkOperation, options) {
            return localVarFp
                .bulkDeleteResourceInstances(projId, envId, resourceInstanceDeleteBulkOperation, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bulk Delete Tenants
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {{ [key: string]: any; }} requestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteTenants(projId, envId, requestBody, options) {
            return localVarFp
                .bulkDeleteTenants(projId, envId, requestBody, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bulk Delete Users
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param userDeleteBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkDeleteUsers(projId, envId, userDeleteBulkOperation, options) {
            return localVarFp
                .bulkDeleteUsers(projId, envId, userDeleteBulkOperation, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.
         * @summary Bulk Replace Resource Instances
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {ResourceInstanceCreateBulkOperation} resourceInstanceCreateBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkReplaceResourceInstances(projId, envId, resourceInstanceCreateBulkOperation, options) {
            return localVarFp
                .bulkReplaceResourceInstances(projId, envId, resourceInstanceCreateBulkOperation, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bulk Replace Users
         * @param {any} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {any} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param userReplaceBulkOperation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkReplaceUsers(projId, envId, userReplaceBulkOperation, options) {
            return localVarFp
                .bulkReplaceUsers(projId, envId, userReplaceBulkOperation, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * BulkOperationsApi - object-oriented interface
 * @export
 * @class BulkOperationsApi
 * @extends {BaseAPI}
 */
export class BulkOperationsApi extends BaseAPI {
    /**
     *
     * @summary Bulk Create Tenants
     * @param {BulkOpertionsApiBulkCreateTenantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    bulkCreateTenants(requestParameters, options) {
        return BulkOperationsApiFp(this.configuration)
            .bulkCreateTenants(requestParameters.projId, requestParameters.envId, requestParameters.requestBody, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bulk Create Users
     * @param {BulkOperationsApiBulkCreateUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    bulkCreateUsers(requestParameters, options) {
        return BulkOperationsApiFp(this.configuration)
            .bulkCreateUsers(requestParameters.projId, requestParameters.envId, requestParameters.userCreateBulkOperations, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes many Resource Instances.
     * @summary Bulk Delete Resource Instances
     * @param {BulkOperationsApiBulkDeleteResourceInstancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    bulkDeleteResourceInstances(requestParameters, options) {
        return BulkOperationsApiFp(this.configuration)
            .bulkDeleteResourceInstances(requestParameters.projId, requestParameters.envId, requestParameters.resourceInstanceDeleteBulkOperation, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bulk Delete Tenants
     * @param {BulkOperationsApiBulkDeleteTenantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    bulkDeleteTenants(requestParameters, options) {
        return BulkOperationsApiFp(this.configuration)
            .bulkDeleteTenants(requestParameters.projId, requestParameters.envId, requestParameters.requestBody, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bulk Delete Users
     * @param {BulkOperationsApiBulkDeleteUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    async bulkDeleteUsers(requestParameters, options) {
        let request = await BulkOperationsApiFp(this.configuration).bulkDeleteUsers(requestParameters.projId, requestParameters.envId, requestParameters.userDeleteBulkOperation, options);
        return request(this.axios, this.basePath);
    }
    /**
     * Creates or replaces Resource Instances. If a resource instance with `key` and `resource` already exists, it will be replaced.
     * @summary Bulk Replace Resource Instances
     * @param {BulkOperationsApiBulkReplaceResourceInstancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    bulkReplaceResourceInstances(requestParameters, options) {
        return BulkOperationsApiFp(this.configuration)
            .bulkReplaceResourceInstances(requestParameters.projId, requestParameters.envId, requestParameters.resourceInstanceCreateBulkOperation, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bulk Replace Users
     * @param {BulkOperationsApiBulkReplaceUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BulkOperationsApi
     */
    bulkReplaceUsers(requestParameters, options) {
        return BulkOperationsApiFp(this.configuration)
            .bulkReplaceUsers(requestParameters.projId, requestParameters.envId, requestParameters.userReplaceBulkOperation, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,