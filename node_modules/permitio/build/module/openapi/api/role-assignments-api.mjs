/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * RoleAssignmentsApi - axios parameter creator
 * @export
 */
export const RoleAssignmentsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
         * @summary Assign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleAssignmentCreate} roleAssignmentCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRole: async (projId, envId, roleAssignmentCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('assignRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('assignRole', 'envId', envId);
            // verify required parameter 'roleAssignmentCreate' is not null or undefined
            assertParamExists('assignRole', 'roleAssignmentCreate', roleAssignmentCreate);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(roleAssignmentCreate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Bulk Assign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {Array<RoleAssignmentCreate>} roleAssignmentCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAssignRole: async (projId, envId, roleAssignmentCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('bulkAssignRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('bulkAssignRole', 'envId', envId);
            // verify required parameter 'roleAssignmentCreate' is not null or undefined
            assertParamExists('bulkAssignRole', 'roleAssignmentCreate', roleAssignmentCreate);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments/bulk`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(roleAssignmentCreate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Bulk Unassign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {Array<RoleAssignmentRemove>} roleAssignmentRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUnassignRole: async (projId, envId, roleAssignmentRemove, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('bulkUnassignRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('bulkUnassignRole', 'envId', envId);
            // verify required parameter 'roleAssignmentRemove' is not null or undefined
            assertParamExists('bulkUnassignRole', 'roleAssignmentRemove', roleAssignmentRemove);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments/bulk`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(roleAssignmentRemove, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user (supports multiple). - If the `tenant` filter is present, will only return the role assignments in that tenant (supports multiple). - If the `role` filter is present, will only return role assignments that are granting that role (supports multiple). - If the `resource` filter is present, will only return role assignments for resource instances of that resource type. - If the `resource_instance` filter is present, will only return role assignments for that resource instance.  Providing both `tenant` and `resource_instance` filters will only return role assignments if the resource instance is in that tenant. If multiple tenants are received, the last tenant will be compared with the resource instance.
         * @summary List Role Assignments
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [user] optional user(s) filter, will only return role assignments granted to this user(s).
         * @param {string} [role] optional role(s) filter, will only return role assignments granting this role(s).
         * @param {string} [tenant] optional tenant(s) filter, will only return role assignments granted in that tenant(s).
         * @param {string} [resource] optional resource **type** filter, will only return role assignments granted on that resource type.
         * @param {string} [resourceInstance] optional resource instance filter, will only return role assignments granted on that resource instance.
         * @param {boolean} [detailed] Whether to return full details about the user, tenant and role
         * @param {boolean} [includeTotalCount] If true, returns the list of role assignments and the total count.
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleAssignments: async (projId, envId, user, role, tenant, resource, resourceInstance, detailed, includeTotalCount, page, perPage, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('listRoleAssignments', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('listRoleAssignments', 'envId', envId);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }
            if (role !== undefined) {
                localVarQueryParameter['role'] = role;
            }
            if (tenant !== undefined) {
                localVarQueryParameter['tenant'] = tenant;
            }
            if (resource !== undefined) {
                localVarQueryParameter['resource'] = resource;
            }
            if (resourceInstance !== undefined) {
                localVarQueryParameter['resource_instance'] = resourceInstance;
            }
            if (detailed !== undefined) {
                localVarQueryParameter['detailed'] = detailed;
            }
            if (includeTotalCount !== undefined) {
                localVarQueryParameter['include_total_count'] = includeTotalCount;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
         * @summary Unassign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleAssignmentRemove} roleAssignmentRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignRole: async (projId, envId, roleAssignmentRemove, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('unassignRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('unassignRole', 'envId', envId);
            // verify required parameter 'roleAssignmentRemove' is not null or undefined
            assertParamExists('unassignRole', 'roleAssignmentRemove', roleAssignmentRemove);
            const localVarPath = `/v2/facts/{proj_id}/{env_id}/role_assignments`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(roleAssignmentRemove, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RoleAssignmentsApi - functional programming interface
 * @export
 */
export const RoleAssignmentsApiFp = function (configuration) {
    const localVarAxiosParamCreator = RoleAssignmentsApiAxiosParamCreator(configuration);
    return {
        /**
         * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
         * @summary Assign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleAssignmentCreate} roleAssignmentCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignRole(projId, envId, roleAssignmentCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignRole(projId, envId, roleAssignmentCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Bulk Assign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {Array<RoleAssignmentCreate>} roleAssignmentCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkAssignRole(projId, envId, roleAssignmentCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkAssignRole(projId, envId, roleAssignmentCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Bulk Unassign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {Array<RoleAssignmentRemove>} roleAssignmentRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bulkUnassignRole(projId, envId, roleAssignmentRemove, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bulkUnassignRole(projId, envId, roleAssignmentRemove, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user (supports multiple). - If the `tenant` filter is present, will only return the role assignments in that tenant (supports multiple). - If the `role` filter is present, will only return role assignments that are granting that role (supports multiple). - If the `resource` filter is present, will only return role assignments for resource instances of that resource type. - If the `resource_instance` filter is present, will only return role assignments for that resource instance.  Providing both `tenant` and `resource_instance` filters will only return role assignments if the resource instance is in that tenant. If multiple tenants are received, the last tenant will be compared with the resource instance.
         * @summary List Role Assignments
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [user] optional user(s) filter, will only return role assignments granted to this user(s).
         * @param {string} [role] optional role(s) filter, will only return role assignments granting this role(s).
         * @param {string} [tenant] optional tenant(s) filter, will only return role assignments granted in that tenant(s).
         * @param {string} [resource] optional resource **type** filter, will only return role assignments granted on that resource type.
         * @param {string} [resourceInstance] optional resource instance filter, will only return role assignments granted on that resource instance.
         * @param {boolean} [detailed] Whether to return full details about the user, tenant and role
         * @param {boolean} [includeTotalCount] If true, returns the list of role assignments and the total count.
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRoleAssignments(projId, envId, user, role, tenant, resource, resourceInstance, detailed, includeTotalCount, page, perPage, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRoleAssignments(projId, envId, user, role, tenant, resource, resourceInstance, detailed, includeTotalCount, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
         * @summary Unassign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleAssignmentRemove} roleAssignmentRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unassignRole(projId, envId, roleAssignmentRemove, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unassignRole(projId, envId, roleAssignmentRemove, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * RoleAssignmentsApi - factory interface
 * @export
 */
export const RoleAssignmentsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = RoleAssignmentsApiFp(configuration);
    return {
        /**
         * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
         * @summary Assign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleAssignmentCreate} roleAssignmentCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRole(projId, envId, roleAssignmentCreate, options) {
            return localVarFp
                .assignRole(projId, envId, roleAssignmentCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bulk Assign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {Array<RoleAssignmentCreate>} roleAssignmentCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkAssignRole(projId, envId, roleAssignmentCreate, options) {
            return localVarFp
                .bulkAssignRole(projId, envId, roleAssignmentCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Bulk Unassign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {Array<RoleAssignmentRemove>} roleAssignmentRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bulkUnassignRole(projId, envId, roleAssignmentRemove, options) {
            return localVarFp
                .bulkUnassignRole(projId, envId, roleAssignmentRemove, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user (supports multiple). - If the `tenant` filter is present, will only return the role assignments in that tenant (supports multiple). - If the `role` filter is present, will only return role assignments that are granting that role (supports multiple). - If the `resource` filter is present, will only return role assignments for resource instances of that resource type. - If the `resource_instance` filter is present, will only return role assignments for that resource instance.  Providing both `tenant` and `resource_instance` filters will only return role assignments if the resource instance is in that tenant. If multiple tenants are received, the last tenant will be compared with the resource instance.
         * @summary List Role Assignments
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} [user] optional user(s) filter, will only return role assignments granted to this user(s).
         * @param {string} [role] optional role(s) filter, will only return role assignments granting this role(s).
         * @param {string} [tenant] optional tenant(s) filter, will only return role assignments granted in that tenant(s).
         * @param {string} [resource] optional resource **type** filter, will only return role assignments granted on that resource type.
         * @param {string} [resourceInstance] optional resource instance filter, will only return role assignments granted on that resource instance.
         * @param {boolean} [detailed] Whether to return full details about the user, tenant and role
         * @param {boolean} [includeTotalCount] If true, returns the list of role assignments and the total count.
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoleAssignments(projId, envId, user, role, tenant, resource, resourceInstance, detailed, includeTotalCount, page, perPage, options) {
            return localVarFp
                .listRoleAssignments(projId, envId, user, role, tenant, resource, resourceInstance, detailed, includeTotalCount, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
         * @summary Unassign Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleAssignmentRemove} roleAssignmentRemove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignRole(projId, envId, roleAssignmentRemove, options) {
            return localVarFp
                .unassignRole(projId, envId, roleAssignmentRemove, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * RoleAssignmentsApi - object-oriented interface
 * @export
 * @class RoleAssignmentsApi
 * @extends {BaseAPI}
 */
export class RoleAssignmentsApi extends BaseAPI {
    /**
     * Assigns a role to a user within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.
     * @summary Assign Role
     * @param {RoleAssignmentsApiAssignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    assignRole(requestParameters, options) {
        return RoleAssignmentsApiFp(this.configuration)
            .assignRole(requestParameters.projId, requestParameters.envId, requestParameters.roleAssignmentCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bulk Assign Role
     * @param {RoleAssignmentsApiBulkAssignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    bulkAssignRole(requestParameters, options) {
        return RoleAssignmentsApiFp(this.configuration)
            .bulkAssignRole(requestParameters.projId, requestParameters.envId, requestParameters.roleAssignmentCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Bulk Unassign Role
     * @param {RoleAssignmentsApiBulkUnassignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    bulkUnassignRole(requestParameters, options) {
        return RoleAssignmentsApiFp(this.configuration)
            .bulkUnassignRole(requestParameters.projId, requestParameters.envId, requestParameters.roleAssignmentRemove, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists the role assignments defined within an environment.  - If the `user` filter is present, will only return the role assignments of that user (supports multiple). - If the `tenant` filter is present, will only return the role assignments in that tenant (supports multiple). - If the `role` filter is present, will only return role assignments that are granting that role (supports multiple). - If the `resource` filter is present, will only return role assignments for resource instances of that resource type. - If the `resource_instance` filter is present, will only return role assignments for that resource instance.  Providing both `tenant` and `resource_instance` filters will only return role assignments if the resource instance is in that tenant. If multiple tenants are received, the last tenant will be compared with the resource instance.
     * @summary List Role Assignments
     * @param {RoleAssignmentsApiListRoleAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    listRoleAssignments(requestParameters, options) {
        return RoleAssignmentsApiFp(this.configuration)
            .listRoleAssignments(requestParameters.projId, requestParameters.envId, requestParameters.user, requestParameters.role, requestParameters.tenant, requestParameters.resource, requestParameters.resourceInstance, requestParameters.detailed, requestParameters.includeTotalCount, requestParameters.page, requestParameters.perPage, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Unassigns a user role within a tenant.  The tenant defines the scope of the assignment. In other words, the role is effective only within the tenant.  If the role is not actually assigned, will return 404.
     * @summary Unassign Role
     * @param {RoleAssignmentsApiUnassignRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    unassignRole(requestParameters, options) {
        return RoleAssignmentsApiFp(this.configuration)
            .unassignRole(requestParameters.projId, requestParameters.envId, requestParameters.roleAssignmentRemove, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,