/* tslint:disable */
/* eslint-disable */
/**
 * Permit.io API
 *  Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, } from '../common';
// @ts-ignore
import { BASE_PATH, BaseAPI } from '../base';
/**
 * RolesApi - axios parameter creator
 * @export
 */
export const RolesApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This endpoint is part of the role hierarchy feature.  Makes role with id `role_id` extend the role with id `parent_role_id`. In other words, `role_id` will automatically be assigned any permissions that are granted to `parent_role_id`.  We can say the `role_id` **extends** `parent_role_id` or **inherits** from `parent_role_id`.  If `role_id` is already an ancestor of `parent_role_id`, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.
         * @summary Add Parent Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentRole: async (projId, envId, roleId, parentRoleId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('addParentRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('addParentRole', 'envId', envId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('addParentRole', 'roleId', roleId);
            // verify required parameter 'parentRoleId' is not null or undefined
            assertParamExists('addParentRole', 'parentRoleId', parentRoleId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}/parents/{parent_role_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)))
                .replace(`{${'parent_role_id'}}`, encodeURIComponent(String(parentRoleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.
         * @summary Assign Permissions To Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {AddRolePermissions} addRolePermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPermissionsToRole: async (projId, envId, roleId, addRolePermissions, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('assignPermissionsToRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('assignPermissionsToRole', 'envId', envId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('assignPermissionsToRole', 'roleId', roleId);
            // verify required parameter 'addRolePermissions' is not null or undefined
            assertParamExists('assignPermissionsToRole', 'addRolePermissions', addRolePermissions);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(addRolePermissions, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new tenant role.
         * @summary Create Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleCreate} roleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: async (projId, envId, roleCreate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('createRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('createRole', 'envId', envId);
            // verify required parameter 'roleCreate' is not null or undefined
            assertParamExists('createRole', 'roleCreate', roleCreate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(roleCreate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a tenant role and all its related data. This includes any permissions granted to said role.
         * @summary Delete Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: async (projId, envId, roleId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('deleteRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('deleteRole', 'envId', envId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('deleteRole', 'roleId', roleId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single tenant role, if such role exists.
         * @summary Get Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole: async (projId, envId, roleId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('getRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('getRole', 'envId', envId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('getRole', 'roleId', roleId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all tenant roles.
         * @summary List Roles
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {boolean} [includeTotalCount] Include total count in response (default to false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles: async (projId, envId, page, perPage, includeTotalCount, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('listRoles', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('listRoles', 'envId', envId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }
            if (includeTotalCount !== undefined) {
                localVarQueryParameter['include_total_count'] = includeTotalCount;
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is part of the role hierarchy feature.  Removes `parent_role_id` from the list of parent roles of role with id `role_id`. In other words, `role_id` will no longer be automatically assigned permissions that are granted to `parent_role_id`.  We can say the `role_id` **not longer extends** `parent_role_id` or **no longer inherits** from `parent_role_id`.
         * @summary Remove Parent Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentRole: async (projId, envId, roleId, parentRoleId, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('removeParentRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('removeParentRole', 'envId', envId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('removeParentRole', 'roleId', roleId);
            // verify required parameter 'parentRoleId' is not null or undefined
            assertParamExists('removeParentRole', 'parentRoleId', parentRoleId);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}/parents/{parent_role_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)))
                .replace(`{${'parent_role_id'}}`, encodeURIComponent(String(parentRoleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
         * @summary Remove Permissions From Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {RemoveRolePermissions} removeRolePermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePermissionsFromRole: async (projId, envId, roleId, removeRolePermissions, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('removePermissionsFromRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('removePermissionsFromRole', 'envId', envId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('removePermissionsFromRole', 'roleId', roleId);
            // verify required parameter 'removeRolePermissions' is not null or undefined
            assertParamExists('removePermissionsFromRole', 'removeRolePermissions', removeRolePermissions);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}/permissions`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(removeRolePermissions, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partially updates a tenant role. Fields that will be provided will be completely overwritten.
         * @summary Update Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {RoleUpdate} roleUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: async (projId, envId, roleId, roleUpdate, options = {}) => {
            // verify required parameter 'projId' is not null or undefined
            assertParamExists('updateRole', 'projId', projId);
            // verify required parameter 'envId' is not null or undefined
            assertParamExists('updateRole', 'envId', envId);
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('updateRole', 'roleId', roleId);
            // verify required parameter 'roleUpdate' is not null or undefined
            assertParamExists('updateRole', 'roleUpdate', roleUpdate);
            const localVarPath = `/v2/schema/{proj_id}/{env_id}/roles/{role_id}`
                .replace(`{${'proj_id'}}`, encodeURIComponent(String(projId)))
                .replace(`{${'env_id'}}`, encodeURIComponent(String(envId)))
                .replace(`{${'role_id'}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication HTTPBearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(roleUpdate, localVarRequestOptions, configuration);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RolesApi - functional programming interface
 * @export
 */
export const RolesApiFp = function (configuration) {
    const localVarAxiosParamCreator = RolesApiAxiosParamCreator(configuration);
    return {
        /**
         * This endpoint is part of the role hierarchy feature.  Makes role with id `role_id` extend the role with id `parent_role_id`. In other words, `role_id` will automatically be assigned any permissions that are granted to `parent_role_id`.  We can say the `role_id` **extends** `parent_role_id` or **inherits** from `parent_role_id`.  If `role_id` is already an ancestor of `parent_role_id`, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.
         * @summary Add Parent Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addParentRole(projId, envId, roleId, parentRoleId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addParentRole(projId, envId, roleId, parentRoleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.
         * @summary Assign Permissions To Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {AddRolePermissions} addRolePermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignPermissionsToRole(projId, envId, roleId, addRolePermissions, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignPermissionsToRole(projId, envId, roleId, addRolePermissions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new tenant role.
         * @summary Create Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleCreate} roleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole(projId, envId, roleCreate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRole(projId, envId, roleCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a tenant role and all its related data. This includes any permissions granted to said role.
         * @summary Delete Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(projId, envId, roleId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRole(projId, envId, roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a single tenant role, if such role exists.
         * @summary Get Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRole(projId, envId, roleId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRole(projId, envId, roleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all tenant roles.
         * @summary List Roles
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {boolean} [includeTotalCount] Include total count in response (default to false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRoles(projId, envId, page, perPage, includeTotalCount, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRoles(projId, envId, page, perPage, includeTotalCount, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint is part of the role hierarchy feature.  Removes `parent_role_id` from the list of parent roles of role with id `role_id`. In other words, `role_id` will no longer be automatically assigned permissions that are granted to `parent_role_id`.  We can say the `role_id` **not longer extends** `parent_role_id` or **no longer inherits** from `parent_role_id`.
         * @summary Remove Parent Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeParentRole(projId, envId, roleId, parentRoleId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeParentRole(projId, envId, roleId, parentRoleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
         * @summary Remove Permissions From Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {RemoveRolePermissions} removeRolePermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePermissionsFromRole(projId, envId, roleId, removeRolePermissions, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePermissionsFromRole(projId, envId, roleId, removeRolePermissions, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partially updates a tenant role. Fields that will be provided will be completely overwritten.
         * @summary Update Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {RoleUpdate} roleUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRole(projId, envId, roleId, roleUpdate, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRole(projId, envId, roleId, roleUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    };
};
/**
 * RolesApi - factory interface
 * @export
 */
export const RolesApiFactory = function (configuration, basePath, axios) {
    const localVarFp = RolesApiFp(configuration);
    return {
        /**
         * This endpoint is part of the role hierarchy feature.  Makes role with id `role_id` extend the role with id `parent_role_id`. In other words, `role_id` will automatically be assigned any permissions that are granted to `parent_role_id`.  We can say the `role_id` **extends** `parent_role_id` or **inherits** from `parent_role_id`.  If `role_id` is already an ancestor of `parent_role_id`, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.
         * @summary Add Parent Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParentRole(projId, envId, roleId, parentRoleId, options) {
            return localVarFp
                .addParentRole(projId, envId, roleId, parentRoleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.
         * @summary Assign Permissions To Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {AddRolePermissions} addRolePermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignPermissionsToRole(projId, envId, roleId, addRolePermissions, options) {
            return localVarFp
                .assignPermissionsToRole(projId, envId, roleId, addRolePermissions, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Creates a new tenant role.
         * @summary Create Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {RoleCreate} roleCreate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole(projId, envId, roleCreate, options) {
            return localVarFp
                .createRole(projId, envId, roleCreate, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Deletes a tenant role and all its related data. This includes any permissions granted to said role.
         * @summary Delete Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole(projId, envId, roleId, options) {
            return localVarFp
                .deleteRole(projId, envId, roleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Gets a single tenant role, if such role exists.
         * @summary Get Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole(projId, envId, roleId, options) {
            return localVarFp
                .getRole(projId, envId, roleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Lists all tenant roles.
         * @summary List Roles
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {number} [page] Page number of the results to fetch, starting at 1.
         * @param {number} [perPage] The number of results per page (max 100).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRoles(projId, envId, page, perPage, options) {
            return localVarFp
                .listRoles(projId, envId, page, perPage, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is part of the role hierarchy feature.  Removes `parent_role_id` from the list of parent roles of role with id `role_id`. In other words, `role_id` will no longer be automatically assigned permissions that are granted to `parent_role_id`.  We can say the `role_id` **not longer extends** `parent_role_id` or **no longer inherits** from `parent_role_id`.
         * @summary Remove Parent Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {string} parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeParentRole(projId, envId, roleId, parentRoleId, options) {
            return localVarFp
                .removeParentRole(projId, envId, roleId, parentRoleId, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
         * @summary Remove Permissions From Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {RemoveRolePermissions} removeRolePermissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePermissionsFromRole(projId, envId, roleId, removeRolePermissions, options) {
            return localVarFp
                .removePermissionsFromRole(projId, envId, roleId, removeRolePermissions, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Partially updates a tenant role. Fields that will be provided will be completely overwritten.
         * @summary Update Role
         * @param {string} projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;).
         * @param {string} envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;).
         * @param {string} roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;).
         * @param {RoleUpdate} roleUpdate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole(projId, envId, roleId, roleUpdate, options) {
            return localVarFp
                .updateRole(projId, envId, roleId, roleUpdate, options)
                .then((request) => request(axios, basePath));
        },
    };
};
/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export class RolesApi extends BaseAPI {
    /**
     * This endpoint is part of the role hierarchy feature.  Makes role with id `role_id` extend the role with id `parent_role_id`. In other words, `role_id` will automatically be assigned any permissions that are granted to `parent_role_id`.  We can say the `role_id` **extends** `parent_role_id` or **inherits** from `parent_role_id`.  If `role_id` is already an ancestor of `parent_role_id`, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.
     * @summary Add Parent Role
     * @param {RolesApiAddParentRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    addParentRole(requestParameters, options) {
        return RolesApiFp(this.configuration)
            .addParentRole(requestParameters.projId, requestParameters.envId, requestParameters.roleId, requestParameters.parentRoleId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Assign permissions to role.  If some of the permissions specified are already assigned, will skip them.
     * @summary Assign Permissions To Role
     * @param {RolesApiAssignPermissionsToRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    assignPermissionsToRole(requestParameters, options) {
        return RolesApiFp(this.configuration)
            .assignPermissionsToRole(requestParameters.projId, requestParameters.envId, requestParameters.roleId, requestParameters.addRolePermissions, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new tenant role.
     * @summary Create Role
     * @param {RolesApiCreateRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    createRole(requestParameters, options) {
        return RolesApiFp(this.configuration)
            .createRole(requestParameters.projId, requestParameters.envId, requestParameters.roleCreate, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a tenant role and all its related data. This includes any permissions granted to said role.
     * @summary Delete Role
     * @param {RolesApiDeleteRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    deleteRole(requestParameters, options) {
        return RolesApiFp(this.configuration)
            .deleteRole(requestParameters.projId, requestParameters.envId, requestParameters.roleId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets a single tenant role, if such role exists.
     * @summary Get Role
     * @param {RolesApiGetRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    getRole(requestParameters, options) {
        return RolesApiFp(this.configuration)
            .getRole(requestParameters.projId, requestParameters.envId, requestParameters.roleId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Lists all tenant roles.
     * @summary List Roles
     * @param {RolesApiListRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    listRoles(requestParameters, options) {
        return RolesApiFp(this.configuration)
            .listRoles(requestParameters.projId, requestParameters.envId, requestParameters.page, requestParameters.perPage, requestParameters.includeTotalCount, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint is part of the role hierarchy feature.  Removes `parent_role_id` from the list of parent roles of role with id `role_id`. In other words, `role_id` will no longer be automatically assigned permissions that are granted to `parent_role_id`.  We can say the `role_id` **not longer extends** `parent_role_id` or **no longer inherits** from `parent_role_id`.
     * @summary Remove Parent Role
     * @param {RolesApiRemoveParentRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    removeParentRole(requestParameters, options) {
        return RolesApiFp(this.configuration)
            .removeParentRole(requestParameters.projId, requestParameters.envId, requestParameters.roleId, requestParameters.parentRoleId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
     * @summary Remove Permissions From Role
     * @param {RolesApiRemovePermissionsFromRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    removePermissionsFromRole(requestParameters, options) {
        return RolesApiFp(this.configuration)
            .removePermissionsFromRole(requestParameters.projId, requestParameters.envId, requestParameters.roleId, requestParameters.removeRolePermissions, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Partially updates a tenant role. Fields that will be provided will be completely overwritten.
     * @summary Update Role
     * @param {RolesApiUpdateRoleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    updateRole(requestParameters, options) {
        return RolesApiFp(this.configuration)
            .updateRole(requestParameters.projId, requestParameters.envId, requestParameters.roleId, requestParameters.roleUpdate, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=data:application/json;base64,