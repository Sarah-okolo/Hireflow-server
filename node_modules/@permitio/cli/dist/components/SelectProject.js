import React, { useEffect, useState } from 'react';
import { Text } from 'ink';
import SelectInput from 'ink-select-input';
import Spinner from 'ink-spinner';
import { useProjectAPI } from '../hooks/useProjectAPI.js';
const SelectProject = ({ accessToken, cookie, onComplete, onError, }) => {
    const [projects, setProjects] = useState([]);
    const [loading, setLoading] = useState(true);
    const { getProjects } = useProjectAPI();
    const handleProjectSelect = (project) => {
        const selectedProject = project;
        onComplete({ label: selectedProject.label, value: selectedProject.value });
    };
    useEffect(() => {
        const fetchProjects = async () => {
            const { data: projects, error } = await getProjects(accessToken, cookie);
            if (error || !projects) {
                onError(`Failed to load projects. Reason: ${error}. Please check your network connection or credentials and try again.`);
                return;
            }
            if (projects.length === 1 && projects[0]) {
                onComplete({ label: projects[0].name, value: projects[0].id });
            }
            setProjects(projects.map(project => ({ label: project.name, value: project.id })));
            setLoading(false);
        };
        fetchProjects();
        setLoading(false);
    }, [accessToken, cookie, getProjects, onComplete, onError]);
    return loading ? (React.createElement(Text, null,
        React.createElement(Spinner, { type: "dots" }),
        " Loading Projects...")) : (React.createElement(React.Fragment, null,
        React.createElement(Text, null, "Select a project"),
        React.createElement(SelectInput, { items: projects, onSelect: handleProjectSelect })));
};
export default SelectProject;
