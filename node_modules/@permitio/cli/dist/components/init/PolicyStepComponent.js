import React, { useEffect, useState } from 'react';
import SelectInput from 'ink-select-input';
import { Box, Text } from 'ink';
import Spinner from 'ink-spinner';
import SimplePolicyCreation from '../policy/CreateSimpleWizard.js';
import TemplatePolicyCreation from '../env/template/ApplyComponent.js';
export default function PolicyStepComponent({ onComplete, onError }) {
    const [step, setStep] = useState('initial');
    const [error, setError] = useState(null);
    const [action, setAction] = useState(null);
    const [resource, setResource] = useState(null);
    useEffect(() => {
        if (error) {
            onError(error);
        }
    }, [error, onError]);
    useEffect(() => {
        if (step === 'done') {
            onComplete(action || '', resource || '');
        }
    }, [step, onComplete, action, resource]);
    if (step === 'initial') {
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, null, "Policy Setup: "),
            React.createElement(SelectInput, { items: [
                    { label: 'Create a simple policy', value: 'simple' },
                    { label: 'Use a template', value: 'template' },
                ], onSelect: item => {
                    if (item.value === 'simple') {
                        setStep('simple');
                    }
                    else {
                        setStep('template');
                    }
                } })));
    }
    if (step === 'simple') {
        return (React.createElement(SimplePolicyCreation, { onComplete: (resource, action) => {
                setResource(resource);
                setAction(action);
                setStep('done');
            }, onError: error => {
                setError(error);
                setStep('error');
            } }));
    }
    if (step === 'template') {
        return (React.createElement(TemplatePolicyCreation, { onComplete: (resource, action) => {
                setResource(resource);
                setAction(action);
                setStep('done');
            }, onError: error => {
                setError(error);
                setStep('error');
            } }));
    }
    if (step === 'processing') {
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, null,
                React.createElement(Spinner, { type: "dots" }),
                " Processing...")));
    }
    return null;
}
