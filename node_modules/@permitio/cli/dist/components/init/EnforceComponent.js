import React, { useEffect, useState } from 'react';
import SelectInput from 'ink-select-input';
import { Text, Box } from 'ink';
import Spinner from 'ink-spinner';
import PDPRunComponent from '../pdp/PDPRunComponent.js';
export default function EnforceComponent({ onComplete, onError }) {
    const [error, setError] = useState(null);
    const [step, setStep] = useState('initial');
    useEffect(() => {
        if (error) {
            onError(error);
        }
        if (step === 'done') {
            onComplete();
        }
    }, [error, onError, step, onComplete]);
    if (step === 'initial') {
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, null, "Enforce: "),
            React.createElement(SelectInput, { items: [
                    {
                        label: 'Run PDP ',
                        value: 'run',
                    },
                    {
                        label: 'Show PDP command',
                        value: 'show',
                    },
                ], onSelect: item => {
                    if (item.value === 'run') {
                        setStep('run');
                    }
                    else if (item.value === 'show') {
                        setStep('show');
                    }
                } })));
    }
    if (step === 'run') {
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, null, "Running PDP..."),
            React.createElement(PDPRunComponent, { skipWaitScreen: false, onComplete: () => {
                    setStep('done');
                }, onError: error => {
                    setError(error);
                    setStep('error');
                } })));
    }
    if (step === 'show') {
        return (React.createElement(Box, { flexDirection: 'column' },
            React.createElement(PDPRunComponent, { dryRun: true, onComplete: () => {
                    setStep('done');
                }, skipWaitScreen: false, onError: error => {
                    setError(error);
                    setStep('error');
                } })));
    }
    if (step === 'processing') {
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, null,
                React.createElement(Spinner, { type: "dots" }),
                "Processing...")));
    }
    return null;
}
