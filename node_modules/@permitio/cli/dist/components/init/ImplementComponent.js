import React, { useState, useEffect } from 'react';
import { Box, Text } from 'ink';
import SelectInput from 'ink-select-input';
import { getFormatedFile, installationCommand, } from '../../utils/init/utils.js';
import { useAuth } from '../AuthProvider.js';
import Spinner from 'ink-spinner';
const getLanguageKey = (filename) => {
    if (filename.endsWith('.js'))
        return 'node';
    if (filename.endsWith('.py'))
        return 'python';
    if (filename.endsWith('.rb'))
        return 'ruby';
    if (filename.endsWith('.java'))
        return 'java';
    if (filename.endsWith('.cs'))
        return 'dotnet';
    if (filename.endsWith('.go'))
        return 'go';
    return 'node'; // Default
};
export default function ImplementComponent({ action, resource, user, apiKey, onComplete, onError, }) {
    const { authToken } = useAuth();
    const [language, setLanguage] = useState('example.js');
    const [error, setError] = useState(null);
    const [step, setStep] = useState('initial');
    const [implementCode, setImplementCode] = useState(null);
    useEffect(() => {
        if (step === 'processing') {
            try {
                const fileName = language;
                const token = apiKey || authToken;
                if (!token) {
                    throw new Error('No API key or auth token available');
                }
                const content = getFormatedFile(fileName, token, action, resource, user?.userId || 'user123', user?.email, user?.firstName, user?.lastName);
                setImplementCode(content);
                setStep('done');
            }
            catch (err) {
                const errorMessage = err instanceof Error ? err.message : String(err);
                setError(errorMessage);
                setStep('error');
                onError(errorMessage);
            }
        }
    }, [step, language, apiKey, authToken, action, resource, user, onError]);
    if (step === 'initial') {
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, null, "Implementation Example "),
            React.createElement(Text, null, "Select a Language"),
            React.createElement(SelectInput, { items: [
                    {
                        label: 'Node.js',
                        value: 'example.js',
                    },
                    {
                        label: 'Python',
                        value: 'example.py',
                    },
                    {
                        label: 'Java',
                        value: 'Example.java',
                    },
                    {
                        label: 'Go',
                        value: 'example.go',
                    },
                    {
                        label: 'Ruby',
                        value: 'example.rb',
                    },
                    {
                        label: '.NET (C#)',
                        value: 'Example.cs',
                    },
                ], onSelect: item => {
                    setLanguage(item.value);
                    setStep('processing');
                } })));
    }
    if (step === 'processing') {
        return (React.createElement(Box, null,
            React.createElement(Text, null,
                React.createElement(Spinner, { type: "dots" }),
                " Loading code sample...")));
    }
    if (step === 'done' && implementCode) {
        const langKey = getLanguageKey(language);
        const installCmd = installationCommand[langKey] || '';
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, { bold: true },
                "Implementation Example (",
                language,
                "):"),
            React.createElement(Box, { marginY: 1 },
                React.createElement(Text, { bold: true, color: "yellow" }, "Installation:"),
                React.createElement(Box, { borderStyle: "round", padding: 1 },
                    React.createElement(Text, null, installCmd))),
            React.createElement(Box, { marginY: 1 },
                React.createElement(Text, { bold: true, color: "yellow" }, "Code Sample:"),
                React.createElement(Box, { borderStyle: "round", padding: 1, flexDirection: 'column', width: 80 },
                    React.createElement(Text, { wrap: "wrap" }, implementCode))),
            React.createElement(Box, { marginTop: 1 },
                React.createElement(SelectInput, { items: [{ label: 'Complete Setup', value: 'complete' }], onSelect: () => {
                        onComplete();
                    } }))));
    }
    if (step === 'error') {
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, { color: "red" },
                "Error: ",
                error)));
    }
    // Fallback
    return null;
}
