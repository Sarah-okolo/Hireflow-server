import React, { useEffect, useState } from 'react';
import { Box, Text } from 'ink';
import Spinner from 'ink-spinner';
import PolicyStepComponent from './PolicyStepComponent.js';
import DataSetupComponent from './DataSetupComponent.js';
import EnforceComponent from './EnforceComponent.js';
import ImplementComponent from './ImplementComponent.js';
export default function InitWizardComponent({ options }) {
    const [overallStep, setOverallStep] = useState('policy');
    const [error, setError] = useState(null);
    const [action, setAction] = useState('');
    const [resource, setResource] = useState('');
    const [user, setUser] = useState({ userId: '' });
    useEffect(() => {
        if (overallStep === 'error') {
            setTimeout(() => {
                process.exit(1);
            }, 500);
        }
        if (overallStep === 'done') {
            setTimeout(() => {
                process.exit(0);
            }, 500);
        }
    }, [overallStep]);
    if (overallStep === 'policy') {
        return (React.createElement(Box, { flexDirection: 'column' },
            React.createElement(PolicyStepComponent, { onComplete: (action, resource) => {
                    setAction(action);
                    setResource(resource);
                    setOverallStep('dataSetup');
                }, onError: error => {
                    setError(error);
                    setOverallStep('error');
                } })));
    }
    if (overallStep === 'dataSetup') {
        return (React.createElement(Box, { flexDirection: 'column' },
            React.createElement(DataSetupComponent, { apiKey: options.apiKey, onComplete: user => {
                    setUser(user);
                    setOverallStep('enforce');
                }, onError: error => {
                    setError(error);
                    setOverallStep('error');
                } })));
    }
    if (overallStep === 'enforce') {
        return (React.createElement(Box, { flexDirection: 'column', marginY: 1 },
            React.createElement(EnforceComponent, { onComplete: () => {
                    setOverallStep('implement');
                }, onError: error => {
                    setError(error);
                    setOverallStep('error');
                } })));
    }
    if (overallStep === 'implement') {
        return (React.createElement(Box, { flexDirection: 'column' },
            React.createElement(ImplementComponent, { action: action, resource: resource, user: user, apiKey: options.apiKey, onComplete: () => {
                    setOverallStep('done');
                }, onError: error => {
                    setError(error);
                    setOverallStep('error');
                } })));
    }
    if (overallStep === 'processing') {
        return (React.createElement(Box, { flexDirection: 'column' },
            React.createElement(Text, null,
                "Processing... ",
                React.createElement(Spinner, { type: "dots" }))));
    }
    if (overallStep === 'error') {
        return (React.createElement(Box, { flexDirection: 'column' },
            React.createElement(Text, { color: "red" },
                "Error: ",
                error)));
    }
    if (overallStep === 'done') {
        return (React.createElement(Box, { flexDirection: 'column' },
            React.createElement(Text, null, "Setup Completed!")));
    }
    return null;
}
