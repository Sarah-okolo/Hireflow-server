import React, { useEffect, useState, useCallback } from 'react';
import { Box, Text } from 'ink';
import SelectInput from 'ink-select-input';
import Spinner from 'ink-spinner';
import TextInput from 'ink-text-input';
import APISyncUserComponent from '../api/sync/APISyncUserComponent.js';
import GeneratedUsersComponent from './GenerateUsersComponent.js';
export default function DataSetupComponent({ apiKey, onComplete, onError, }) {
    const [step, setStep] = useState('initial');
    const [error, setError] = useState(null);
    const [user, setUser] = useState(null);
    const [userCount, setUserCount] = useState(0);
    const [count, setCount] = useState('');
    const [currIndex, setCurrIndex] = useState(0);
    // Add a key to force component remount
    const [componentKey, setComponentKey] = useState(0);
    const [users, setUsers] = useState([]);
    // Track created users with more details for summary
    const [createdUsers, setCreatedUsers] = useState([]);
    const handleGenerateComplete = useCallback((currentUser) => {
        setUsers(prev => [...prev, ...currentUser.users]);
        setUser(currentUser);
        setStep('done');
    }, []);
    const handleError = useCallback((errorMsg) => {
        setError(errorMsg);
        setStep('error');
    }, []);
    const handleManualComplete = useCallback((currentUser) => {
        // Add user to our collections
        setUsers(prev => [...prev, currentUser.userId]);
        setCreatedUsers(prev => [...prev, currentUser]);
        // Save first user data for completion callback
        if (currIndex === 0) {
            setUser(currentUser);
        }
        // Check if we've created all users
        if (currIndex + 1 >= userCount) {
            // Show summary when all users are created
            setStep('userSummary');
        }
        else {
            // Increment the index for the next user
            setCurrIndex(prev => prev + 1);
            // Force component remount with a new key
            setComponentKey(prev => prev + 1);
        }
    }, [currIndex, userCount]);
    // Handle completion and error states
    useEffect(() => {
        if (error) {
            onError(error);
        }
        if (step === 'done' && user) {
            onComplete({
                userId: user.userId,
                firstName: user.firstName,
                lastName: user.lastName,
                email: user.email,
                users: users,
            });
        }
    }, [error, onError, step, onComplete, user, users]);
    if (step === 'initial') {
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, null, "Data Setup: "),
            React.createElement(SelectInput, { items: [
                    {
                        label: 'Interactively create users',
                        value: 'Manual',
                    },
                    {
                        label: 'Generate users',
                        value: 'Generate',
                    },
                ], onSelect: item => {
                    if (item.value === 'Manual') {
                        setStep('askCount');
                    }
                    else {
                        setStep('Generate');
                    }
                } })));
    }
    if (step === 'askCount') {
        return (React.createElement(Box, { flexDirection: 'column' },
            React.createElement(Text, null, "How many users do you want to create: "),
            React.createElement(Box, { marginY: 1 },
                React.createElement(TextInput, { value: count, onChange: setCount, onSubmit: () => {
                        const parsedCount = parseInt(count);
                        if (isNaN(parsedCount) || parsedCount <= 0) {
                            setError('Invalid user count');
                            setCount('0');
                            setStep('error');
                        }
                        else {
                            setCurrIndex(0);
                            setUserCount(parsedCount);
                            setCreatedUsers([]); // Reset created users
                            setComponentKey(0); // Reset component key
                            setStep('Manual');
                        }
                    } }))));
    }
    if (step === 'Manual') {
        return (React.createElement(Box, { flexDirection: 'column' },
            React.createElement(Text, null,
                "Creating User ",
                currIndex + 1,
                " of ",
                userCount,
                ":",
                ' '),
            React.createElement(APISyncUserComponent, { key: `user-${componentKey}`, options: { apiKey: apiKey }, onComplete: handleManualComplete, onError: handleError })));
    }
    if (step === 'userSummary') {
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, { color: "green" },
                "Successfully created ",
                createdUsers.length,
                " users:"),
            React.createElement(Box, { flexDirection: "column", marginY: 1 }, createdUsers.map((user, idx) => (React.createElement(Box, { key: idx, marginLeft: 1 },
                React.createElement(Text, null,
                    idx + 1,
                    ". ",
                    React.createElement(Text, { bold: true }, user.userId),
                    user.firstName || user.lastName
                        ? ` (${[user.firstName, user.lastName].filter(Boolean).join(' ')})`
                        : '',
                    user.roles && user.roles.length > 0
                        ? ` - Role: ${user.roles.join(', ')}`
                        : ''))))),
            React.createElement(Box, { marginTop: 1 },
                React.createElement(SelectInput, { items: [
                        {
                            label: 'Continue',
                            value: 'continue',
                        },
                    ], onSelect: () => setStep('done') }))));
    }
    if (step === 'Generate') {
        return (React.createElement(Box, { flexDirection: 'column' },
            React.createElement(GeneratedUsersComponent, { onComplete: handleGenerateComplete, onError: handleError })));
    }
    if (step === 'processing') {
        return (React.createElement(Text, null,
            "Processing... ",
            React.createElement(Spinner, { type: "dots" })));
    }
    if (step === 'error') {
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, { color: "red" },
                "Error: ",
                error)));
    }
    return null;
}
