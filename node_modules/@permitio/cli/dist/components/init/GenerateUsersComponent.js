import React, { useEffect, useRef, useMemo, useState } from 'react';
import { useGeneratePolicySnapshot } from '../test/hooks/usePolicySnapshot.js';
import { Text, Box } from 'ink';
import Spinner from 'ink-spinner';
import SelectInput from 'ink-select-input';
export default function GeneratedUsersComponent({ onComplete, onError, }) {
    const hasCompletedRef = useRef(false);
    const [showContinue, setShowContinue] = useState(false);
    const snapshotOptions = useMemo(() => ({
        dryRun: false,
        models: ['RBAC'],
        isTestTenant: false,
    }), []);
    const { state, error, createdUsers, tenantId } = useGeneratePolicySnapshot(snapshotOptions);
    // Handle errors
    useEffect(() => {
        if (error && !hasCompletedRef.current) {
            hasCompletedRef.current = true; // Mark as completed to prevent multiple calls
            onError(error);
        }
    }, [error, onError]);
    // When users are generated, show the continue option
    useEffect(() => {
        if (state === 'done' && createdUsers && createdUsers.length > 0) {
            setShowContinue(true);
        }
    }, [state, createdUsers]);
    // Handle user selection and completion
    const handleContinue = () => {
        if (!hasCompletedRef.current &&
            createdUsers &&
            createdUsers.length > 0 &&
            createdUsers[0]) {
            hasCompletedRef.current = true;
            const user = createdUsers[0];
            onComplete({
                userId: user.key || 'default-user',
                firstName: user.firstName || undefined,
                lastName: user.lastName || undefined,
                email: user.email || undefined,
                users: createdUsers.map(user => user.key),
            });
        }
    };
    // Generate formatted user list for display
    const formatUserInfo = (user) => {
        const name = [user.firstName, user.lastName].filter(Boolean).join(' ');
        return `${user.key}${name ? ` (${name})` : ''}${user.email ? ` - ${user.email}` : ''}`;
    };
    if (state !== 'done') {
        return (React.createElement(Box, null,
            React.createElement(Text, null,
                "Generating users... ",
                React.createElement(Spinner, { type: "dots" }))));
    }
    // Layout for users generated
    return (React.createElement(Box, { flexDirection: "column" },
        React.createElement(Text, null,
            "Generated ",
            createdUsers?.length || 0,
            " users in Tenant ",
            tenantId,
            ":"),
        React.createElement(Box, { flexDirection: "column", marginTop: 1, marginBottom: 1 }, createdUsers && createdUsers.length > 0 ? (createdUsers.map((user, i) => (React.createElement(Text, { key: i },
            i + 1,
            ". ",
            formatUserInfo(user),
            " ",
            i === 0 ? '(primary)' : '')))) : (React.createElement(Text, null, "No users generated"))),
        showContinue && (React.createElement(Box, { flexDirection: "column", marginTop: 1 },
            React.createElement(Text, null, "Press Enter to continue "),
            React.createElement(SelectInput, { items: [
                    {
                        label: 'Continue',
                        value: 'continue',
                    },
                ], onSelect: () => handleContinue() })))));
}
