import React, { useEffect, useState } from 'react';
import { Text } from 'ink';
import SelectInput from 'ink-select-input';
import Spinner from 'ink-spinner';
import { useEnvironmentApi } from '../hooks/useEnvironmentApi.js';
const SelectEnvironment = ({ accessToken, cookie, onComplete, activeProject, onError, }) => {
    const [environments, setEnvironments] = useState([]);
    const [state, setState] = useState(true);
    const { getEnvironments } = useEnvironmentApi();
    const handleEnvironmentSelect = (environment) => {
        const selectedEnv = environment;
        onComplete({ label: selectedEnv.label, value: selectedEnv.value });
    };
    useEffect(() => {
        const fetchEnvironments = async () => {
            const { data: environments, error } = await getEnvironments(activeProject.value, accessToken, cookie);
            if (error || !environments) {
                onError(`Failed to load environments for project "${activeProject.label}". Reason: ${error}. Please check your network connection or credentials and try again.`);
                return;
            }
            if (environments.length === 1 && environments[0]) {
                onComplete({ label: environments[0].name, value: environments[0].id });
            }
            setEnvironments(environments.map(env => ({ label: env.name, value: env.id })));
        };
        fetchEnvironments();
        setState(false);
    }, [
        accessToken,
        activeProject.label,
        activeProject.value,
        cookie,
        getEnvironments,
        onComplete,
        onError,
    ]);
    return (React.createElement(React.Fragment, null,
        state && (React.createElement(Text, null,
            React.createElement(Spinner, { type: "dots" }),
            " Loading Environments...")),
        !state && (React.createElement(React.Fragment, null,
            React.createElement(Text, null, "Select an environment"),
            React.createElement(SelectInput, { items: environments, onSelect: handleEnvironmentSelect })))));
};
export default SelectEnvironment;
