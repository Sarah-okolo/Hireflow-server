import React, { useCallback, useEffect, useState } from 'react';
import { Text } from 'ink';
import { TextInput } from '@inkjs/ui';
import { useEnvironmentApi, } from '../../hooks/useEnvironmentApi.js';
import EnvironmentSelection from '../../components/EnvironmentSelection.js';
import { cleanKey } from '../../lib/env/copy/utils.js';
import { useAuth } from '../AuthProvider.js';
export default function CopyComponent({ from, to: envToId, name, description, conflictStrategy, }) {
    const [error, setError] = React.useState(null);
    const [authToken, setAuthToken] = React.useState(null);
    const [state, setState] = useState('loading');
    const [projectFrom, setProjectFrom] = useState(null);
    const [envToName, setEnvToName] = useState(name);
    const [envFrom, setEnvFrom] = useState(from);
    // Initialize with provided description - crucial to differentiate between undefined and empty string
    const [envToDescription, setEnvToDescription] = useState(description);
    const { copyEnvironment } = useEnvironmentApi();
    const auth = useAuth();
    useEffect(() => {
        if (auth.error) {
            setError(auth.error);
            return;
        }
        if (!auth.loading) {
            setProjectFrom(auth.scope.project_id);
            setAuthToken(auth.authToken);
        }
    }, [auth]);
    useEffect(() => {
        if (error || state === 'done') {
            process.exit(1);
        }
    }, [error, state]);
    useEffect(() => {
        const handleEnvCopy = async (envCopyBody) => {
            let body = {};
            if (envCopyBody.existingEnvId) {
                body = {
                    target_env: { existing: envCopyBody.existingEnvId },
                };
            }
            else if (envCopyBody.newEnvKey && envCopyBody.newEnvName) {
                body = {
                    target_env: {
                        new: {
                            key: cleanKey(envCopyBody.newEnvKey),
                            name: envCopyBody.newEnvName,
                            description: envCopyBody.newEnvDescription ?? '',
                        },
                    },
                };
            }
            if (conflictStrategy) {
                body = {
                    ...body,
                    conflict_strategy: envCopyBody.conflictStrategy ?? 'fail',
                };
            }
            const { error } = await copyEnvironment(projectFrom ?? '', envFrom ?? '', body);
            if (error) {
                setError(`Error while copying Environment: ${error}`);
                return;
            }
            setState('done');
        };
        if (((envToName && conflictStrategy) || envToId) &&
            envFrom &&
            projectFrom &&
            authToken &&
            (envToDescription !== undefined || envToId)) {
            setState('copying');
            handleEnvCopy({
                newEnvKey: envToName,
                newEnvName: envToName,
                newEnvDescription: envToDescription ?? '',
                existingEnvId: envToId,
                conflictStrategy: conflictStrategy,
            });
        }
    }, [
        authToken,
        conflictStrategy,
        copyEnvironment,
        envFrom,
        envToDescription,
        envToId,
        envToName,
        projectFrom,
    ]);
    const handleEnvFromSelection = useCallback((_organisation_id, _project_id, environment_id) => {
        setEnvFrom(environment_id.value);
    }, []);
    useEffect(() => {
        if (!envFrom) {
            setState('selecting-env');
        }
        else if (!envToName && !envToId) {
            setState('selecting-name');
        }
        else if (envToDescription === undefined && !envToId) {
            setState('selecting-description');
        }
        else if (envToName && envFrom) {
            // If we have name and source env, and description is defined (even if empty), proceed
            setState('copying');
        }
    }, [envFrom, envToDescription, envToId, envToName]);
    return (React.createElement(React.Fragment, null,
        state === 'selecting-env' && authToken && (React.createElement(React.Fragment, null,
            React.createElement(Text, null, "Select an existing Environment to copy from."),
            React.createElement(EnvironmentSelection, { accessToken: authToken, cookie: '', onComplete: handleEnvFromSelection, onError: setError }))),
        authToken && state === 'selecting-name' && (React.createElement(React.Fragment, null,
            React.createElement(Text, null, "Input the new Environment name to copy to."),
            React.createElement(TextInput, { onSubmit: name => {
                    setEnvToName(name);
                }, placeholder: 'Enter name here...' }))),
        authToken && state === 'selecting-description' && (React.createElement(React.Fragment, null,
            React.createElement(Text, null, "Input the new Environment Description (press Enter to skip)."),
            React.createElement(TextInput, { onSubmit: description => {
                    setEnvToDescription(description);
                    setState('copying');
                }, placeholder: 'Enter description here (optional)...' }))),
        state === 'done' && React.createElement(Text, null, "Environment copied successfully"),
        error && React.createElement(Text, null, error)));
}
