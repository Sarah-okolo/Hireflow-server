import React, { useEffect, useState } from 'react';
import { Text } from 'ink';
import Spinner from 'ink-spinner';
import { saveAuthToken } from '../../lib/auth.js';
import EnvironmentSelection from '../../components/EnvironmentSelection.js';
import { useAuth } from '../AuthProvider.js';
export default function SelectComponent({ key }) {
    const [error, setError] = React.useState(null);
    // const [authToken, setAuthToken] = React.useState<string | undefined>(apiKey);
    const [state, setState] = useState('loading');
    const [environment, setEnvironment] = useState(null);
    const [authToken, setAuthToken] = useState(key);
    const auth = useAuth();
    useEffect(() => {
        if (error || (state === 'done' && environment)) {
            process.exit(1);
        }
    }, [error, state, environment]);
    useEffect(() => {
        if (auth.authToken) {
            setAuthToken(auth.authToken);
            setState('selecting');
        }
    }, [auth.authToken]);
    const onEnvironmentSelectSuccess = async (_organisation, _project, environment, secret) => {
        try {
            await saveAuthToken(secret);
        }
        catch (error) {
            setError(error);
        }
        setEnvironment(environment.label);
        setState('done');
    };
    return (React.createElement(React.Fragment, null,
        state === 'loading' && (React.createElement(Text, null,
            React.createElement(Spinner, { type: 'dots' }),
            "Loading your environment")),
        authToken && state === 'selecting' && (React.createElement(EnvironmentSelection, { accessToken: authToken, onComplete: onEnvironmentSelectSuccess, onError: setError })),
        state === 'done' && environment && (React.createElement(Text, null,
            "Environment: ",
            environment,
            " selected successfully")),
        error && React.createElement(Text, null, error)));
}
