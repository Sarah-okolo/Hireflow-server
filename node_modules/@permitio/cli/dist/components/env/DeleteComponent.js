import React, { useCallback, useEffect, useState } from 'react';
import { Box, Text } from 'ink';
import Spinner from 'ink-spinner';
import SelectInputComponent from 'ink-select-input';
import TextInput from 'ink-text-input';
import { useAuth } from '../AuthProvider.js';
import { useEnvironmentApi } from '../../hooks/useEnvironmentApi.js';
export default function DeleteComponent({ environmentId, force = false, }) {
    const { scope } = useAuth();
    const { getEnvironments, getEnvironment, deleteEnvironment } = useEnvironmentApi();
    const [step, setState] = useState(environmentId
        ? force
            ? 'deleting'
            : 'confirmation'
        : 'loading_environments');
    const [environments, setEnvironments] = useState([]);
    const [error, setError] = useState(null);
    const [selectedEnvironment, setSelectedEnvironment] = useState(null);
    const [confirmation, setConfirmation] = useState('');
    // Load environments or specific environment
    useEffect(() => {
        const fetchEnvironment = async () => {
            try {
                if (environmentId) {
                    // Get specific environment
                    const result = await getEnvironment(scope.project_id || '', environmentId, undefined, null);
                    if (result.error) {
                        setError(`Failed to fetch environment: ${result.error}`);
                        setState('error');
                        return;
                    }
                    setSelectedEnvironment(result.data);
                    if (force) {
                        setState('deleting');
                    }
                    else {
                        setState('confirmation');
                    }
                }
                else {
                    // Get all environments
                    const result = await getEnvironments(scope.project_id || '', undefined, null);
                    if (result.error) {
                        setError(`Failed to fetch environments: ${result.error}`);
                        setState('error');
                        return;
                    }
                    const environmentsData = result.data || [];
                    if (environmentsData.length === 0) {
                        setError('No environments found in the selected project.');
                        setState('error');
                        return;
                    }
                    setEnvironments(environmentsData);
                    setState('environment_select');
                }
            }
            catch (err) {
                setError(`Error: ${err instanceof Error ? err.message : String(err)}`);
                setState('error');
            }
        };
        if (step === 'loading_environments') {
            fetchEnvironment();
        }
    }, [
        environmentId,
        force,
        getEnvironment,
        getEnvironments,
        step,
        scope.project_id,
    ]);
    // Environment selection handler
    const handleEnvironmentSelect = useCallback((item) => {
        const environment = environments.find(e => e.id === item.value);
        if (environment) {
            setSelectedEnvironment(environment);
            if (force) {
                setState('deleting');
            }
            else {
                setState('confirmation');
            }
        }
    }, [environments, force]);
    // Handle confirmation submission
    const handleConfirmationSubmit = useCallback((value) => {
        if (value.toLowerCase() === 'delete') {
            setState('deleting');
        }
        else {
            setError('Deletion cancelled. Type "delete" to confirm.');
            setState('error');
        }
    }, []);
    // Delete the environment
    useEffect(() => {
        const remove = async () => {
            if (!selectedEnvironment) {
                setError('No environment selected');
                setState('error');
                return;
            }
            try {
                const result = await deleteEnvironment(scope.project_id || '', selectedEnvironment.id, undefined, null);
                if (!result.error) {
                    setState('done');
                    setTimeout(() => process.exit(0), 500);
                }
                else {
                    setError(`Failed to delete environment: ${result.error}`);
                    setState('error');
                }
            }
            catch (err) {
                setError(`Error: ${err instanceof Error ? err.message : String(err)}`);
                setState('error');
            }
        };
        if (step === 'deleting') {
            remove();
        }
    }, [deleteEnvironment, selectedEnvironment, step, scope.project_id]);
    if (step === 'loading_environments') {
        return (React.createElement(Box, null,
            React.createElement(Text, null,
                React.createElement(Spinner, { type: "dots" }),
                " Loading environments...")));
    }
    if (step === 'environment_select' && Array.isArray(environments)) {
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, null, "Select an environment to delete:"),
            React.createElement(SelectInputComponent, { items: environments.map(env => ({
                    label: `${env.name} (${env.key})`,
                    value: env.id,
                })), onSelect: handleEnvironmentSelect })));
    }
    if (step === 'confirmation') {
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, { color: "red" }, "Warning: You are about to delete environment:"),
            React.createElement(Text, { color: "red" },
                selectedEnvironment?.name,
                " (",
                selectedEnvironment?.key,
                ")"),
            React.createElement(Text, null,
                "This action cannot be undone. Type ",
                '"delete"',
                " to confirm:"),
            React.createElement(TextInput, { value: confirmation, onChange: setConfirmation, onSubmit: handleConfirmationSubmit })));
    }
    if (step === 'deleting') {
        return (React.createElement(Box, null,
            React.createElement(Text, null,
                React.createElement(Spinner, { type: "dots" }),
                " Deleting environment...")));
    }
    if (step === 'done') {
        return (React.createElement(Box, null,
            React.createElement(Text, null, "\u2705 Environment successfully deleted!")));
    }
    // Error state
    if (step === 'error') {
        // Exit after a short delay on error
        setTimeout(() => {
            process.exit(1);
        }, 500);
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, { color: "red" },
                "Error: ",
                error)));
    }
    return null;
}
