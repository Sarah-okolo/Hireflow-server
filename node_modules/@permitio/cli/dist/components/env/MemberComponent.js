import React, { useCallback, useEffect, useState } from 'react';
import { Text } from 'ink';
import Spinner from 'ink-spinner';
import { TextInput } from '@inkjs/ui';
import SelectInput from 'ink-select-input';
import { useMemberApi } from '../../hooks/useMemberApi.js';
import EnvironmentSelection from '../../components/EnvironmentSelection.js';
import { useAuth } from '../AuthProvider.js';
const rolesOptions = [
    { label: 'Owner', value: 'admin' },
    { label: 'Editor', value: 'write' },
    {
        label: 'Viewer',
        value: 'read',
    },
];
export default function MemberComponent({ environment, project, email: emailP, role: roleP, inviter_email, inviter_name, }) {
    const [error, setError] = React.useState(null);
    const [state, setState] = useState('loading');
    const [keyScope, setKeyScope] = useState({
        environment_id: environment,
        organization_id: '',
        project_id: project,
    });
    const [email, setEmail] = useState(emailP);
    const [role, setRole] = useState(roleP);
    const [inviterName, setInviterName] = useState(inviter_name);
    const [inviterEmail, setInviterEmail] = useState(inviter_email);
    const [apiKey, setApiKey] = useState(null);
    const { inviteNewMember } = useMemberApi();
    const auth = useAuth();
    useEffect(() => {
        if (error || state === 'done') {
            process.exit(1);
        }
    }, [error, state]);
    useEffect(() => {
        if (auth.error) {
            setError(auth.error);
        }
        if (!auth.loading) {
            setApiKey(auth.authToken);
            if (auth.scope && environment) {
                if (!auth.scope.project_id && !project) {
                    setError('Please pass the project key, or use a project level Api Key');
                }
                setKeyScope(prev => ({
                    ...prev,
                    organization_id: auth.scope.organization_id,
                    project_id: auth.scope.project_id ?? project,
                }));
            }
        }
    }, [auth, environment, project]);
    const handleMemberInvite = useCallback(async (memberInvite) => {
        const requestBody = {
            email: memberInvite.memberEmail,
            permissions: [
                {
                    ...keyScope,
                    object_type: 'env',
                    access_level: memberInvite.memberRole,
                },
            ],
        };
        const { error } = await inviteNewMember(requestBody, inviter_name ?? '', inviter_email ?? '');
        if (error) {
            setError(error.toString());
            return;
        }
        setState('done');
    }, [inviteNewMember, inviter_email, inviter_name, keyScope]);
    const onEnvironmentSelectSuccess = useCallback((organisation, project, environment) => {
        if (keyScope && keyScope.environment_id !== environment.value) {
            setKeyScope({
                organization_id: organisation.value,
                project_id: project.value,
                environment_id: environment.value,
            });
        }
    }, [keyScope]);
    useEffect(() => {
        if (!apiKey)
            return;
        if (!environment && !keyScope?.environment_id) {
            setState('selecting');
        }
        else if (!email) {
            setState('input-email');
        }
        else if (!role) {
            setState('input-role');
        }
        else if (!inviterName) {
            setState('input-inviter-name');
        }
        else if (!inviterEmail) {
            setState('input-inviter-email');
        }
        else if (keyScope && keyScope.environment_id && email && role) {
            setState('inviting');
            handleMemberInvite({
                memberEmail: email,
                memberRole: role,
            });
        }
    }, [
        apiKey,
        email,
        environment,
        handleMemberInvite,
        inviterEmail,
        inviterName,
        keyScope,
        role,
    ]);
    return (React.createElement(React.Fragment, null,
        state === 'loading' && (React.createElement(Text, null,
            React.createElement(Spinner, { type: 'dots' }),
            "Loading your environment")),
        apiKey && state === 'selecting' && (React.createElement(React.Fragment, null,
            React.createElement(Text, null, "Select Environment to add member to"),
            React.createElement(EnvironmentSelection, { accessToken: apiKey, onComplete: onEnvironmentSelectSuccess, onError: setError }))),
        apiKey && state === 'input-email' && (React.createElement(React.Fragment, null,
            React.createElement(Text, null, "User email: "),
            React.createElement(TextInput, { placeholder: "Enter email address for the user to invite", onSubmit: email_input => {
                    setEmail(email_input);
                } }))),
        apiKey && state === 'input-role' && (React.createElement(React.Fragment, null,
            React.createElement(Text, null, "Select a scope"),
            React.createElement(SelectInput, { items: rolesOptions, onSelect: role => {
                    setRole(role.value);
                } }))),
        apiKey && state === 'input-inviter-name' && (React.createElement(React.Fragment, null,
            React.createElement(Text, null, "Your name: "),
            React.createElement(TextInput, { placeholder: "Enter your name", onSubmit: name_input => {
                    setInviterName(name_input);
                } }))),
        apiKey && state === 'input-inviter-email' && (React.createElement(React.Fragment, null,
            React.createElement(Text, null, "Your email: "),
            React.createElement(TextInput, { placeholder: "Enter your email address", onSubmit: email_input => {
                    setInviterEmail(email_input);
                } }))),
        state === 'done' && React.createElement(Text, null, "User Invited Successfully !"),
        error && React.createElement(Text, null, error)));
}
