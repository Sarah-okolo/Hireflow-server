import React from 'react';
import { Box, Newline, Text } from 'ink';
import Spinner from 'ink-spinner';
import { inspect } from 'util';
import { TextInput, Select } from '@inkjs/ui';
import Fuse from 'fuse.js';
import { useAuth } from '../AuthProvider.js';
export default function OPAPolicyComponent({ options }) {
    const [error, setError] = React.useState(null);
    const [res, setRes] = React.useState({
        result: { result: [] },
        status: 0,
    });
    const [selection, setSelection] = React.useState(undefined);
    const [selectionFilter, setSelectionFilter] = React.useState('');
    const auth = useAuth();
    const queryOPA = async (apiKey, path) => {
        const document = path ? `/${path}` : '';
        const response = await fetch(`${options.serverUrl}/v1/policies${document}`, { headers: apiKey ? { Authorization: `Bearer ${apiKey}` } : {} });
        const data = await response.json();
        setRes({ result: data, status: response.status });
    };
    React.useEffect(() => {
        if (auth.error) {
            setError(Error(auth.error));
        }
        if (!auth.loading) {
            const performQuery = async () => {
                await queryOPA(auth.authToken);
            };
            performQuery().catch(err => setError(err));
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [options.apiKey, options.serverUrl, auth]);
    const policyItems = res.result.result.map(i => ({
        label: i.id,
        value: i.id,
    }));
    const fuse = new Fuse(policyItems, {
        keys: ['label', 'id'],
        minMatchCharLength: 0,
    });
    const filtered = fuse.search(selectionFilter).map(i => i.item);
    const view = filtered.length === 0 ? policyItems : filtered;
    const handleSelection = (selectedValue) => {
        const selectedPolicy = res.result.result.find(p => p.id === selectedValue);
        setSelection(selectedPolicy);
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(Text, { color: 'green' },
            "Listing Policies on Opa Server=",
            options.serverUrl),
        res.status === 0 && error === null && React.createElement(Spinner, { type: "dots" }),
        res.status === 200 && (React.createElement(React.Fragment, null,
            !selection && (React.createElement(React.Fragment, null,
                React.createElement(Text, null,
                    "Showing ",
                    view.length,
                    " of ",
                    policyItems.length,
                    " policies:"),
                React.createElement(Box, { flexDirection: "column", gap: 1 },
                    React.createElement(TextInput, { placeholder: "Type text to filter list", onSubmit: (value) => {
                            const selectedPolicy = res.result.result.find(p => p.id === value);
                            setSelection(selectedPolicy);
                        }, onChange: setSelectionFilter, suggestions: policyItems.map(i => i.label) })),
                React.createElement(Box, { padding: 2, flexDirection: "column", gap: 1 },
                    React.createElement(Select, { options: policyItems, onChange: handleSelection })))),
            !!selection && (React.createElement(Box, { flexDirection: "column", gap: 1 },
                React.createElement(Text, null, inspect(selection, {
                    colors: true,
                    depth: null,
                    maxArrayLength: Infinity,
                })))))),
        error && (React.createElement(Box, null,
            React.createElement(Text, { color: "red" },
                "Request failed: ",
                JSON.stringify(error)),
            React.createElement(Newline, null),
            React.createElement(Text, null, inspect(res, {
                colors: true,
                depth: null,
                maxArrayLength: Infinity,
            }))))));
}
