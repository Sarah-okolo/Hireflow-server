import React, { useEffect } from 'react';
import { Newline, Text } from 'ink';
import Spinner from 'ink-spinner';
import { useGeneratePolicySnapshot } from './hooks/usePolicySnapshot.js';
import { CodeSampleComponent } from './code-samples/CodeSampleComponent.js';
export function GeneratePolicySnapshot({ dryRun, models, path, snippet, }) {
    const filePath = snippet && !path ? 'authz-test.json' : path;
    const { state, error, roles, tenantId, finalConfig, dryUsers } = useGeneratePolicySnapshot({ dryRun, models, path: filePath });
    // Handle Error and lifecycle completion.
    useEffect(() => {
        if (error || (state === 'done' && !snippet)) {
            setTimeout(() => {
                process.exit(1);
            }, 1000);
        }
    }, [error, snippet, state]);
    return (React.createElement(React.Fragment, null,
        state === 'roles' && React.createElement(Text, null, "Getting all roles"),
        roles.length > 0 && React.createElement(Text, null,
            "Roles found: ",
            roles.length),
        state === 'rbac-tenant' && React.createElement(Text, null, "Crating a new Tenant"),
        tenantId && React.createElement(Text, null,
            "Created a new test tenant: ",
            tenantId),
        state === 'rbac-generate' && (React.createElement(Text, null,
            "Generating test data for you ",
            React.createElement(Spinner, { type: 'dots3' }),
            ' ')),
        dryRun && React.createElement(Text, null, "Dry run mode!"),
        state === 'done' && filePath && React.createElement(Text, null,
            "Config saved to ",
            filePath),
        state === 'done' && !filePath && (React.createElement(Text, null,
            ' ',
            JSON.stringify(dryRun
                ? { users: dryUsers, config: finalConfig }
                : { config: finalConfig }),
            ' ')),
        state === 'done' && snippet && (React.createElement(React.Fragment, null,
            React.createElement(Newline, null),
            React.createElement(CodeSampleComponent, { framework: snippet, configPath: filePath, pdpUrl: 'http://localhost:7766' }))),
        error && React.createElement(Text, null, error)));
}
