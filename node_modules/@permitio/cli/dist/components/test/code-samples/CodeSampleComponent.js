import React, { useCallback, useEffect, useState } from 'react';
import { useAuth } from '../../AuthProvider.js';
import { Text } from 'ink';
import { generateJestSample, generatePytestSample, generateVitestSample, } from '../../../utils/codeSnippets.js';
import { saveFile } from '../../../utils/fileSaver.js';
import Spinner from 'ink-spinner';
export function CodeSampleComponent({ framework, configPath, path, pdpUrl, }) {
    const [code, setCode] = useState(undefined);
    const [state, setState] = useState('loading');
    const [error, setError] = useState(undefined);
    const auth = useAuth();
    useEffect(() => {
        if (error || state === 'done') {
            process.exit(1);
        }
    }, [error, state]);
    useEffect(() => {
        if (auth.loading)
            return;
        if (framework === 'jest') {
            setCode(generateJestSample(pdpUrl, configPath, auth.authToken));
        }
        else if (framework === 'pytest') {
            setCode(generatePytestSample(pdpUrl, configPath, auth.authToken));
        }
        else if (framework === 'vitest') {
            setCode(generateVitestSample(pdpUrl, configPath, auth.authToken));
        }
        if (!path) {
            setState('done');
        }
    }, [auth, framework, configPath, path, pdpUrl, state]);
    const saveCodeTOPath = useCallback(async () => {
        const { error } = await saveFile(path ?? '', code ?? '');
        if (error) {
            setError(error);
        }
        setState('done');
    }, [code, path]);
    useEffect(() => {
        if (code && path) {
            saveCodeTOPath();
        }
        else if (code) {
            setState('done');
        }
    }, [code, path, saveCodeTOPath]);
    return (React.createElement(React.Fragment, null,
        state === 'loading' && (React.createElement(Text, null,
            "Building ",
            React.createElement(Spinner, null))),
        path && state === 'done' && React.createElement(Text, null,
            "Code Sample saved to ",
            path),
        state === 'done' && !path && React.createElement(Text, null, code),
        error && React.createElement(Text, null, error)));
}
