import React, { useEffect, useState } from 'react';
import { Text, Box } from 'ink';
import Spinner from 'ink-spinner';
import { parseAttributes } from '../../utils/attributes.js';
import { useCheckPdpApi } from '../../hooks/useCheckPdpApi.js';
const PDPCheckUrlComponent = ({ options }) => {
    const [state, setState] = useState({
        loading: true,
        result: null,
        error: null,
    });
    const { getAllowedUrlCheck } = useCheckPdpApi();
    useEffect(() => {
        const checkUrl = async () => {
            try {
                // Parse user attributes if provided
                const userAttributesObj = {};
                if (options.userAttributes && options.userAttributes.length > 0) {
                    for (const attrPair of options.userAttributes) {
                        const parsedAttrs = parseAttributes(attrPair);
                        Object.assign(userAttributesObj, parsedAttrs);
                    }
                }
                // Prepare the request payload
                const payload = {
                    user: {
                        key: options.user,
                        // Always include attributes as a required field
                        attributes: userAttributesObj,
                    },
                    url: options.url,
                    http_method: options.method,
                    tenant: options.tenant,
                    context: {}, // Required empty object
                    sdk: 'permit-cli',
                };
                // Make the API call
                const { data, error } = await getAllowedUrlCheck(payload, options['pdp-url']);
                if (error) {
                    setState({ loading: false, result: null, error });
                    return;
                }
                setState({ loading: false, result: data?.allow ?? false, error: null });
            }
            catch (e) {
                setState({
                    loading: false,
                    result: null,
                    error: e instanceof Error ? e.message : String(e),
                });
            }
        };
        checkUrl();
    }, [options, getAllowedUrlCheck]);
    if (state.loading) {
        return (React.createElement(Text, null,
            React.createElement(Spinner, { type: "dots" }),
            " Checking URL permission..."));
    }
    if (state.error) {
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, { color: "red" }, "Error checking URL permission:"),
            React.createElement(Text, null, state.error)));
    }
    return (React.createElement(Box, { flexDirection: "column" },
        React.createElement(Text, null,
            "URL: ",
            options.url),
        React.createElement(Text, null,
            "Method: ",
            options.method),
        React.createElement(Text, null,
            "User: ",
            options.user),
        React.createElement(Text, null,
            "Tenant: ",
            options.tenant),
        React.createElement(Text, null, state.result === true ? (React.createElement(Text, { color: "green" }, "\u2713 Allowed")) : (React.createElement(Text, { color: "red" }, "\u2717 Denied")))));
};
export default PDPCheckUrlComponent;
