import React, { useCallback, useEffect, useState } from 'react';
import { Text, Box } from 'ink';
import Spinner from 'ink-spinner';
import { exec } from 'node:child_process';
import { promisify } from 'node:util';
import { loadAuthToken } from '../../lib/auth.js';
import { API_PDPS_CONFIG_URL } from '../../config.js';
import { useAuth } from '../AuthProvider.js';
import SelectInput from 'ink-select-input';
const execAsync = promisify(exec);
export default function PDPRunComponent({ opa, dryRun = false, onComplete, onError, skipWaitScreen = true, // Default to showing wait screen
 }) {
    const { authToken } = useAuth();
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [dockerCommand, setDockerCommand] = useState('');
    const [containerInfo, setContainerInfo] = useState(null);
    const [dockerAvailable, setDockerAvailable] = useState(true);
    const [waitDisplay, setWaitDisplay] = useState(!!onComplete && !skipWaitScreen);
    const [operationCompleted, setOperationCompleted] = useState(false);
    // Helper function to handle exit if no callbacks provided
    const exitIfNoCallbacks = useCallback(() => {
        if (!onComplete && !onError) {
            // Add a small delay to ensure React renders the final state
            setTimeout(() => {
                process.exit(0);
            }, 100);
        }
    }, [onComplete, onError]);
    useEffect(() => {
        const generateDockerCommand = async () => {
            try {
                setLoading(true);
                // Use the token from AuthProvider, or load from storage if needed
                const token = authToken || (await loadAuthToken());
                if (!token) {
                    throw new Error('No authentication token available. Please login first with `permit login`');
                }
                // Fetch PDP configuration
                const response = await fetch(API_PDPS_CONFIG_URL, {
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: `Bearer ${token}`,
                    },
                });
                if (!response.ok) {
                    throw new Error(`Failed to fetch PDP configuration: ${response.statusText}`);
                }
                const config = await response.json();
                // Generate the Docker command
                const cmd = `docker run -d -p 7766:7000 ${opa ? `-p ${opa}:8181` : ''} -e PDP_API_KEY=${token} -e PDP_CONTROL_PLANE=${config.controlPlane || 'https://api.permit.io'} permitio/pdp-v2:latest`;
                setDockerCommand(cmd);
                if (!dryRun) {
                    // Check if Docker is installed
                    try {
                        await execAsync('docker --version');
                        setDockerAvailable(true);
                    }
                    catch {
                        // Not using the error value, using underscore to indicate intentionally unused
                        setDockerAvailable(false);
                        throw new Error('Docker is not installed or not in PATH. Please install Docker to run the PDP container.');
                    }
                    // Run the Docker command
                    if (dockerAvailable) {
                        try {
                            // Execute docker command with -d flag to run in detached mode
                            const { stdout } = await execAsync(cmd);
                            // Get container ID (it's returned by the command when using -d)
                            const containerId = stdout.trim();
                            // Get container name - using double quotes to avoid lint issue with single quotes
                            const { stdout: nameOutput } = await execAsync(`docker inspect --format="{{.Name}}" ${containerId}`);
                            const containerName = nameOutput.trim().replace(/^\//, ''); // Remove leading / from name
                            setContainerInfo({ id: containerId, name: containerName });
                            setOperationCompleted(true);
                            // Call onComplete prop immediately if skipWaitScreen is true
                            if (onComplete && skipWaitScreen) {
                                onComplete();
                            }
                            else if (!onComplete && !onError) {
                                // If no callbacks, we'll exit after rendering
                                exitIfNoCallbacks();
                            }
                        }
                        catch (err) {
                            const errorMessage = err instanceof Error ? err.message : String(err);
                            throw new Error(`Failed to run Docker command: ${errorMessage}`);
                        }
                    }
                }
                else {
                    // For dry run, mark as completed
                    setOperationCompleted(true);
                    // Call onComplete immediately if skipWaitScreen is true
                    if (onComplete && skipWaitScreen) {
                        onComplete();
                    }
                    else if (!onComplete && !onError) {
                        // If no callbacks, we'll exit after rendering
                        exitIfNoCallbacks();
                    }
                }
            }
            catch (err) {
                const errorMessage = err instanceof Error ? err.message : String(err);
                setError(errorMessage);
                // Call onError prop when an error occurs
                if (onError) {
                    onError(errorMessage);
                }
                else if (!onComplete) {
                    // If no error callback and no completion callback, exit with error code
                    setTimeout(() => {
                        process.exit(1);
                    }, 100);
                }
            }
            finally {
                setLoading(false);
            }
        };
        generateDockerCommand();
    }, [
        opa,
        dryRun,
        authToken,
        dockerAvailable,
        skipWaitScreen,
        onComplete,
        onError,
        exitIfNoCallbacks,
    ]);
    if (loading) {
        return (React.createElement(Box, null,
            React.createElement(Text, null,
                React.createElement(Spinner, { type: "dots" }),
                ' ',
                dryRun
                    ? 'Generating Docker command...'
                    : 'Starting PDP Docker container...')));
    }
    if (error) {
        // If Docker isn't available, still show the command
        if (!dockerAvailable || error.includes('Docker is not installed')) {
            return (React.createElement(Box, { flexDirection: "column" },
                React.createElement(Text, { color: "yellow" }, "Docker is not available. Here's the command you can run manually:"),
                React.createElement(Text, null, dockerCommand),
                React.createElement(Text, { color: "red" },
                    "Error: ",
                    error)));
        }
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, { color: "red" },
                "Error: ",
                error),
            React.createElement(Text, null, "You can try running the command manually:"),
            React.createElement(Text, null, dockerCommand)));
    }
    // For dry run without wait screen
    if (dryRun && (!waitDisplay || !onComplete)) {
        // If no callbacks, exit after rendering
        if (!onComplete && !onError) {
            exitIfNoCallbacks();
        }
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, null, "Run the following command to start the PDP container:"),
            React.createElement(Text, null, dockerCommand)));
    }
    // For dry run with wait screen and continue button
    if (dryRun && waitDisplay && onComplete) {
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, null, "Run the following command to start the PDP container:"),
            React.createElement(Text, null, dockerCommand),
            React.createElement(SelectInput, { items: [{ label: 'Continue', value: 'continue' }], onSelect: () => {
                    if (onComplete) {
                        onComplete();
                    }
                    setWaitDisplay(false);
                } })));
    }
    // For live run with wait screen and continue button
    if (waitDisplay && onComplete && operationCompleted) {
        return (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, { color: "green" }, "PDP container started successfully!"),
            React.createElement(Text, null,
                "Container ID: ",
                React.createElement(Text, { color: "cyan" }, containerInfo?.id)),
            React.createElement(Text, null,
                "Container Name: ",
                React.createElement(Text, { color: "cyan" }, containerInfo?.name)),
            React.createElement(Text, null,
                "The PDP is running on port 7766",
                opa ? ` with OPA exposed on port ${opa}` : ''),
            React.createElement(Text, null,
                "To stop the container, run:",
                ' ',
                React.createElement(Text, { color: "yellow" },
                    "docker kill ",
                    containerInfo?.id)),
            React.createElement(SelectInput, { items: [{ label: 'Continue', value: 'continue' }], onSelect: () => {
                    if (onComplete) {
                        onComplete();
                    }
                    setWaitDisplay(false);
                } })));
    }
    // Default success display
    // If no callbacks, exit after rendering this
    if (!onComplete && !onError && operationCompleted) {
        exitIfNoCallbacks();
    }
    return (React.createElement(Box, { flexDirection: "column" },
        React.createElement(Text, { color: "green" }, "PDP container started successfully!"),
        React.createElement(Text, null,
            "Container ID: ",
            React.createElement(Text, { color: "cyan" }, containerInfo?.id)),
        React.createElement(Text, null,
            "Container Name: ",
            React.createElement(Text, { color: "cyan" }, containerInfo?.name)),
        React.createElement(Text, null,
            "The PDP is running on port 7766",
            opa ? ` with OPA exposed on port ${opa}` : ''),
        React.createElement(Text, null,
            "To stop the container, run:",
            ' ',
            React.createElement(Text, { color: "yellow" },
                "docker kill ",
                containerInfo?.id))));
}
