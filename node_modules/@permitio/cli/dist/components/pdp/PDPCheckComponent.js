import React, { useEffect, useState } from 'react';
import { Box, Newline, Text } from 'ink';
import Spinner from 'ink-spinner';
import { inspect } from 'util';
import { parseAttributes } from '../../utils/attributes.js';
import { useCheckPdpApi, } from '../../hooks/useCheckPdpApi.js';
export default function PDPCheckComponent({ options }) {
    const [error, setError] = useState('');
    const [res, setRes] = useState({ allow: undefined });
    const { getAllowedCheck } = useCheckPdpApi();
    useEffect(() => {
        const queryPDP = async () => {
            try {
                const userAttrs = options.userAttributes
                    ? parseAttributes(options.userAttributes)
                    : {};
                const resourceAttrs = options.resourceAttributes
                    ? parseAttributes(options.resourceAttributes)
                    : {};
                const body = {
                    user: {
                        key: options.user,
                        ...userAttrs,
                    },
                    resource: {
                        type: (options.resource.includes(':')
                            ? options.resource.split(':')[0]
                            : options.resource) ?? '',
                        key: options.resource.includes(':')
                            ? options.resource.split(':')[1]
                            : '',
                        tenant: options.tenant,
                        ...resourceAttrs,
                    },
                    action: options.action,
                };
                const { data, response } = await getAllowedCheck(body, options.pdpurl);
                if (!response.ok) {
                    const errorText = await response.text();
                    setError(errorText);
                    return;
                }
                setRes({ allow: data?.allow });
            }
            catch (err) {
                if (err instanceof Error) {
                    setError(err.message);
                }
                else {
                    setError(String(err));
                }
            }
        };
        queryPDP();
    }, [getAllowedCheck, options]);
    return (React.createElement(React.Fragment, null,
        React.createElement(Text, null,
            "Checking user=\"",
            options.user,
            "\"",
            ' ',
            options.userAttributes &&
                ` with attributes=${options.userAttributes && ' '}`,
            "action=\"",
            options.action,
            "\" resource=\"",
            options.resource,
            "\"",
            ' ',
            options.resourceAttributes &&
                ` with attributes=${options.resourceAttributes} && ' '`,
            "at tenant=\"",
            options.tenant,
            "\""),
        res.allow === true && (React.createElement(React.Fragment, null,
            React.createElement(Text, { color: 'green' }, " ALLOWED "),
            React.createElement(Box, { marginLeft: 4 },
                React.createElement(Text, null, inspect(res, {
                    colors: true,
                    depth: null,
                    maxArrayLength: Infinity,
                }))))),
        res.allow === false && React.createElement(Text, { color: 'red' }, " DENIED"),
        res.allow === undefined && error === '' && React.createElement(Spinner, { type: "dots" }),
        error && (React.createElement(Box, null,
            React.createElement(Text, { color: "red" },
                "Request failed: ",
                error),
            React.createElement(Newline, null),
            React.createElement(Text, null, JSON.stringify(res))))));
}
