import React, { useCallback, useEffect, useState } from 'react';
import { Box, Newline, Text } from 'ink';
import Spinner from 'ink-spinner';
import { useAuth } from '../AuthProvider.js';
import { PERMIT_API_STATISTICS_URL } from '../../config.js';
import TableComponent from '../ui/Table.js';
import { fetchUtil, MethodE } from '../../utils/fetchUtil.js';
const isObjectEmpty = (object) => {
    if (!object)
        return undefined;
    return Object.keys(object).length === 0;
};
export default function PDPStatComponent({ options }) {
    // State to store API errors
    const [error, setError] = useState('');
    // Get authentication details from the AuthProvider
    const auth = useAuth();
    // State To Store Statistics URL
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const [statisticsURL, _] = useState(`${options.statsUrl || PERMIT_API_STATISTICS_URL}/${auth.scope.project_id || options.projectKey}/${auth.scope.environment_id || options.environmentKey}/pdps`);
    // State to store API response data
    const [res, setRes] = useState({
        data: undefined,
    });
    // âœ… Wrap queryPDP in useCallback to prevent unnecessary re-creations
    const queryPDP = useCallback(async () => {
        try {
            const response = await fetchUtil(statisticsURL, MethodE.GET, auth.authToken);
            if (response.success) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                setRes(response.data);
            }
            else {
                console.error('Error fetching PDP stats:', response.error);
                setError(response.error);
            }
        }
        catch (err) {
            setError(err instanceof Error ? err.message : String(err));
        }
    }, [auth.authToken, statisticsURL]); // ðŸ”¥ Dependencies: Only re-create if `apiKey` changes
    useEffect(() => {
        // eslint-disable-next-line no-undef
        let intervalId;
        queryPDP(); // Immediate call
        if (options.top) {
            intervalId = setInterval(queryPDP, 3000); // Call every 3 seconds
            return () => clearInterval(intervalId); // Cleanup on unmount
        }
        return;
    }, [queryPDP, options]); // ðŸ”¥ Now depends on queryPDP
    return (React.createElement(React.Fragment, null,
        res?.data && !isObjectEmpty(res?.data) && res?.data?.length > 0 && (React.createElement(TableComponent, { data: res?.data || [], headers: ['id', 'active', 'pdp_version', 'opa_version'], headersHexColor: '#89CFF0' })),
        res?.data === undefined && error === '' && React.createElement(Spinner, { type: "dots" }),
        error && (React.createElement(Box, null,
            React.createElement(Text, { color: "red" },
                "Request failed: ",
                error),
            React.createElement(Newline, null),
            React.createElement(Text, null, JSON.stringify(res)),
            ' ')),
        res?.data?.length === 0 && (React.createElement(Box, null,
            React.createElement(Text, { color: "blue" }, "PDP Was Not Configure For Environment"),
            React.createElement(Newline, null)))));
}
