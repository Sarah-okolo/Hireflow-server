import React, { useEffect, useState } from 'react';
import Spinner from 'ink-spinner';
import { Text } from 'ink';
import { useAuth } from './AuthProvider.js';
import { useEnvironmentApi } from '../hooks/useEnvironmentApi.js';
import { useProjectAPI } from '../hooks/useProjectAPI.js';
import { useOrganisationApi } from '../hooks/useOrganisationApi.js';
export default function EnvironmentInfo() {
    const [state, setState] = useState('loading');
    const [orgName, setOrgName] = useState(undefined);
    const [envName, setEnvName] = useState(undefined);
    const [projName, setProjName] = useState(undefined);
    const [error, setError] = useState(null);
    const { authToken, scope } = useAuth();
    const { getEnvironment } = useEnvironmentApi();
    const { getProject } = useProjectAPI();
    const { getOrg } = useOrganisationApi();
    useEffect(() => {
        const getScopeNames = async () => {
            const { data: org, error: orgError } = await getOrg(scope.organization_id);
            const { data: proj, error: projError } = await getProject(scope.project_id ?? '');
            const { data: env, error: envError } = await getEnvironment(scope.project_id ?? '', scope.environment_id ?? '');
            if (orgError || projError || envError) {
                setError((orgError ?? '') + ' ' + (projError ?? '') + ' ' + (envError ?? ''));
            }
            setOrgName(org?.name ?? '');
            setEnvName(env?.name ?? '');
            setProjName(proj?.name ?? '');
            setState('done');
        };
        if (authToken === '') {
            setState('notLoggedIn');
        }
        else {
            getScopeNames();
        }
    }, [
        authToken,
        getEnvironment,
        getOrg,
        getProject,
        scope.environment_id,
        scope.organization_id,
        scope.project_id,
    ]);
    return (React.createElement(React.Fragment, null,
        state === 'loading' && (React.createElement(Text, null,
            "Loading Environment Info ",
            React.createElement(Spinner, { type: "dots" }))),
        state === 'notLoggedIn' && (React.createElement(Text, { dimColor: true }, "You're not logged in. Run `permit login` to activate all CLI features.")),
        orgName && projName && envName && (React.createElement(React.Fragment, null,
            React.createElement(Text, null,
                "You're logged in to ",
                React.createElement(Text, { color: "#A666F4" }, orgName),
                ' ',
                React.createElement(Text, { color: "#FF953F" }, ">"),
                ' ',
                React.createElement(Text, { color: "#D3B3FA" }, projName),
                ' ',
                React.createElement(Text, { color: "#FF953F" }, ">"),
                ' ',
                React.createElement(Text, { color: "#DEC5FB" }, envName),
                ' '))),
        error && React.createElement(Text, null, error)));
}
