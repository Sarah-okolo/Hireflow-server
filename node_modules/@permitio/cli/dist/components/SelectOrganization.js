import React, { useEffect, useState } from 'react';
import { Text } from 'ink';
import SelectInput from 'ink-select-input';
import Spinner from 'ink-spinner';
import { useOrganisationApi, } from '../hooks/useOrganisationApi.js';
const SelectOrganization = ({ accessToken, cookie, onComplete, workspace, onError, }) => {
    const [orgs, setOrgs] = useState(null);
    const [loading, setLoading] = useState(true);
    const { getOrgs } = useOrganisationApi();
    const handleSelectOrganization = async (organization) => {
        const selectedOrg = organization;
        onComplete({ label: selectedOrg.label, value: selectedOrg.value });
    };
    useEffect(() => {
        const fetchOrgs = async () => {
            const { data: orgs, error } = await getOrgs(accessToken, cookie);
            if (error || !orgs) {
                onError(`Failed to load organizations. Reason: ${error}. Please check your network connection or credentials and try again.`);
                return;
            }
            if (workspace) {
                let userSpecifiedOrganization = orgs.find((org) => org.name === workspace);
                if (userSpecifiedOrganization) {
                    onComplete({
                        label: userSpecifiedOrganization.name,
                        value: userSpecifiedOrganization.id,
                    });
                    return;
                }
                else {
                    onError(`Organization "${workspace}" not found. Please ensure the name is correct and try again.`);
                    return;
                }
            }
            if (orgs.length === 0) {
                onError('NO_ORGANIZATIONS');
                return;
            }
            if (orgs.length === 1 && orgs[0]) {
                onComplete({
                    label: orgs[0].name,
                    value: orgs[0].id,
                });
            }
            else {
                setOrgs(orgs.map((org) => ({
                    label: org.name,
                    value: org.id,
                })));
                setLoading(false);
            }
        };
        fetchOrgs();
        setLoading(false);
    }, [accessToken, cookie, getOrgs, onComplete, onError, workspace]);
    return (React.createElement(React.Fragment, null,
        loading && (React.createElement(Text, null,
            React.createElement(Spinner, { type: "dots" }),
            " Loading Organizations...")),
        !loading && orgs && (React.createElement(React.Fragment, null,
            React.createElement(Text, null, "Select an organization"),
            React.createElement(SelectInput, { items: orgs, onSelect: handleSelectOrganization })))));
};
export default SelectOrganization;
