import React, { useEffect, useState } from 'react';
import { Box, Text } from 'ink';
import { useAuth } from '../AuthProvider.js';
import TableComponent from '../ui/Table.js';
import Spinner from 'ink-spinner';
import { usersApi } from '../../utils/permitApi.js';
// UI configuration constants
const MAX_KEY_LENGTH = 7;
// UI helpers - consider moving to separate utils if reused
const isObjectEmpty = (object) => {
    return Object.keys(object).length === 0;
};
const formatRoles = (roles) => {
    if (!roles.length)
        return '';
    return roles.map(role => role.role).join('\n');
};
const getTenant = (roles) => {
    if (!roles.length)
        return '';
    const tenant = roles[0]?.tenant || '';
    return tenant
        ? tenant.length > MAX_KEY_LENGTH
            ? tenant.slice(0, MAX_KEY_LENGTH) + '...'
            : tenant
        : '';
};
const truncateKey = (key, expand = false) => {
    if (expand)
        return key;
    return key.length > MAX_KEY_LENGTH
        ? key.slice(0, MAX_KEY_LENGTH) + '...'
        : key;
};
// Main component handles data fetching, transformation and display
export default function PermitUsersListComponent({ options }) {
    const auth = useAuth();
    // Track loading/error states for better UX
    const [status, setStatus] = useState('processing');
    const [result, setResult] = useState({
        data: [],
        total_count: 0,
        page: 1,
    });
    const [errorMessage, setErrorMessage] = useState(null);
    // Transform API response into display-ready format
    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await usersApi.list({
                    auth,
                    projectId: options.projectId,
                    envId: options.envId,
                    apiKey: options.apiKey,
                    page: options.page,
                    perPage: options.perPage,
                    role: options.role,
                    tenant: options.tenant,
                });
                if (!response.success) {
                    throw new Error(response.error);
                }
                const rawUsersData = response.data?.data || [];
                const usersData = rawUsersData.map((user, index) => ({
                    ...user,
                    '#': (options.page - 1) * options.perPage + index + 1,
                    key: truncateKey(user.key, options.expandKey),
                    tenant: getTenant(user.roles),
                    roles: formatRoles(user.roles),
                }));
                setResult({
                    data: usersData,
                    total_count: response.data?.total_count || 0,
                    page: response.data?.page || 1,
                });
                setStatus('done');
            }
            catch (error) {
                setResult({ data: [], total_count: 0, page: 0 });
                setStatus('error');
                setErrorMessage(error instanceof Error ? error.message : 'Unknown error occurred');
            }
        };
        fetchData();
    }, [options, auth]);
    return (React.createElement(Box, { flexDirection: "column" },
        status === 'processing' && React.createElement(Spinner, { type: "dots" }),
        status === 'done' && !isObjectEmpty(result.data) && (React.createElement(React.Fragment, null,
            React.createElement(Text, null,
                "Showing ",
                result.data.length,
                " items",
                options.all
                    ? ' | All items'
                    : ` | Page ${result.page || options.page}`,
                ' ',
                "|",
                ' ',
                result.total_count !== undefined
                    ? `Total Pages: ${result.total_count}`
                    : ''),
            React.createElement(TableComponent, { data: result.data, headers: [
                    '#',
                    'key',
                    'email',
                    'first_name',
                    'last_name',
                    'tenant',
                    'roles',
                ], headersHexColor: '#89CFF0' }))),
        status === 'error' && React.createElement(Text, { color: "red" },
            "\u2717 Error: ",
            errorMessage)));
}
