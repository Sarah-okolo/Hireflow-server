import React, { useEffect, useState } from 'react';
import { Box, Text } from 'ink';
import { useAuth } from '../AuthProvider.js';
import Spinner from 'ink-spinner';
import { usersApi } from '../../utils/permitApi.js';
// Handles role assignment operations with real-time feedback
export default function PermitUsersAssignComponent({ options }) {
    const auth = useAuth();
    // Track operation state for better UX feedback
    const [status, setStatus] = useState('processing');
    // Store API response for both success and error cases
    const [result, setResult] = useState({});
    const [errorMessage, setErrorMessage] = useState(null);
    useEffect(() => {
        const assignRole = async () => {
            try {
                // Validate required fields before making API call
                if (!options.user || !options.role || !options.tenant) {
                    throw new Error('User ID, role key, and tenant key are required for assignment');
                }
                const response = await usersApi.assign({
                    auth,
                    projectId: options.projectId,
                    envId: options.envId,
                    apiKey: options.apiKey,
                    user: options.user,
                    role: options.role,
                    tenant: options.tenant,
                });
                // Handle both success and error responses uniformly
                if (!response.success) {
                    setResult(response.data || {});
                    throw new Error(response.error);
                }
                setResult(response.data || {});
                setStatus('done');
            }
            catch (error) {
                setStatus('error');
                setErrorMessage(error instanceof Error ? error.message : 'Unknown error occurred');
            }
        };
        assignRole();
    }, [options, auth]);
    // Provide clear visual feedback for all operation states
    return (React.createElement(Box, { flexDirection: "column" },
        status === 'processing' && React.createElement(Spinner, { type: "dots" }),
        status === 'done' && (React.createElement(Box, { flexDirection: "column" },
            React.createElement(Text, { color: "green" }, "\u2713 Operation completed successfully"),
            React.createElement(Text, null, JSON.stringify(result, null, 2)))),
        status === 'error' && (React.createElement(React.Fragment, null,
            React.createElement(Text, { color: "red" },
                "\u2717 Error: ",
                errorMessage,
                " "),
            React.createElement(Text, null, JSON.stringify(result, null, 2))))));
}
