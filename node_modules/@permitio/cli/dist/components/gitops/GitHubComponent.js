import React, { useState, useCallback } from 'react';
import RepositoryKey from './RepositoryKey.js';
import SSHKey from './SSHKey.js';
import BranchName from './BranchName.js';
import { Box, Text } from 'ink';
import SelectProject from '../SelectProject.js';
import { usePolicyGitReposApi, } from '../../hooks/usePolicyGitReposApi.js';
const GitHubComponent = ({ inactivateWhenValidated }) => {
    const [error, setError] = useState('');
    const [projectKey, setProjectKey] = useState('');
    const [doneMessage, setDoneMessage] = useState('');
    const [gitConfig, setGitConfig] = useState({
        url: '',
        mainBranchName: '',
        credentials: {
            authType: 'ssh',
            username: 'git',
            privateKey: '',
        },
        key: '',
        activateWhenValidated: !inactivateWhenValidated,
    });
    const { configurePermit } = usePolicyGitReposApi();
    const [state, setState] = useState('project');
    const handleProjectSelect = useCallback((project) => {
        setProjectKey(project.value);
        setState('repositoryKey');
    }, []);
    const handleProjectSelectionError = useCallback((error) => {
        setError(error);
        setState('error');
    }, []);
    return (React.createElement(React.Fragment, null,
        React.createElement(Box, { margin: 1 },
            React.createElement(Text, null, "GitOps Configuration Wizard - GitHub")),
        state === 'project' && (React.createElement(SelectProject, { onError: handleProjectSelectionError, onComplete: handleProjectSelect })),
        state === 'repositoryKey' && (React.createElement(RepositoryKey, { projectName: projectKey, onError: errormessage => {
                setError(errormessage);
                setState('error');
            }, onRepoKeySubmit: policyName => {
                setGitConfig({
                    ...gitConfig,
                    key: policyName,
                });
                setState('sshKey');
            } })),
        state === 'sshKey' && (React.createElement(SSHKey, { onError: errormessage => {
                setError(errormessage);
                setState('error');
            }, onSSHKeySubmit: (sshkey, sshUrl) => {
                setGitConfig({
                    ...gitConfig,
                    credentials: {
                        ...gitConfig.credentials,
                        privateKey: sshkey,
                    },
                    url: sshUrl,
                });
                setState('branch');
            } })),
        state === 'branch' && (React.createElement(BranchName, { onError: (errormessage) => {
                setError(errormessage);
                setState('error');
            }, onBranchSubmit: async (branchName) => {
                const updatedGitConfig = {
                    ...gitConfig,
                    mainBranchName: branchName,
                };
                const { data: configResponse, error } = await configurePermit(projectKey, updatedGitConfig);
                if (error) {
                    setError(error);
                    setState('error');
                    return;
                }
                if (configResponse?.status === 'invalid') {
                    setError('Invalid configuration. Please check the configuration and try again.');
                    setState('error');
                    return;
                }
                setState('done');
                if (gitConfig.activateWhenValidated) {
                    setDoneMessage('Your GitOps is configured successfully and will be activated once validated');
                    return;
                }
                setDoneMessage('Your GitOps is configured succesffuly. To complete the setup, remember to activate it later');
            } })),
        state === 'done' && (React.createElement(Box, { margin: 1 },
            React.createElement(Text, { color: 'green' }, doneMessage))),
        state === 'error' && (React.createElement(Box, { margin: 1 },
            React.createElement(Text, { color: 'red' }, 'Error: ' + error)))));
};
export default GitHubComponent;
