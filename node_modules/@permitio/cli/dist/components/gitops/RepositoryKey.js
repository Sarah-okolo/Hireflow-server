import React, { useState, useCallback, useEffect } from 'react';
import { Box, Text } from 'ink';
import TextInput from 'ink-text-input';
import Spinner from 'ink-spinner';
import { usePolicyGitReposApi } from '../../hooks/usePolicyGitReposApi.js';
const RepositoryKey = ({ projectName, onRepoKeySubmit, onError, }) => {
    const [repoKey, setRepoKey] = useState('');
    const [repolist, setRepoList] = useState([]);
    const [loading, setLoading] = useState(true);
    const { getRepoList } = usePolicyGitReposApi();
    const Validate = useCallback(async (repoKey) => {
        if (repoKey.length <= 1) {
            return 'Repository Key is required';
        }
        const regex = /^[A-Za-z0-9\-_]+$/;
        if (!regex.test(repoKey)) {
            return 'Repository Key should contain only alphanumeric characters, hyphens and underscores';
        }
        return '';
    }, []);
    useEffect(() => {
        const fetchRepoList = async () => {
            const { data: repos, error } = await getRepoList(projectName);
            if (error) {
                onError(error.toString());
            }
            const tempRepoList = repos?.map(repo => repo.key);
            setRepoList(tempRepoList ?? []);
            setLoading(false);
        };
        fetchRepoList();
    }, [getRepoList, onError, projectName]);
    const handleSubmit = useCallback(async (repoKey) => {
        const isRepositoryKeyAlreadyPresent = (repoKey) => {
            if (repolist.includes(repoKey)) {
                onError('RepositoryKey with this name already exists');
                return true;
            }
            return false;
        };
        if (isRepositoryKeyAlreadyPresent(repoKey))
            return;
        try {
            const error = await Validate(repoKey);
            if (error.length > 1) {
                onError(error);
                return;
            }
        }
        catch (error) {
            onError(error instanceof Error ? error.message : String(error));
        }
        onRepoKeySubmit(repoKey);
    }, [Validate, onError, onRepoKeySubmit, repolist]);
    return (React.createElement(React.Fragment, null, loading ? (React.createElement(Spinner, { type: "dots" })) : (React.createElement(Box, null,
        React.createElement(Box, { marginRight: 1 },
            React.createElement(Text, null, " Enter Your RepositoryKey : "),
            React.createElement(TextInput, { value: repoKey, onChange: setRepoKey, onSubmit: handleSubmit }))))));
};
export default RepositoryKey;
