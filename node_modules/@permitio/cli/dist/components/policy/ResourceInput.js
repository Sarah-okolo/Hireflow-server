import React, { useState } from 'react';
import { Box, Text } from 'ink';
import TextInput from 'ink-text-input';
export const ResourceInput = ({ onComplete }) => {
    const [input, setInput] = useState('');
    const [validationError, setValidationError] = useState(null);
    const placeholder = 'Posts, Comments, Authors';
    const validateResourceKey = (key) => {
        return /^[a-zA-Z][a-zA-Z0-9_-]*$/.test(key);
    };
    const handleSubmit = async (value) => {
        // Clear any previous validation errors
        setValidationError(null);
        if (value.trim() === '') {
            setInput(placeholder);
            return;
        }
        try {
            const valueToProcess = value.trim();
            const resourceKeys = valueToProcess
                .split(',')
                .map(k => k.trim())
                .filter(k => k.length > 0);
            if (resourceKeys.length === 0) {
                setValidationError('Please enter at least one resource');
                return;
            }
            const invalidKeys = resourceKeys.filter(key => !validateResourceKey(key));
            if (invalidKeys.length > 0) {
                setValidationError(`Invalid resource keys: ${invalidKeys.join(', ')}`);
                return;
            }
            const resources = resourceKeys.map(key => ({
                key,
                name: key,
                actions: {},
            }));
            onComplete(resources);
            // Clear input after successful submission
            setInput('');
        }
        catch (err) {
            setValidationError(err.message);
        }
    };
    return (React.createElement(Box, { flexDirection: "column", gap: 1 },
        React.createElement(Box, null,
            React.createElement(Text, { bold: true }, "Configure Resources")),
        React.createElement(Box, null,
            React.createElement(Text, null, "Enter resource keys (comma-separated):")),
        React.createElement(Box, null,
            React.createElement(Text, { dimColor: true },
                "For Example: ",
                React.createElement(Text, { color: "yellow" }, placeholder))),
        React.createElement(Box, null,
            React.createElement(Text, null, '> '),
            React.createElement(TextInput, { value: input, onChange: setInput, onSubmit: handleSubmit })),
        validationError && (React.createElement(Box, null,
            React.createElement(Text, { color: "red" }, validationError)))));
};
