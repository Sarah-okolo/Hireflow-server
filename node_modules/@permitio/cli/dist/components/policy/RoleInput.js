import React, { useState } from 'react';
import { Box, Text } from 'ink';
import TextInput from 'ink-text-input';
export const RoleInput = ({ availableActions, availableResources, onComplete, }) => {
    const [input, setInput] = useState('');
    const [validationError, setValidationError] = useState(null);
    // Improved placeholder: a real, clear example
    const placeholder = 'Admin|Posts, User|Posts:Read|Posts:Create';
    const validateRoleKey = (key) => /^[a-zA-Z][a-zA-Z0-9_-]*$/.test(key);
    const validateResource = (resource) => !!resource && availableResources.includes(resource);
    const validateAction = (action) => !!action && availableActions.includes(action);
    const handleSubmit = async (value) => {
        // Clear any previous validation errors
        setValidationError(null);
        if (value.trim() === '') {
            setInput(placeholder);
            return;
        }
        try {
            const valueToProcess = value.trim();
            const roleDefs = valueToProcess
                .split(',')
                .map(r => r.trim())
                .filter(Boolean);
            const roles = [];
            for (const def of roleDefs) {
                const [role, ...permParts] = def.split('|').map(s => s.trim());
                if (!role || !validateRoleKey(role)) {
                    setValidationError(`Invalid role key: ${role}`);
                    return;
                }
                if (permParts.length === 0) {
                    setValidationError('Role must have at least one resource or resource:action');
                    return;
                }
                const permissions = [];
                for (const perm of permParts) {
                    const [resource, action] = perm.split(':').map(s => s.trim());
                    if (!resource || !validateResource(resource)) {
                        setValidationError(`Invalid resource in permission: ${perm}`);
                        return;
                    }
                    if (!action) {
                        permissions.push(...availableActions.map(a => `${resource}:${a}`));
                    }
                    else {
                        if (!validateAction(action)) {
                            setValidationError(`Invalid action in permission: ${perm}`);
                            return;
                        }
                        permissions.push(`${resource}:${action}`);
                    }
                }
                if (permissions.length === 0) {
                    setValidationError(`No valid permissions for role: ${role}`);
                    return;
                }
                // Add role regardless of whether it exists or not
                roles.push({
                    key: role,
                    name: role,
                    permissions,
                });
            }
            // Process all roles, including existing ones
            onComplete(roles);
            setInput('');
        }
        catch (err) {
            setValidationError(err.message);
        }
    };
    return (React.createElement(Box, { flexDirection: "column", gap: 1 },
        React.createElement(Box, null,
            React.createElement(Text, { bold: true }, "Configure Roles and Permissions")),
        availableResources.length > 0 && (React.createElement(Box, null,
            React.createElement(Text, { color: "cyan" },
                "Resources: ",
                availableResources.join(', ')))),
        availableActions.length > 0 && (React.createElement(Box, null,
            React.createElement(Text, { color: "cyan" },
                "Actions: ",
                availableActions.join(', ')))),
        React.createElement(Box, null,
            React.createElement(Text, null,
                "Roles/Permissions Convention:",
                ' ',
                React.createElement(Text, { color: "cyan" }, "role|resource:action|resource:action"),
                " or",
                ' ',
                React.createElement(Text, { color: "cyan" }, "role|resource"))),
        React.createElement(Box, null,
            React.createElement(Text, { dimColor: true },
                "For Example: ",
                React.createElement(Text, { color: "yellow" }, placeholder))),
        React.createElement(Box, null,
            React.createElement(Text, null, '> '),
            React.createElement(TextInput, { value: input, onChange: setInput, onSubmit: handleSubmit })),
        validationError && (React.createElement(Box, null,
            React.createElement(Text, { color: "red" }, validationError)))));
};
