import { CLOUD_PDP_URL, PERMIT_API_URL, PERMIT_ORIGIN_URL } from '../config.js';
import createClient from 'openapi-fetch';
import { useCallback, useMemo } from 'react';
export const globalTokenGetterSetter = (() => {
    let authToken = null;
    return {
        tokenGetter: () => authToken,
        tokenSetter: (token) => {
            authToken = token;
        },
    };
})();
export const globalScopeGetterSetter = (() => {
    let scope = null;
    return {
        scopeGetter: () => scope,
        scopeSetter: (_scope) => {
            scope = _scope;
        },
    };
})();
const useClient = () => {
    const _getMethods = (client) => {
        const GET = async (path, path_values, body, query) => {
            const globalScope = globalScopeGetterSetter.scopeGetter();
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            const { data, response, error } = await client.GET(path, {
                params: {
                    query: query ?? undefined,
                    path: path_values
                        ? {
                            ...{
                                org_id: globalScope?.organization_id,
                                proj_id: globalScope?.project_id,
                                env_id: globalScope?.environment_id,
                            },
                            ...path_values,
                        }
                        : {
                            org_id: globalScope?.organization_id,
                            proj_id: globalScope?.project_id,
                            env_id: globalScope?.environment_id,
                        },
                },
                body: body ?? undefined, // Only include if body exists
            });
            let newError = null;
            if (error) {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-expect-error
                newError = error instanceof String ? error : error.detail;
            }
            return { data, response, error: newError };
        };
        const POST = async (path, path_values, body, query) => {
            const globalScope = globalScopeGetterSetter.scopeGetter();
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            const { data, response, error } = await client.POST(path, {
                params: {
                    query: query ?? undefined,
                    path: path_values
                        ? {
                            ...{
                                org_id: globalScope?.organization_id,
                                proj_id: globalScope?.project_id,
                                env_id: globalScope?.environment_id,
                            },
                            ...path_values,
                        }
                        : {
                            org_id: globalScope?.organization_id,
                            proj_id: globalScope?.project_id,
                            env_id: globalScope?.environment_id,
                        },
                },
                body: body ?? undefined, // Only include if body exists
            });
            let newError = null;
            if (error) {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-expect-error
                newError = error instanceof String ? error : JSON.stringify(error);
            }
            return { data, response, error: newError };
        };
        const PUT = async (path, path_values, body, query) => {
            const globalScope = globalScopeGetterSetter.scopeGetter();
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            const { data, response, error } = await client.PUT(path, {
                params: {
                    query: query ?? undefined,
                    path: path_values
                        ? {
                            ...{
                                org_id: globalScope?.organization_id,
                                proj_id: globalScope?.project_id,
                                env_id: globalScope?.environment_id,
                            },
                            ...path_values,
                        }
                        : {
                            org_id: globalScope?.organization_id,
                            proj_id: globalScope?.project_id,
                            env_id: globalScope?.environment_id,
                        },
                },
                body: body ?? undefined, // Only include if body exists
            });
            let newError = null;
            if (error) {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-expect-error
                newError = error instanceof String ? error : JSON.stringify(error);
            }
            return { data, response, error: newError };
        };
        const PATCH = async (path, path_values, body, query) => {
            const globalScope = globalScopeGetterSetter.scopeGetter();
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            const { response, error } = await client.PATCH(path, {
                params: {
                    query: query ?? undefined,
                    path: path_values
                        ? {
                            ...{
                                org_id: globalScope?.organization_id,
                                proj_id: globalScope?.project_id,
                                env_id: globalScope?.environment_id,
                            },
                            ...path_values,
                        }
                        : {
                            org_id: globalScope?.organization_id,
                            proj_id: globalScope?.project_id,
                            env_id: globalScope?.environment_id,
                        },
                },
                body: body ?? undefined, // Only include if body exists
            });
            let newError = null;
            if (error) {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-expect-error
                newError = error instanceof String ? error : JSON.stringify(error);
            }
            return {
                response,
                error: newError,
            };
        };
        const DELETE = async (path, path_values, body, query) => {
            const globalScope = globalScopeGetterSetter.scopeGetter();
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            const { data, response, error } = await client.DELETE(path, {
                params: {
                    query: query ?? undefined,
                    path: path_values
                        ? {
                            ...{
                                org_id: globalScope?.organization_id,
                                proj_id: globalScope?.project_id,
                                env_id: globalScope?.environment_id,
                            },
                            ...path_values,
                        }
                        : {
                            org_id: globalScope?.organization_id,
                            proj_id: globalScope?.project_id,
                            env_id: globalScope?.environment_id,
                        },
                },
                body: body ?? undefined, // Only include if body exists
            });
            let newError = null;
            if (error) {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-expect-error
                newError = error instanceof String ? error : JSON.stringify(error);
            }
            return { data, response, error: newError };
        };
        return {
            GET,
            POST,
            PUT,
            DELETE,
            PATCH,
        };
    };
    const authenticatedApiClient = useCallback(() => {
        const client = createClient({
            baseUrl: PERMIT_API_URL,
            headers: {
                Accept: '*/*',
                Origin: PERMIT_ORIGIN_URL,
                'Content-Type': 'application/json',
                Authorization: `Bearer ${globalTokenGetterSetter.tokenGetter()}`,
            },
        });
        return _getMethods(client);
    }, []);
    const authenticatedPdpClient = useCallback((pdp_url) => {
        const client = createClient({
            baseUrl: pdp_url ?? CLOUD_PDP_URL,
            headers: {
                Accept: '*/*',
                'Content-Type': 'application/json',
                Authorization: `Bearer ${globalTokenGetterSetter.tokenGetter()}`,
            },
        });
        const GET = async (path, path_values, body, query) => {
            const globalScope = globalScopeGetterSetter.scopeGetter();
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            const { data, response, error } = await client.GET(path, {
                params: {
                    query: query ?? undefined,
                    path: path_values
                        ? {
                            ...{
                                org_id: globalScope?.organization_id,
                                proj_id: globalScope?.project_id,
                                env_id: globalScope?.environment_id,
                            },
                            ...path_values,
                        }
                        : {
                            org_id: globalScope?.organization_id,
                            proj_id: globalScope?.project_id,
                            env_id: globalScope?.environment_id,
                        },
                },
                body: body ?? undefined, // Only include if body exists
            });
            let newError = null;
            if (error) {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-expect-error
                newError = error instanceof String ? error : JSON.stringify(error);
            }
            return { data, response, error: newError };
        };
        const POST = async (path, path_values, body, query) => {
            const globalScope = globalScopeGetterSetter.scopeGetter();
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            const { data, response, error } = await client.POST(path, {
                params: {
                    query: query ?? undefined,
                    path: path_values
                        ? {
                            ...{
                                org_id: globalScope?.organization_id,
                                proj_id: globalScope?.project_id,
                                env_id: globalScope?.environment_id,
                            },
                            ...path_values,
                        }
                        : {
                            org_id: globalScope?.organization_id,
                            proj_id: globalScope?.project_id,
                            env_id: globalScope?.environment_id,
                        },
                },
                body: body ?? undefined, // Only include if body exists
            });
            let newError = null;
            if (error) {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-expect-error
                newError = error instanceof String ? error : JSON.stringify(error);
            }
            return { data, response, error: newError };
        };
        const DELETE = async (path, path_values, body, query) => {
            const globalScope = globalScopeGetterSetter.scopeGetter();
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            const { data, response, error } = await client.DELETE(path, {
                params: {
                    query: query ?? undefined,
                    path: path_values
                        ? {
                            ...{
                                org_id: globalScope?.organization_id,
                                proj_id: globalScope?.project_id,
                                env_id: globalScope?.environment_id,
                            },
                            ...path_values,
                        }
                        : {
                            org_id: globalScope?.organization_id,
                            proj_id: globalScope?.project_id,
                            env_id: globalScope?.environment_id,
                        },
                },
                body: body ?? undefined, // Only include if body exists
            });
            let newError = null;
            if (error) {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-expect-error
                newError = error instanceof String ? error : JSON.stringify(error);
            }
            return { data, response, error: newError };
        };
        return {
            GET,
            POST,
            DELETE,
        };
    }, []);
    const unAuthenticatedApiClient = (accessToken, cookie) => {
        const client = createClient({
            baseUrl: PERMIT_API_URL,
            headers: {
                Accept: '*/*',
                Origin: PERMIT_ORIGIN_URL,
                'Content-Type': 'application/json',
                Authorization: `Bearer ${accessToken}`,
                Cookie: cookie,
            },
        });
        const GET = async (path, path_values, body, query) => {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            const { data, response, error } = await client.GET(path, {
                params: {
                    query: query ?? undefined,
                    path: path_values ?? undefined,
                },
                body: body ?? undefined, // Only include if body exists
            });
            let newError = null;
            if (error) {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-expect-error
                newError = error instanceof String ? error : JSON.stringify(error);
            }
            return { data, response, error: newError };
        };
        const POST = async (path, path_values, body, query) => {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            const { data, response, error } = await client.POST(path, {
                params: {
                    query: query ?? undefined,
                    path: path_values ?? undefined,
                },
                body: body ?? undefined, // Only include if body exists
            });
            let newError = null;
            if (error) {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-expect-error
                newError = error instanceof String ? error : JSON.stringify(error);
            }
            return { data, response, error: newError };
        };
        const PUT = async (path, path_values, body, query) => {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            const { data, response, error } = await client.PUT(path, {
                params: {
                    query: query ?? undefined,
                    path: path_values ?? undefined,
                },
                body: body ?? undefined, // Only include if body exists
            });
            let newError = null;
            if (error) {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-expect-error
                newError = error instanceof String ? error : JSON.stringify(error);
            }
            return { data, response, error: newError };
        };
        const DELETE = async (path, path_values, body, query) => {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            const { data, response, error } = await client.DELETE(path, {
                params: {
                    query: query ?? undefined,
                    path: path_values ?? undefined,
                },
                body: body ?? undefined, // Only include if body exists
            });
            let newError = null;
            if (error) {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-expect-error
                newError = error instanceof String ? error : JSON.stringify(error);
            }
            return { data, response, error: newError };
        };
        return {
            GET,
            POST,
            DELETE,
            PUT,
        };
    };
    return useMemo(() => ({
        authenticatedApiClient,
        authenticatedPdpClient,
        unAuthenticatedApiClient,
    }), [authenticatedApiClient, authenticatedPdpClient]);
};
export default useClient;
