import { components } from '../lib/api/v1.js';
export type RoleRead = components['schemas']['RoleRead'];
export type RoleAssignmentCreate = components['schemas']['RoleAssignmentCreate'];
export declare const useRolesApi: () => {
    getRoles: () => Promise<Omit<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: {
                include_total_count?: boolean;
                page?: number;
                per_page?: number;
                search?: string;
            };
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_RoleRead_"] | components["schemas"]["RoleRead"][];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, import("openapi-fetch").FetchOptions<{
        parameters: {
            query?: {
                include_total_count?: boolean;
                page?: number;
                per_page?: number;
                search?: string;
            };
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_RoleRead_"] | components["schemas"]["RoleRead"][];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }>, "application/json">, "error"> & {
        error: string | null;
    }>;
    assignRoles: (body: RoleAssignmentCreate[]) => Promise<Omit<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: {
                missing_user_policy?: components["schemas"]["MissingUserPolicy"];
            };
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleAssignmentCreate"][];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkRoleAssignmentReport"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, import("openapi-fetch").FetchOptions<{
        parameters: {
            query?: {
                missing_user_policy?: components["schemas"]["MissingUserPolicy"];
            };
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleAssignmentCreate"][];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkRoleAssignmentReport"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }>, "application/json">, "error"> & {
        error: string | null;
    }>;
    getExistingRoles: () => Promise<Set<string>>;
    createBulkRoles: (roles: components["schemas"]["RoleCreate"][]) => Promise<void>;
    status: "error" | "done" | "idle" | "processing";
    errorMessage: string | null;
};
