import type { paths } from '../lib/api/v1.js';
import type { paths as PdpPaths } from '../lib/api/pdp-v1.js';
import { FetchResponse, MaybeOptionalInit } from 'openapi-fetch';
import type { PathsWithMethod } from 'openapi-typescript-helpers';
import { ApiKeyScope } from './useApiKeyApi.js';
export declare const globalTokenGetterSetter: {
    tokenGetter: () => string | null;
    tokenSetter: (token: string) => void;
};
export declare const globalScopeGetterSetter: {
    scopeGetter: () => ApiKeyScope | null;
    scopeSetter: (_scope: ApiKeyScope) => void;
};
declare const useClient: () => {
    authenticatedApiClient: () => {
        GET: <Path extends PathsWithMethod<paths, "get">, Init extends MaybeOptionalInit<paths[Path], "get">>(path: Path, path_values?: Omit<paths[Path]["get"]["parameters"]["path"], "proj_id" | "org_id" | "env_id">, body?: paths[Path]["post"] extends {
            requestBody: {
                content: {
                    "application/json": infer B;
                };
            };
        } ? B : undefined, query?: paths[Path]["get"]["parameters"]["query"]) => Promise<Omit<FetchResponse<paths[Path]["get"], Init, "application/json">, "error"> & {
            error: string | null;
        }>;
        POST: <Path extends PathsWithMethod<paths, "post">, Init extends MaybeOptionalInit<paths[Path], "post">>(path: Path, path_values?: Omit<paths[Path]["post"]["parameters"]["path"], "proj_id" | "org_id" | "env_id">, body?: paths[Path]["post"] extends {
            requestBody: {
                content: {
                    "application/json": infer B;
                };
            };
        } ? B : undefined, query?: paths[Path]["post"]["parameters"]["query"]) => Promise<Omit<FetchResponse<paths[Path]["post"], Init, "application/json">, "error"> & {
            error: string | null;
        }>;
        PUT: <Path extends PathsWithMethod<paths, "put">, Init extends MaybeOptionalInit<paths[Path], "put">>(path: Path, path_values: Omit<paths[Path]["put"]["parameters"]["path"], "proj_id" | "org_id" | "env_id">, body: paths[Path]["put"]["requestBody"], query: paths[Path]["put"]["parameters"]["query"]) => Promise<Omit<FetchResponse<paths[Path]["put"], Init, "application/json">, "error"> & {
            error: string | null;
        }>;
        DELETE: <Path extends PathsWithMethod<paths, "delete">, Init extends MaybeOptionalInit<paths[Path], "delete">>(path: Path, path_values: Omit<paths[Path]["delete"]["parameters"]["path"], "proj_id" | "org_id" | "env_id">, body: paths[Path]["delete"]["requestBody"], query: paths[Path]["delete"]["parameters"]["query"]) => Promise<Omit<FetchResponse<paths[Path]["delete"], Init, "application/json">, "error"> & {
            error: string | null;
        }>;
        PATCH: <Path extends PathsWithMethod<paths, "patch">, Init extends MaybeOptionalInit<paths[Path], "patch">>(path: Path, path_values: Omit<paths[Path]["patch"]["parameters"]["path"], "proj_id" | "org_id" | "env_id">, body?: paths[Path]["patch"]["requestBody"]["content"]["application/json"], query?: paths[Path]["patch"]["parameters"]["query"]) => Promise<Omit<FetchResponse<paths[Path]["patch"], Init, "application/json">, "error"> & {
            error: string | null;
        }>;
    };
    authenticatedPdpClient: (pdp_url?: string) => {
        GET: <Path extends PathsWithMethod<PdpPaths, "get">, Init extends MaybeOptionalInit<PdpPaths[Path], "get">>(path: Path, path_values?: Omit<PdpPaths[Path]["get"]["parameters"]["path"], "proj_id" | "org_id" | "env_id">, body?: PdpPaths[Path]["post"] extends {
            requestBody: {
                content: {
                    "application/json": infer B;
                };
            };
        } ? B : undefined, query?: PdpPaths[Path]["get"]["parameters"]["query"]) => Promise<Omit<FetchResponse<PdpPaths[Path]["get"], Init, "application/json">, "error"> & {
            error: string | null;
        }>;
        POST: <Path extends PathsWithMethod<PdpPaths, "post">, Init extends MaybeOptionalInit<PdpPaths[Path], "post">>(path: Path, path_values?: Omit<PdpPaths[Path]["post"]["parameters"]["path"], "proj_id" | "org_id" | "env_id">, body?: PdpPaths[Path]["post"] extends {
            requestBody: {
                content: {
                    "application/json": infer B;
                };
            };
        } ? B : undefined, query?: PdpPaths[Path]["post"]["parameters"]["query"] | undefined) => Promise<Omit<FetchResponse<PdpPaths[Path]["post"], Init, "application/json">, "error"> & {
            error: string | null;
        }>;
        DELETE: <Path extends PathsWithMethod<PdpPaths, "delete">, Init extends MaybeOptionalInit<PdpPaths[Path], "delete">>(path: Path, path_values: Omit<PdpPaths[Path]["delete"]["parameters"]["path"], "proj_id" | "org_id" | "env_id">, body: PdpPaths[Path]["delete"]["requestBody"], query: PdpPaths[Path]["delete"]["parameters"]["query"]) => Promise<Omit<FetchResponse<PdpPaths[Path]["delete"], Init, "application/json">, "error"> & {
            error: string | null;
        }>;
    };
    unAuthenticatedApiClient: (accessToken?: string | null, cookie?: string | null) => {
        GET: <Path extends PathsWithMethod<paths, "get">, Init extends MaybeOptionalInit<paths[Path], "get">>(path: Path, path_values?: paths[Path]["get"]["parameters"]["path"], body?: paths[Path]["post"] extends {
            requestBody: {
                content: {
                    "application/json": infer B;
                };
            };
        } ? B : undefined, query?: paths[Path]["get"]["parameters"]["query"]) => Promise<Omit<FetchResponse<paths[Path]["get"], Init, "application/json">, "error"> & {
            error: string | null;
        }>;
        POST: <Path extends PathsWithMethod<paths, "post">, Init extends MaybeOptionalInit<paths[Path], "post">>(path: Path, path_values?: paths[Path]["post"]["parameters"]["path"], body?: paths[Path]["post"] extends {
            requestBody: {
                content: {
                    "application/json": infer B;
                };
            };
        } ? B : undefined, query?: paths[Path]["post"]["parameters"]["query"]) => Promise<Omit<FetchResponse<paths[Path]["post"], Init, "application/json">, "error"> & {
            error: string | null;
        }>;
        DELETE: <Path extends PathsWithMethod<paths, "delete">, Init extends MaybeOptionalInit<paths[Path], "delete">>(path: Path, path_values: paths[Path]["delete"]["parameters"]["path"], body: paths[Path]["delete"]["requestBody"], query: paths[Path]["delete"]["parameters"]["query"]) => Promise<Omit<FetchResponse<paths[Path]["delete"], Init, "application/json">, "error"> & {
            error: string | null;
        }>;
        PUT: <Path extends PathsWithMethod<paths, "put">, Init extends MaybeOptionalInit<paths[Path], "put">>(path: Path, path_values?: paths[Path]["put"]["parameters"]["path"], body?: paths[Path]["put"] extends {
            requestBody: {
                content: {
                    "application/json": infer B;
                };
            };
        } ? B : undefined, query?: paths[Path]["put"]["parameters"]["query"] | undefined) => Promise<Omit<FetchResponse<paths[Path]["put"], Init, "application/json">, "error"> & {
            error: string | null;
        }>;
    };
};
export default useClient;
