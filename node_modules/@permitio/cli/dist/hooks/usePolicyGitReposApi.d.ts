import { components } from '../lib/api/v1.js';
export type PolicyRepoCreate = components['schemas']['PolicyRepoCreate'];
export type PolicyRepoRead = components['schemas']['PolicyRepoRead'];
export type GitConfig = {
    url: string;
    mainBranchName: string;
    credentials: {
        authType: 'ssh';
        username: string;
        privateKey: string;
    };
    key: string;
    activateWhenValidated: boolean;
};
export declare const usePolicyGitReposApi: () => {
    getRepoList: (projectKey: string) => Promise<Omit<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: {
                page?: number;
                per_page?: number;
            };
            header?: never;
            path: {
                proj_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyRepoRead"][];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, import("openapi-fetch").FetchOptions<{
        parameters: {
            query?: {
                page?: number;
                per_page?: number;
            };
            header?: never;
            path: {
                proj_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyRepoRead"][];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }>, "application/json">, "error"> & {
        error: string | null;
    }>;
    configurePermit: (projectKey: string, gitconfig: GitConfig) => Promise<Omit<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                proj_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PolicyRepoCreate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyRepoRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, import("openapi-fetch").FetchOptions<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                proj_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PolicyRepoCreate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PolicyRepoRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }>, "application/json">, "error"> & {
        error: string | null;
    }>;
};
