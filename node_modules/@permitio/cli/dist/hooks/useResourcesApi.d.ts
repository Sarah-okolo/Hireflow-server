import { components } from '../lib/api/v1.js';
export type ResourceRead = components['schemas']['ResourceRead'];
export declare const useResourcesApi: () => {
    getResources: () => Promise<Omit<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: {
                include_built_in?: boolean;
                include_total_count?: boolean;
                page?: number;
                per_page?: number;
                search?: string;
            };
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_ResourceRead_"] | components["schemas"]["ResourceRead"][];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, import("openapi-fetch").FetchOptions<{
        parameters: {
            query?: {
                include_built_in?: boolean;
                include_total_count?: boolean;
                page?: number;
                per_page?: number;
                search?: string;
            };
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResult_ResourceRead_"] | components["schemas"]["ResourceRead"][];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }>, "application/json">, "error"> & {
        error: string | null;
    }>;
    getExistingResources: () => Promise<Set<unknown>>;
    createBulkResources: (resources: components["schemas"]["ResourceCreate"][]) => Promise<void>;
    status: "error" | "done" | "idle" | "processing";
    errorMessage: string | null;
};
