import { sanitizeKey, HTTP_METHODS, } from '../../../utils/openapiUtils.js';
import { PERMIT_EXTENSIONS } from './openapiConstants.js';
export async function generateUrlMappings(context, pathItems) {
    const { mappings, baseUrl } = context;
    for (const [pathKey, pathItem] of Object.entries(pathItems || {})) {
        if (!pathItem || typeof pathItem !== 'object')
            continue;
        const typedPathItem = pathItem;
        const rawResource = typedPathItem[PERMIT_EXTENSIONS.RESOURCE];
        if (!rawResource)
            continue;
        const resource = sanitizeKey(rawResource);
        // Process HTTP methods
        for (const method of HTTP_METHODS) {
            const operation = typedPathItem[method];
            if (!operation)
                continue;
            // Add URL mapping with absolute path
            const action = operation[PERMIT_EXTENSIONS.ACTION] || method;
            mappings.push({
                url: baseUrl ? `${baseUrl}${pathKey}` : pathKey,
                http_method: method,
                resource: resource,
                action: action,
            });
        }
    }
    return context;
}
export async function createMappings(context, deleteUrlMappings, createUrlMappings) {
    const { mappings, errors } = context;
    // Create URL mappings
    if (mappings.length > 0) {
        try {
            // Try to delete existing mappings first
            try {
                await deleteUrlMappings('openapi');
            }
            catch {
                // No existing mappings to delete or error deleting
            }
            const result = await createUrlMappings(mappings, 'Bearer', 'openapi_token');
            if (result.error) {
                errors.push(`Failed to create URL mappings: ${JSON.stringify(result.error)}`);
            }
        }
        catch (mappingError) {
            errors.push(`Error creating URL mappings: ${mappingError}`);
        }
    }
    return context;
}
