/**
 * Hook for resource-related Permit API operations
 */
export declare const usePermitResourceApi: () => {
    listResources: () => Promise<Omit<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: {
                include_built_in?: boolean;
                include_total_count?: boolean;
                page?: number;
                per_page?: number;
                search?: string;
            };
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["PaginatedResult_ResourceRead_"] | import("../../lib/api/v1.js").components["schemas"]["ResourceRead"][];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, import("openapi-fetch").FetchOptions<{
        parameters: {
            query?: {
                include_built_in?: boolean;
                include_total_count?: boolean;
                page?: number;
                per_page?: number;
                search?: string;
            };
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["PaginatedResult_ResourceRead_"] | import("../../lib/api/v1.js").components["schemas"]["ResourceRead"][];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }>, "application/json">, "error"> & {
        error: string | null;
    }>;
    createResource: (resourceKey: string, resourceName: string) => Promise<Omit<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceCreate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, import("openapi-fetch").FetchOptions<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceCreate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }>, "application/json">, "error"> & {
        error: string | null;
    }>;
    updateResource: (resourceKey: string, resourceName: string) => Promise<Omit<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                resource_id: string;
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceUpdate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, import("openapi-fetch").FetchOptions<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                resource_id: string;
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceUpdate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }>, "application/json">, "error"> & {
        error: string | null;
    }>;
    createAction: (resourceKey: string, actionKey: string, actionName: string) => Promise<Omit<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                resource_id: string;
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceActionCreate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceActionRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, import("openapi-fetch").FetchOptions<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                resource_id: string;
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceActionCreate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceActionRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }>, "application/json">, "error"> & {
        error: string | null;
    }>;
};
