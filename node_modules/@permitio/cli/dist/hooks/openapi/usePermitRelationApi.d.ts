import { ApiResponse, RelationObject, DerivedRoleObject } from '../../utils/openapiUtils.js';
import { components } from '../../lib/api/v1.js';
type ResourceRoleRead = components['schemas']['ResourceRoleRead'];
type RelationRead = components['schemas']['RelationRead'];
type PaginatedResult<T> = {
    data?: T[];
    total_count?: number;
    page_count?: number;
};
type PaginatedRelationRead = PaginatedResult<RelationRead>;
type DerivedRoleResponse = DerivedRoleObject;
/**
 * Hook for relation and role derivation API operations
 */
export declare const usePermitRelationApi: () => {
    getRelationByKey: (subjectResourceKey: string, relationKey: string) => Promise<ApiResponse<RelationRead>>;
    getResourceRelations: (resourceKey: string) => Promise<ApiResponse<PaginatedRelationRead>>;
    createRelation: (relationInput: Partial<RelationObject>) => Promise<ApiResponse<RelationRead>>;
    createResourceSpecificRole: (resourceKey: string, roleKey: string) => Promise<ApiResponse<ResourceRoleRead>>;
    createDerivedRole: (derivedRoleInput: Partial<DerivedRoleObject>) => Promise<ApiResponse<DerivedRoleResponse>>;
    checkResourceRoleExists: (resourceKey: string, roleKey: string) => Promise<{
        exists: boolean;
        data?: ResourceRoleRead;
    }>;
};
export {};
