/**
 * Hook to interact with Permit API for OpenAPI spec processing
 *
 * This hook combines multiple specialized hooks to provide a unified API
 * for the OpenAPI component to interact with the Permit system.
 *
 * @returns Object with methods to create Permit policy elements
 */
export declare const useOpenapiApi: () => {
    listResources: () => Promise<Omit<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: {
                include_built_in?: boolean;
                include_total_count?: boolean;
                page?: number;
                per_page?: number;
                search?: string;
            };
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["PaginatedResult_ResourceRead_"] | import("../../lib/api/v1.js").components["schemas"]["ResourceRead"][];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, import("openapi-fetch").FetchOptions<{
        parameters: {
            query?: {
                include_built_in?: boolean;
                include_total_count?: boolean;
                page?: number;
                per_page?: number;
                search?: string;
            };
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["PaginatedResult_ResourceRead_"] | import("../../lib/api/v1.js").components["schemas"]["ResourceRead"][];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }>, "application/json">, "error"> & {
        error: string | null;
    }>;
    createResource: (resourceKey: string, resourceName: string) => Promise<Omit<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceCreate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, import("openapi-fetch").FetchOptions<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceCreate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }>, "application/json">, "error"> & {
        error: string | null;
    }>;
    updateResource: (resourceKey: string, resourceName: string) => Promise<Omit<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                resource_id: string;
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceUpdate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, import("openapi-fetch").FetchOptions<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                resource_id: string;
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceUpdate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }>, "application/json">, "error"> & {
        error: string | null;
    }>;
    createAction: (resourceKey: string, actionKey: string, actionName: string) => Promise<Omit<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                resource_id: string;
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceActionCreate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceActionRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, import("openapi-fetch").FetchOptions<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                resource_id: string;
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceActionCreate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["ResourceActionRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }>, "application/json">, "error"> & {
        error: string | null;
    }>;
    listRoles: () => Promise<Omit<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: {
                include_total_count?: boolean;
                page?: number;
                per_page?: number;
                search?: string;
            };
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["PaginatedResult_RoleRead_"] | import("../../lib/api/v1.js").components["schemas"]["RoleRead"][];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, import("openapi-fetch").FetchOptions<{
        parameters: {
            query?: {
                include_total_count?: boolean;
                page?: number;
                per_page?: number;
                search?: string;
            };
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["PaginatedResult_RoleRead_"] | import("../../lib/api/v1.js").components["schemas"]["RoleRead"][];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }>, "application/json">, "error"> & {
        error: string | null;
    }>;
    getRole: (roleKey: string) => Promise<Omit<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: string;
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["RoleRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, import("openapi-fetch").FetchOptions<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: string;
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["RoleRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }>, "application/json">, "error"> & {
        error: string | null;
    }>;
    createRole: (roleKey: string, roleName: string) => Promise<Omit<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("../../lib/api/v1.js").components["schemas"]["RoleCreate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["RoleRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, import("openapi-fetch").FetchOptions<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("../../lib/api/v1.js").components["schemas"]["RoleCreate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["RoleRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }>, "application/json">, "error"> & {
        error: string | null;
    }>;
    updateRole: (roleKey: string, roleName: string, permissions?: string[]) => Promise<Omit<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: string;
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("../../lib/api/v1.js").components["schemas"]["RoleUpdate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["RoleRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, import("openapi-fetch").FetchOptions<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                role_id: string;
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("../../lib/api/v1.js").components["schemas"]["RoleUpdate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["RoleRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }>, "application/json">, "error"> & {
        error: string | null;
    }>;
    createResourceRole: (resourceKey: string, roleKey: string, roleName: string, permissionString: string) => Promise<Omit<import("openapi-fetch").FetchResponse<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("../../lib/api/v1.js").components["schemas"]["RoleCreate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["RoleRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }, import("openapi-fetch").FetchOptions<{
        parameters: {
            query?: never;
            header?: never;
            path: {
                proj_id: string;
                env_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": import("../../lib/api/v1.js").components["schemas"]["RoleCreate"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["RoleRead"];
                };
            };
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": import("../../lib/api/v1.js").components["schemas"]["HTTPValidationError"];
                };
            };
        };
    }>, "application/json">, "error"> & {
        error: string | null;
    }>;
    getRelationByKey: (subjectResourceKey: string, relationKey: string) => Promise<import("../../utils/openapiUtils.js").ApiResponse<{
        description?: string;
        subject_resource: string;
        key: string;
        name: string;
        id: string;
        organization_id: string;
        project_id: string;
        environment_id: string;
        created_at: string;
        updated_at: string;
        object_resource_id: string;
        object_resource: string;
        subject_resource_id: string;
    }>>;
    createRelation: (relationInput: Partial<import("../../utils/openapiUtils.js").RelationObject>) => Promise<import("../../utils/openapiUtils.js").ApiResponse<{
        description?: string;
        subject_resource: string;
        key: string;
        name: string;
        id: string;
        organization_id: string;
        project_id: string;
        environment_id: string;
        created_at: string;
        updated_at: string;
        object_resource_id: string;
        object_resource: string;
        subject_resource_id: string;
    }>>;
    createDerivedRole: (derivedRoleInput: Partial<import("../../utils/openapiUtils.js").DerivedRoleObject>) => Promise<import("../../utils/openapiUtils.js").ApiResponse<import("../../utils/openapiUtils.js").DerivedRoleObject>>;
    deleteUrlMappings: (proxyConfigKey: string) => Promise<import("../../utils/openapiUtils.js").ApiResponse<null>>;
    createUrlMappings: (mappings: {
        url: string;
        url_type?: "regex";
        http_method: import("../../lib/api/v1.js").components["schemas"]["Methods"];
        resource: string;
        headers: {
            [key: string]: string;
        };
        action?: string;
        priority?: number;
    }[], authMechanism: string, secret: string | Record<string, string>) => Promise<import("../../utils/openapiUtils.js").ApiResponse<{
        key: string;
        id: string;
        organization_id: string;
        project_id: string;
        environment_id: string;
        created_at: string;
        updated_at: string;
        secret: Record<string, never> | Record<string, never> | Record<string, never>;
        name: string;
        mapping_rules: import("../../lib/api/v1.js").components["schemas"]["MappingRule"][];
        auth_mechanism: import("../../lib/api/v1.js").components["schemas"]["AuthMechanism"];
    }>>;
};
