export interface AuditLog {
    id: string;
    timestamp: string;
    user_key?: string;
    user_email?: string;
    resource?: string;
    resource_type?: string;
    action: string;
    tenant: string | null;
    decision: boolean;
    pdp_config_id?: string;
}
export interface AuditContext {
    user: {
        id: string;
        key?: string;
        attributes?: Record<string, string | number | boolean>;
    };
    resource: {
        type: string;
        id: string;
        attributes?: Record<string, string | number | boolean>;
    };
    tenant: string;
    action: string;
}
export interface DetailedAuditLog extends AuditLog {
    user_id: string;
    context?: AuditContext;
}
export interface FilterOptions {
    timeFrame: number;
    sourcePdp?: string;
    users?: string[];
    resources?: string[];
    tenant?: string;
    action?: string;
    decision?: boolean;
    maxLogs?: number;
}
/**
 * Hook for interacting with audit logs and PDP checking functionality
 */
export declare const useAuditLogs: () => {
    getAuditLogs: (filters: FilterOptions) => Promise<{
        data: null;
        error: string;
    } | {
        data: {
            data: unknown[];
        };
        error: null;
    }>;
    getAuditLogDetails: (auditLogId: string) => Promise<{
        data: null;
        error: string;
    } | {
        data: {
            id: string;
            raw_data: import("../lib/api/v1.js").components["schemas"]["OPAEngineDecisionLog"] | import("../lib/api/v1.js").components["schemas"]["AVPEngineDecisionLog"] | import("../lib/api/v1.js").components["schemas"]["DummyEngineModel"];
            timestamp: string;
            created_at?: string;
            query?: string;
            user_key?: string;
            user_email?: string;
            user_name?: string;
            resource_type?: string;
            tenant?: string;
            action?: string;
            decision?: boolean;
            reason?: string;
            org_id: string;
            project_id: string;
            env_id: string;
            pdp_config_id: string;
            input?: unknown;
            result?: unknown;
            context?: unknown;
            objects: import("../lib/api/v1.js").components["schemas"]["AuditLogObjectsModel"];
        } | undefined;
        error: null;
    }>;
    checkPdpPermission: (request: {
        tenant: string;
        action: string;
        user: {
            key: string;
        };
        resource: {
            type: string;
            key?: string;
        };
    }, pdpUrl?: string) => Promise<{
        data: null;
        error: string;
    } | {
        data: {
            allow: boolean;
            query?: Record<string, never>;
            debug?: Record<string, never>;
            result: boolean;
        } | undefined;
        error: null;
    }>;
};
export default useAuditLogs;
