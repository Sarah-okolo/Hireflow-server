import React from 'react';
import zod from 'zod';
import { type infer as zInfer } from 'zod';
export declare const description = "Create a new Permit environment";
export declare const options: zod.ZodObject<{
    apiKey: zod.ZodOptional<zod.ZodString>;
    name: zod.ZodOptional<zod.ZodString>;
    envKey: zod.ZodOptional<zod.ZodString>;
    description: zod.ZodOptional<zod.ZodString>;
    customBranchName: zod.ZodOptional<zod.ZodString>;
    jwks: zod.ZodOptional<zod.ZodString>;
    settings: zod.ZodOptional<zod.ZodString>;
}, "strip", zod.ZodTypeAny, {
    settings?: string | undefined;
    apiKey?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    customBranchName?: string | undefined;
    jwks?: string | undefined;
    envKey?: string | undefined;
}, {
    settings?: string | undefined;
    apiKey?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    customBranchName?: string | undefined;
    jwks?: string | undefined;
    envKey?: string | undefined;
}>;
type Props = {
    readonly options: zInfer<typeof options>;
};
export default function Create({ options: { apiKey, name, envKey, description, customBranchName, jwks, settings, }, }: Props): React.JSX.Element;
export {};
