import React from 'react';
import zod from 'zod';
import { type infer as zInfer } from 'zod';
export declare const options: zod.ZodObject<{
    apiKey: zod.ZodOptional<zod.ZodString>;
    from: zod.ZodOptional<zod.ZodString>;
    name: zod.ZodOptional<zod.ZodString>;
    description: zod.ZodOptional<zod.ZodString>;
    to: zod.ZodOptional<zod.ZodString>;
    conflictStrategy: zod.ZodOptional<zod.ZodDefault<zod.ZodEnum<["fail", "overwrite"]>>>;
}, "strip", zod.ZodTypeAny, {
    apiKey?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    from?: string | undefined;
    to?: string | undefined;
    conflictStrategy?: "fail" | "overwrite" | undefined;
}, {
    apiKey?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    from?: string | undefined;
    to?: string | undefined;
    conflictStrategy?: "fail" | "overwrite" | undefined;
}>;
type Props = {
    readonly options: zInfer<typeof options>;
};
export default function Copy({ options: { apiKey, from, to, name, description, conflictStrategy }, }: Props): React.JSX.Element;
export {};
