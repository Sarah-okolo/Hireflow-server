import { createSafeId, fetchList } from '../utils.js';
import Handlebars from 'handlebars';
import { readFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
export class ConditionSetGenerator {
    constructor(permit, warningCollector) {
        Object.defineProperty(this, "permit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: permit
        });
        Object.defineProperty(this, "warningCollector", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: warningCollector
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'condition set rules'
        });
        Object.defineProperty(this, "template", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.template = Handlebars.compile(readFileSync(join(__dirname, '../templates/condition-set.hcl'), 'utf-8'));
    }
    /**
     * Process an individual condition set rule and convert it to the expected format
     * Returns null if the rule should be skipped
     */
    processConditionSetRule(rule, availableUserSets, availableResourceSets) {
        try {
            // Extract user set and resource set keys
            const userSetKey = rule.user_set;
            const resourceSetKey = rule.resource_set;
            const permissionKey = rule.permission;
            // Check if this is an autogenerated user set
            const isUserSetAutogen = userSetKey.startsWith('__autogen_');
            if (isUserSetAutogen && !availableUserSets.has(userSetKey)) {
                return null;
            }
            // Check if this is an autogenerated resource set
            const isResourceSetAutogen = resourceSetKey.startsWith('__autogen_');
            if (isResourceSetAutogen && !availableResourceSets.has(resourceSetKey)) {
                return null;
            }
            // Create a unique identifier for this rule
            const ruleKey = `${createSafeId(userSetKey)}_${createSafeId(resourceSetKey)}_${createSafeId(permissionKey)}`;
            return {
                key: ruleKey,
                userSet: userSetKey,
                resourceSet: resourceSetKey,
                permission: permissionKey,
                isAutogenerated: isUserSetAutogen || isResourceSetAutogen,
            };
        }
        catch (error) {
            this.warningCollector.addWarning(`Failed to process condition set rule: ${error}`);
            return null;
        }
    }
    async generateHCL() {
        try {
            // Create base parameters for API call
            const baseParams = {
                tenant: '',
                subject: '',
                relation: '',
                object: '',
                objectType: '',
                subjectType: '',
            };
            // Use the fetchList utility function to get all condition set rules with pagination
            const conditionSetRulesAPI = this.permit.api
                .conditionSetRules;
            const allConditionSetRules = await fetchList(params => conditionSetRulesAPI.list(params), baseParams);
            // Get all condition sets first, then filter by type
            const allConditionSets = await this.permit.api.conditionSets.list();
            const userSets = allConditionSets.filter(set => set.type === 'userset');
            const resourceSets = allConditionSets.filter(set => set.type === 'resourceset');
            // Create sets of available user and resource set keys for quick lookup
            const availableUserSets = new Set(userSets.map(set => set.key));
            const availableResourceSets = new Set(resourceSets.map(set => set.key));
            if (!allConditionSetRules || allConditionSetRules.length === 0) {
                return '';
            }
            // Process each rule using the extracted method
            const validRules = allConditionSetRules
                .map(rule => this.processConditionSetRule(rule, availableUserSets, availableResourceSets))
                .filter((rule) => rule !== null);
            if (validRules.length === 0) {
                return '';
            }
            // Return generated HCL
            return '\n# Condition Set Rules\n' + this.template({ rules: validRules });
        }
        catch (error) {
            this.warningCollector.addWarning(`Failed to export condition set rules: ${error}`);
            return '';
        }
    }
}
