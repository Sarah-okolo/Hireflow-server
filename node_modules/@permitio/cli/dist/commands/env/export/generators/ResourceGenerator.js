import { createSafeId, fetchList } from '../utils.js';
import Handlebars from 'handlebars';
import { readFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
export class ResourceGenerator {
    constructor(permit, warningCollector) {
        Object.defineProperty(this, "permit", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: permit
        });
        Object.defineProperty(this, "warningCollector", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: warningCollector
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'resources'
        });
        Object.defineProperty(this, "template", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.template = Handlebars.compile(readFileSync(join(__dirname, '../templates/resource.hcl'), 'utf-8'));
    }
    async generateHCL() {
        try {
            // Use the fetchList utility to get all resources with pagination
            const resources = await fetchList(params => this.permit.api.resources.list(params), {});
            const validResources = resources
                .filter(resource => resource.key !== '__user')
                .map(resource => ({
                key: createSafeId(resource.key),
                name: resource.name,
                description: resource.description,
                urn: resource.urn,
                actions: this.transformActions(resource.actions || {}),
                attributes: this.transformAttributes(resource.attributes || {}),
                depends_on: [],
            }));
            if (validResources.length === 0)
                return '';
            return '\n# Resources\n' + this.template({ resources: validResources });
        }
        catch (error) {
            console.error('Error generating HCL:', error);
            this.warningCollector.addWarning(`Failed to export resources: ${error}`);
            return '';
        }
    }
    transformActions(actions) {
        const transformedActions = {};
        for (const [key, action] of Object.entries(actions)) {
            transformedActions[key] = {
                name: action.name || this.capitalizeFirstLetter(key),
                ...(action.description && { description: action.description }),
            };
        }
        return transformedActions;
    }
    transformAttributes(attributes) {
        const transformedAttributes = {};
        for (const [key, attribute] of Object.entries(attributes)) {
            transformedAttributes[key] = {
                name: attribute.name || this.generateAttributeName(key),
                type: this.normalizeAttributeType(attribute.type),
                ...(attribute.required && { required: attribute.required }),
            };
        }
        return transformedAttributes;
    }
    normalizeAttributeType(type) {
        const typeMap = {
            boolean: 'bool',
            array: 'array',
            string: 'string',
            number: 'number',
            json: 'json',
        };
        return typeMap[type.toLowerCase()] || type;
    }
    capitalizeFirstLetter(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }
    generateAttributeName(key) {
        return key
            .split(/[_\s]|(?=[A-Z])/)
            .map(word => this.capitalizeFirstLetter(word))
            .join(' ');
    }
}
