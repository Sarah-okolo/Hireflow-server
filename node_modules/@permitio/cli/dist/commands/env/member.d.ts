import React from 'react';
import zod from 'zod';
import { type infer as zInfer } from 'zod';
export declare const options: zod.ZodObject<{
    apiKey: zod.ZodOptional<zod.ZodString>;
    environment: zod.ZodOptional<zod.ZodString>;
    project: zod.ZodOptional<zod.ZodString>;
    email: zod.ZodOptional<zod.ZodString>;
    role: zod.ZodOptional<zod.ZodEnum<["admin", "write", "read"]>>;
    inviterEmail: zod.ZodOptional<zod.ZodString>;
    inviterName: zod.ZodOptional<zod.ZodString>;
}, "strip", zod.ZodTypeAny, {
    role?: "admin" | "write" | "read" | undefined;
    project?: string | undefined;
    environment?: string | undefined;
    apiKey?: string | undefined;
    email?: string | undefined;
    inviterName?: string | undefined;
    inviterEmail?: string | undefined;
}, {
    role?: "admin" | "write" | "read" | undefined;
    project?: string | undefined;
    environment?: string | undefined;
    apiKey?: string | undefined;
    email?: string | undefined;
    inviterName?: string | undefined;
    inviterEmail?: string | undefined;
}>;
type Props = {
    readonly options: zInfer<typeof options>;
};
export default function Member({ options: { apiKey, environment, project, email, role, inviterName, inviterEmail, }, }: Props): React.JSX.Element;
export {};
