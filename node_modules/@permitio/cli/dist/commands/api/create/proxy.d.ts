import React from 'react';
import { type infer as zInfer } from 'zod';
export declare const description = "Creates a new URL mapping configuration >  Permit api create proxy --api-key abc --key valid-key --name name --auth-mechanism bearer --secret your-secret --mapping-rules \"get|https://api.example.com|users|getUsers|10|{Authorization:Bearer abc,X-Custom:v7}|regex\" / --mapping-rule-url valid-url ...";
export declare const options: import("zod").ZodObject<{
    apiKey: import("zod").ZodOptional<import("zod").ZodString>;
    secret: import("zod").ZodOptional<import("zod").ZodString>;
    key: import("zod").ZodOptional<import("zod").ZodString>;
    name: import("zod").ZodOptional<import("zod").ZodString>;
    authMechanism: import("zod").ZodOptional<import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"Bearer">, import("zod").ZodLiteral<"Basic">, import("zod").ZodLiteral<"Headers">]>>>;
    mappingRules: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
    mappingRuleMethod: import("zod").ZodOptional<import("zod").ZodString>;
    mappingRuleUrl: import("zod").ZodOptional<import("zod").ZodString>;
    mappingRuleResource: import("zod").ZodOptional<import("zod").ZodString>;
    mappingRuleAction: import("zod").ZodOptional<import("zod").ZodString>;
    mappingRulePriority: import("zod").ZodOptional<import("zod").ZodNumber>;
    mappingRuleHeaders: import("zod").ZodOptional<import("zod").ZodArray<import("zod").ZodString, "many">>;
    mappingRuleUrlType: import("zod").ZodOptional<import("zod").ZodUnion<[import("zod").ZodLiteral<"regex">, import("zod").ZodLiteral<"none">]>>;
}, "strip", import("zod").ZodTypeAny, {
    key?: string | undefined;
    apiKey?: string | undefined;
    name?: string | undefined;
    secret?: string | undefined;
    authMechanism?: "Bearer" | "Basic" | "Headers" | undefined;
    mappingRules?: string[] | undefined;
    mappingRuleMethod?: string | undefined;
    mappingRuleUrl?: string | undefined;
    mappingRuleResource?: string | undefined;
    mappingRuleAction?: string | undefined;
    mappingRulePriority?: number | undefined;
    mappingRuleHeaders?: string[] | undefined;
    mappingRuleUrlType?: "regex" | "none" | undefined;
}, {
    key?: string | undefined;
    apiKey?: string | undefined;
    name?: string | undefined;
    secret?: string | undefined;
    authMechanism?: "Bearer" | "Basic" | "Headers" | undefined;
    mappingRules?: string[] | undefined;
    mappingRuleMethod?: string | undefined;
    mappingRuleUrl?: string | undefined;
    mappingRuleResource?: string | undefined;
    mappingRuleAction?: string | undefined;
    mappingRulePriority?: number | undefined;
    mappingRuleHeaders?: string[] | undefined;
    mappingRuleUrlType?: "regex" | "none" | undefined;
}>;
type Props = {
    options: zInfer<typeof options>;
};
export default function Proxy({ options }: Props): React.JSX.Element;
export {};
