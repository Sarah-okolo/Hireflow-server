import React, { useCallback, useEffect, useState } from 'react';
import { Text } from 'ink';
import { object, string } from 'zod';
import { option } from 'pastel';
import { saveAuthToken } from '../lib/auth.js';
import LoginFlow from '../components/LoginFlow.js';
import EnvironmentSelection from '../components/EnvironmentSelection.js';
import SignupComponent from '../components/signup/SignupComponent.js';
export const options = object({
    apiKey: string()
        .optional()
        .describe(option({
        description: 'Use API key instead of user authentication',
        alias: 'k',
    })),
    workspace: string()
        .optional()
        .describe(option({
        description: 'Use predefined workspace to Login',
    })),
});
export default function Login({ options: { apiKey, workspace }, loginSuccess, }) {
    const [state, setState] = useState('login');
    const [accessToken, setAccessToken] = useState('');
    const [cookie, setCookie] = useState('');
    const [error, setError] = useState(null);
    const [organization, setOrganization] = useState('');
    const [environment, setEnvironment] = useState('');
    const onEnvironmentSelectSuccess = useCallback(async (organisation, project, environment, secret) => {
        setOrganization(organisation.label);
        setEnvironment(environment.label);
        await saveAuthToken(secret);
        if (loginSuccess) {
            loginSuccess(organisation, project, environment, secret);
            return;
        }
        else {
            setState('done');
        }
    }, [loginSuccess]);
    const onSignupSuccess = useCallback(() => {
        setState('env');
    }, []);
    useEffect(() => {
        if (error === 'NO_ORGANIZATIONS') {
            setState('signup');
            setError(null);
        }
        else if (error || state === 'done') {
            setTimeout(() => {
                process.exit(1);
            }, 100);
        }
    }, [error, state]);
    const onLoginSuccess = useCallback((accessToken, cookie) => {
        setAccessToken(accessToken);
        setCookie(cookie);
        setState('env');
    }, []);
    return (React.createElement(React.Fragment, null,
        state == 'login' && (React.createElement(LoginFlow, { apiKey: apiKey, onSuccess: onLoginSuccess, onError: setError })),
        state === 'env' && (React.createElement(EnvironmentSelection, { accessToken: accessToken, cookie: cookie, onComplete: onEnvironmentSelectSuccess, onError: setError, workspace: workspace })),
        state === 'signup' && (React.createElement(React.Fragment, null,
            React.createElement(SignupComponent, { accessToken: accessToken, cookie: cookie, onSuccess: onSignupSuccess }))),
        state === 'done' && (React.createElement(Text, null,
            "Logged in to ",
            organization,
            " with selected environment as ",
            environment)),
        error && state !== 'signup' && React.createElement(Text, null, error)));
}
