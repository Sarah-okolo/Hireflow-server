import React from 'react';
import zod from 'zod';
import type { infer as zInfer } from 'zod';
export declare const options: zod.ZodObject<{
    apiKey: zod.ZodOptional<zod.ZodString>;
    dryRun: zod.ZodDefault<zod.ZodOptional<zod.ZodBoolean>>;
    models: zod.ZodDefault<zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>>;
    path: zod.ZodOptional<zod.ZodString>;
    snippet: zod.ZodOptional<zod.ZodEnum<["jest", "pytest", "vitest"]>>;
}, "strip", zod.ZodTypeAny, {
    dryRun: boolean;
    models: string[];
    path?: string | undefined;
    apiKey?: string | undefined;
    snippet?: "jest" | "pytest" | "vitest" | undefined;
}, {
    path?: string | undefined;
    apiKey?: string | undefined;
    dryRun?: boolean | undefined;
    models?: string[] | undefined;
    snippet?: "jest" | "pytest" | "vitest" | undefined;
}>;
type Props = {
    readonly options: zInfer<typeof options>;
};
export default function E2e({ options: { dryRun, models, path, apiKey, snippet }, }: Props): React.JSX.Element;
export {};
