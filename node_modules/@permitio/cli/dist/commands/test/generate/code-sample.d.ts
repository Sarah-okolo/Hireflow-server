import React from 'react';
import zod from 'zod';
import type { infer as zInfer } from 'zod';
export declare const options: zod.ZodObject<{
    framework: zod.ZodEnum<["jest", "pytest", "vitest"]>;
    configPath: zod.ZodDefault<zod.ZodOptional<zod.ZodString>>;
    path: zod.ZodOptional<zod.ZodString>;
    apiKey: zod.ZodOptional<zod.ZodString>;
    pdpUrl: zod.ZodDefault<zod.ZodOptional<zod.ZodString>>;
}, "strip", zod.ZodTypeAny, {
    framework: "jest" | "pytest" | "vitest";
    configPath: string;
    pdpUrl: string;
    path?: string | undefined;
    apiKey?: string | undefined;
}, {
    framework: "jest" | "pytest" | "vitest";
    path?: string | undefined;
    apiKey?: string | undefined;
    configPath?: string | undefined;
    pdpUrl?: string | undefined;
}>;
type Props = {
    readonly options: zInfer<typeof options>;
};
export default function E2e({ options: { framework, configPath, path, apiKey, pdpUrl }, }: Props): React.JSX.Element;
export {};
