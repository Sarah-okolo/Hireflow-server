/**
 * Utility functions and types for OpenAPI processing
 */
export const HTTP_METHODS = [
    'get',
    'post',
    'put',
    'delete',
    'patch',
    'options',
    'head',
];
/**
 * Convert resource keys to valid format (no colons, only alphanumeric, dashes, underscores)
 */
export const sanitizeKey = (key) => {
    if (!key)
        return '';
    // Replace all special characters with underscores
    // Keep only alphanumeric characters and underscores
    return key
        .toLowerCase()
        .trim()
        .replace(/[^a-z0-9_-]/g, '_') // Replace invalid chars with underscores
        .replace(/_+/g, '_') // Replace multiple underscores with one
        .replace(/^_|_$/g, ''); // Remove leading/trailing underscores
};
/**
 * Check if error is a duplicate entity error
 */
export const isDuplicateError = (error) => {
    let isDuplicate = false; // Initialize return value
    const ALREADY_EXISTS_MSG = 'already exists';
    const DUPLICATE_ENTITY_CODE = 'DUPLICATE_ENTITY';
    const ROLE_ALREADY_EXISTS_TITLE = 'This role already exists';
    try {
        // Check string errors
        if (typeof error === 'string') {
            if (error.includes(DUPLICATE_ENTITY_CODE) ||
                error.includes(ALREADY_EXISTS_MSG) ||
                error.includes('duplicate key') ||
                error.includes('already defined')) {
                isDuplicate = true;
            }
            else {
                // Try to parse JSON string errors only if it wasn't a direct string match
                try {
                    const parsedError = JSON.parse(error);
                    if (parsedError.error_code === DUPLICATE_ENTITY_CODE ||
                        parsedError.title === ROLE_ALREADY_EXISTS_TITLE ||
                        (parsedError.detail &&
                            typeof parsedError.detail === 'string' &&
                            parsedError.detail.includes(ALREADY_EXISTS_MSG))) {
                        isDuplicate = true;
                    }
                }
                catch {
                    // Ignore JSON parsing errors - this is expected for non-JSON error strings
                }
            }
        }
        // Check error objects only if it wasn't a string match
        else if (typeof error === 'object' && error !== null) {
            const errorObj = error;
            if (errorObj.error_code === DUPLICATE_ENTITY_CODE ||
                errorObj.title === ROLE_ALREADY_EXISTS_TITLE ||
                (errorObj.detail &&
                    typeof errorObj.detail === 'string' &&
                    (errorObj.detail.includes(ALREADY_EXISTS_MSG) ||
                        errorObj.detail.includes('duplicate'))) ||
                (errorObj.message &&
                    typeof errorObj.message === 'string' &&
                    (errorObj.message.includes(ALREADY_EXISTS_MSG) ||
                        errorObj.message.includes(DUPLICATE_ENTITY_CODE)))) {
                isDuplicate = true;
            }
        }
    }
    catch {
        // Ignore any errors during error type checking - continue with default result
    }
    return isDuplicate; // Explicitly return the boolean variable
};
