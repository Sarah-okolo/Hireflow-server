import { MethodE } from './fetchUtil.js';
import type { AuthContextType } from '../components/AuthProvider.js';
type PermitApiOptions = {
    auth: AuthContextType;
    projectId?: string;
    envId?: string;
    apiKey?: string;
};
export declare function permitApi<T>(endpoint: string, { auth, projectId, envId, apiKey }: PermitApiOptions, method?: MethodE, body?: object, queryParams?: Record<string, string>): Promise<import("./fetchUtil.js").FetchResponse<T>>;
export interface UserData {
    key: string;
    email: string;
    first_name: string;
    last_name: string;
    roles: Array<{
        role: string;
        tenant: string;
    }>;
}
export interface ListUsersResponse {
    data: UserData[];
    total_count: number;
    page?: number;
}
export interface RoleAssignmentResponse {
    user: string;
    role: string;
    tenant: string;
}
export interface ListUsersRequest extends PermitApiOptions {
    page?: number;
    perPage?: number;
    role?: string;
    tenant?: string;
}
export interface RoleAssignmentRequest extends PermitApiOptions {
    user: string;
    role: string;
    tenant: string;
}
export declare const usersApi: {
    list: (options: ListUsersRequest) => Promise<import("./fetchUtil.js").FetchResponse<ListUsersResponse>>;
    assign: (options: RoleAssignmentRequest) => Promise<import("./fetchUtil.js").FetchResponse<RoleAssignmentResponse>>;
    unassign: (options: RoleAssignmentRequest) => Promise<import("./fetchUtil.js").FetchResponse<void>>;
};
export {};
