import { fetchUtil, MethodE } from './fetchUtil.js';
import { FACTS_API_URL } from '../config.js';
export async function permitApi(endpoint, { auth, projectId, envId, apiKey }, method = MethodE.GET, body, queryParams) {
    const baseUrl = `${FACTS_API_URL}${auth.scope.project_id || projectId}/${auth.scope.environment_id || envId}`;
    const url = new URL(`${baseUrl}/${endpoint}`);
    if (queryParams) {
        Object.entries(queryParams).forEach(([key, value]) => {
            if (value)
                url.searchParams.append(key, value);
        });
    }
    return fetchUtil(url.toString(), method, auth.authToken || apiKey, undefined, body);
}
// Centralized API client - single source of truth for all Permit.io API calls
export const usersApi = {
    list: async (options) => {
        // Support both global and tenant-scoped user listing
        const endpoint = options.tenant
            ? `tenants/${options.tenant}/users`
            : 'users';
        return permitApi(endpoint, options, MethodE.GET, undefined, {
            page: String(options.page || 1),
            per_page: String(options.perPage || 50),
            ...(options.role && { role: options.role }),
        });
    },
    // Role assignment endpoints follow RBAC best practices
    assign: async (options) => {
        return permitApi('role_assignments', options, MethodE.POST, {
            user: options.user,
            role: options.role,
            tenant: options.tenant,
        });
    },
    unassign: async (options) => {
        return permitApi('role_assignments', options, MethodE.DELETE, {
            user: options.user,
            role: options.role,
            tenant: options.tenant,
        });
    },
};
