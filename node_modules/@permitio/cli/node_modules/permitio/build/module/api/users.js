import { RoleAssignmentsApi as AutogenRoleAssignmentsApi, UsersApi as AutogenUsersApi, } from '../openapi';
import { BulkOperationsApi } from '../openapi/api/bulk-operations-api';
import { BASE_PATH } from '../openapi/base';
import { BaseFactsPermitAPI } from './base';
import { ApiContextLevel, ApiKeyLevel } from './context';
/**
 * The UsersApi class provides methods for interacting with Permit Users.
 */
export class UsersApi extends BaseFactsPermitAPI {
    users;
    roleAssignments;
    bulkOperationsApi;
    /**
     * Creates an instance of the UsersApi.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger instance for logging.
     */
    constructor(config, logger) {
        super(config, logger);
        this.users = new AutogenUsersApi(this.openapiClientConfig, BASE_PATH, this.config.axiosInstance);
        this.roleAssignments = new AutogenRoleAssignmentsApi(this.openapiClientConfig, BASE_PATH, this.config.axiosInstance);
        this.bulkOperationsApi = new BulkOperationsApi(this.openapiClientConfig, BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Retrieves a list of users.
     *
     * @param params Filtering and pagination options, @see {@link IUsersListParams}
     * @returns A promise that resolves to a PaginatedResultUserRead object containing the list of users.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async list(params) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.users.listUsers({
                ...params,
                ...this.config.apiContext.environmentContext,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Retrieves a user by its key.
     *
     * @param userKey The key of the user.
     * @returns A promise that resolves to the user.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async get(userKey) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.users.getUser({
                ...this.config.apiContext.environmentContext,
                userId: userKey,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Retrieves a user by its key.
     * Alias for the {@link get} method.
     *
     * @param userKey The key of the user.
     * @returns A promise that resolves to the user.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getByKey(userKey) {
        return await this.get(userKey);
    }
    /**
     * Retrieves a user by its ID.
     * Alias for the {@link get} method.
     *
     * @param userId The ID of the user.
     * @returns A promise that resolves to the user.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async getById(userId) {
        return await this.get(userId);
    }
    /**
     * Creates a new user.
     *
     * @param userData The data for the new user.
     * @returns A promise that resolves to the created user.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async create(userData) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.users.createUser({
                ...this.config.apiContext.environmentContext,
                userCreate: userData,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Updates a user.
     *
     * @param userKey The key of the user.
     * @param userData The updated data for the user.
     * @returns A promise that resolves to the updated user.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async update(userKey, userData) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.users.updateUser({
                ...this.config.apiContext.environmentContext,
                userId: userKey,
                userUpdate: userData,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Synchronizes user data by creating or updating a user.
     *
     * @param userData - The data of the user to be synchronized.
     * @returns A promise that resolves with the result of the user creation or update operation.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async sync(userData) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            const response = await this.users.replaceUser({
                ...this.config.apiContext.environmentContext,
                userId: userData.key,
                userCreate: userData,
            });
            return {
                user: response.data,
                created: response.status === 201,
            };
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Deletes a user.
     *
     * @param userKey The key of the user to delete.
     * @returns A promise that resolves when the user is deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async delete(userKey) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            await this.users.deleteUser({
                ...this.config.apiContext.environmentContext,
                userId: userKey,
            });
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Assigns a role to a user in the scope of a given tenant.
     *
     * @param assignment - The role assignment details.
     * @returns A promise that resolves with the assigned role.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async assignRole(assignment) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roleAssignments.assignRole({
                ...this.config.apiContext.environmentContext,
                roleAssignmentCreate: assignment,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Unassigns a role from a user in the scope of a given tenant.
     *
     * @param unassignment - The role unassignment details.
     * @returns A promise that resolves when the role is successfully unassigned from the user.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async unassignRole(unassignment) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roleAssignments.unassignRole({
                ...this.config.apiContext.environmentContext,
                roleAssignmentRemove: unassignment,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Creates users in bulk.
     *
     * @param users The array of users to create.
     * @returns A promise that resolves to the bulk creation result.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async bulkUserCreate(users) {
        // Ensure access level and context
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.bulkOperationsApi.bulkCreateUsers({
                ...this.config.apiContext.environmentContext,
                userCreateBulkOperations: {
                    operations: users,
                },
            })).data;
        }
        catch (err) {
            // Handle any errors that occur during the API call
            this.handleApiError(err);
        }
    }
    /**
     * Deletes users in bulk.
     *
     * @param userKeys The array of user keys to delete.
     * @returns A promise that resolves to the bulk deletion result.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async bulkUserDelete(userKeys) {
        // Ensure access level and context
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.bulkOperationsApi.bulkDeleteUsers({
                ...this.config.apiContext.environmentContext,
                userDeleteBulkOperation: {
                    idents: userKeys,
                },
            })).data;
        }
        catch (err) {
            // Handle any errors that occur during the API call
            this.handleApiError(err);
        }
    }
    /**
     * Replaces users in bulk.
     *
     * If a user exists, it will be replaced. Otherwise, it will be created.
     *
     * @param users The array of users to replace.
     * @returns A promise that resolves to the bulk replacement result.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async bulkUserReplace(users) {
        // Ensure access level and context
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.bulkOperationsApi.bulkReplaceUsers({
                ...this.config.apiContext.environmentContext,
                userReplaceBulkOperation: {
                    operations: users,
                },
            })).data;
        }
        catch (err) {
            // Handle any errors that occur during the API call
            this.handleApiError(err);
        }
    }
    async getAssignedRoles({ user, tenant, page = 1, perPage = 100, detailed = false, includeTotalCount = false, }) {
        await this.ensureAccessLevel(ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.roleAssignments.listRoleAssignments({
                ...this.config.apiContext.environmentContext,
                user,
                tenant,
                page,
                perPage,
                detailed,
                includeTotalCount,
            })).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,