import anyTest from 'ava';
import { Permit } from '../../index';
import { LoggerFactory } from '../../logger';
const test = anyTest;
test.before(async (t) => {
    if (process.env.CLOUD_PDP === 'true') {
        t.fail('This test is not supported with cloud PDP');
    }
    const defaultPDPAddress = 'http://localhost:7766';
    const defaultApiAddress = process.env.API_TIER === 'prod' ? 'https://api.permit.io' : 'http://localhost:8000';
    const token = process.env.PDP_API_KEY || '';
    const pdpAddress = process.env.PDP_URL || defaultPDPAddress;
    const apiUrl = process.env.PDP_CONTROL_PLANE || defaultApiAddress;
    if (!token) {
        t.fail('PDP_API_KEY is not configured, test cannot run!');
    }
    t.context.permit = new Permit({
        token,
        pdp: pdpAddress,
        apiUrl,
        log: {
            level: 'debug',
        },
        proxyFactsViaPdp: true,
    });
    t.context.logger = LoggerFactory.createLogger(t.context.permit.config);
    await setupSchema(t.context.permit);
});
const setupSchema = async (permit) => {
    await permit.api.roles.create({ key: 'admin', name: 'admin' }).catch(() => null);
    await permit.api.resources
        .create({
        key: 'repo',
        name: 'Repository',
        actions: { create: {}, read: {}, update: {}, delete: {} },
    })
        .catch(() => null);
    await permit.api.roles
        .assignPermissions('admin', ['repo:create', 'repo:read', 'repo:update', 'repo:delete'])
        .catch(() => null);
    await permit.api.resourceRoles
        .create('repo', {
        key: 'editor',
        name: 'editor',
    })
        .catch(() => null);
    await permit.api.resourceRoles.assignPermissions('repo', 'editor', ['update']).catch(() => null);
    await sleep(10); // wait for schema to sync
};
const sleep = async (seconds) => await new Promise((r) => setTimeout(r, seconds * 1000));
const makeRandomId = (prefix) => {
    const num = Math.floor(Math.random() * 1_000_000);
    return `${prefix}-${num}`;
};
test('Check assign role', async (t) => {
    const permit = t.context.permit;
    const adminUserId = makeRandomId('user');
    await permit.api.users.create({ key: adminUserId });
    await permit.api.users.assignRole({ user: adminUserId, role: 'admin', tenant: 'default' });
    t.true(await permit.check(adminUserId, 'create', 'repo'));
});
test('Check assign resource instance role', async (t) => {
    const permit = t.context.permit;
    const editorUserId = makeRandomId('user');
    await permit.api.users.create({ key: editorUserId });
    const tenantId = makeRandomId('tenant');
    await permit.api.tenants.create({ key: tenantId, name: 'My Tenant' });
    const resourceInstanceId = makeRandomId('repo');
    await permit.api.resourceInstances.create({
        key: resourceInstanceId,
        resource: 'repo',
        tenant: tenantId,
    });
    await permit.api.users.assignRole({
        user: editorUserId,
        role: 'editor',
        resource_instance: `repo:${resourceInstanceId}`,
    });
    t.true(await permit.check(editorUserId, 'update', {
        key: resourceInstanceId,
        type: 'repo',
        tenant: tenantId,
    }));
});
test('Check skip wait', async (t) => {
    const permit = t.context.permit;
    const userId = makeRandomId('user');
    await permit.api.users.create({ key: userId });
    // explicitly skip wait for role assignment to sync
    await permit.api.users.waitForSync(0).assignRole({
        user: userId,
        role: 'admin',
        tenant: 'default',
    });
    t.false(await permit.check(userId, 'create', 'repo'));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxfZmFjdHMuZTJlLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdGVzdHMvZTJlL2xvY2FsX2ZhY3RzLmUyZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sT0FBMEIsTUFBTSxLQUFLLENBQUM7QUFHN0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNyQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBTzdDLE1BQU0sSUFBSSxHQUFHLE9BQXFDLENBQUM7QUFFbkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDdEIsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsS0FBSyxNQUFNLEVBQUU7UUFDcEMsQ0FBQyxDQUFDLElBQUksQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0tBQ3JEO0lBQ0QsTUFBTSxpQkFBaUIsR0FBRyx1QkFBdUIsQ0FBQztJQUNsRCxNQUFNLGlCQUFpQixHQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQztJQUV0RixNQUFNLEtBQUssR0FBVyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7SUFDcEQsTUFBTSxVQUFVLEdBQVcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLElBQUksaUJBQWlCLENBQUM7SUFDcEUsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsSUFBSSxpQkFBaUIsQ0FBQztJQUVsRSxJQUFJLENBQUMsS0FBSyxFQUFFO1FBQ1YsQ0FBQyxDQUFDLElBQUksQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO0tBQzNEO0lBRUQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUM7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