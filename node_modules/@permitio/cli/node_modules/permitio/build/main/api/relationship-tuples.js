"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RelationshipTuplesApi = void 0;
const openapi_1 = require("../openapi");
const base_1 = require("../openapi/base");
const base_2 = require("./base");
const context_1 = require("./context");
/**
 * The RelationshipTuplesApi class provides methods for interacting with Role createments.
 */
class RelationshipTuplesApi extends base_2.BaseFactsPermitAPI {
    /**
     * Creates an instance of the RelationshipTuplesApi.
     * @param config - The configuration object for the Permit SDK.
     * @param logger - The logger instance for logging.
     */
    constructor(config, logger) {
        super(config, logger);
        this.relationshipTuples = new openapi_1.RelationshipTuplesApi(this.openapiClientConfig, base_1.BASE_PATH, this.config.axiosInstance);
    }
    /**
     * Retrieves a list of role createments based on the specified filters.
     *
     * @param params - The filters and pagination options for listing role createments.
     * @returns A promise that resolves with an array of role createments.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async list(params) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.relationshipTuples.listRelationshipTuples(Object.assign(Object.assign({}, params), this.config.apiContext.environmentContext))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Creates a new relationship tuple, that states that a relationship (of type: relation)
     * exists between two resource instances: the subject and the object.
     *
     * @param tuple - The tuple to create
     * @returns A promise that resolves to the created relationship tuple.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async create(tuple) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.relationshipTuples.createRelationshipTuple(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { relationshipTupleCreate: tuple }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Removes a relationship tuple.
     *
     * @param tuple - The tuple to delete
     * @returns A promise that resolves when the tuple is successfully deleted.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async delete(tuple) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.relationshipTuples.deleteRelationshipTuple(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { relationshipTupleDelete: tuple }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Creates a new relationship tuple, that states that a relationship (of type: relation)
     * exists between two resource instances: the subject and the object.
     *
     * @returns A promise that resolves to the created relationship tuple.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     * @param tuples
     */
    async bulkRelationshipTuples(tuples) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.relationshipTuples.bulkCreateRelationshipTuples(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { relationshipTupleCreateBulkOperation: {
                    operations: tuples,
                } }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
    /**
     * Deletes multiple relationship tuples at once using the provided tuple data.
     * Each tuple object is of type RelationshipTupleDelete and is essentially a tuple of (subject, relation, object).
     *
     * @param tuples - he relationship tuples to delete.
     * @returns A promise that resolves with the bulk un relationship tuples report.
     * @throws {@link PermitApiError} If the API returns an error HTTP status code.
     * @throws {@link PermitContextError} If the configured {@link ApiContext} does not match the required endpoint context.
     */
    async bulkUnRelationshipTuples(tuples) {
        await this.ensureAccessLevel(context_1.ApiKeyLevel.ENVIRONMENT_LEVEL_API_KEY);
        await this.ensureContext(context_1.ApiContextLevel.ENVIRONMENT);
        try {
            return (await this.relationshipTuples.bulkDeleteRelationshipTuples(Object.assign(Object.assign({}, this.config.apiContext.environmentContext), { relationshipTupleDeleteBulkOperation: {
                    idents: tuples,
                } }))).data;
        }
        catch (err) {
            this.handleApiError(err);
        }
    }
}
exports.RelationshipTuplesApi = RelationshipTuplesApi;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVsYXRpb25zaGlwLXR1cGxlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvcmVsYXRpb25zaGlwLXR1cGxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSx3Q0FPb0I7QUFDcEIsMENBQTRDO0FBRTVDLGlDQUF1RTtBQUN2RSx1Q0FBeUQ7QUF3R3pEOztHQUVHO0FBQ0gsTUFBYSxxQkFBc0IsU0FBUSx5QkFBa0I7SUFHM0Q7Ozs7T0FJRztJQUNILFlBQVksTUFBcUIsRUFBRSxNQUFjO1FBQy9DLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksK0JBQTRCLENBQ3hELElBQUksQ0FBQyxtQkFBbUIsRUFDeEIsZ0JBQVMsRUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FDMUIsQ0FBQztJQUNKLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksS0FBSyxDQUFDLElBQUksQ0FBQyxNQUErQjtRQUMvQyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxxQkFBVyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDcEUsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLHlCQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdEQsSUFBSTtZQUNGLE9BQU8sQ0FDTCxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxzQkFBc0IsaUNBQy9DLE1BQU0sR0FDTixJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsRUFDNUMsQ0FDSCxDQUFDLElBQUksQ0FBQztTQUNSO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0ksS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUE4QjtRQUNoRCxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxxQkFBVyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDcEUsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLHlCQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdEQsSUFBSTtZQUNGLE9BQU8sQ0FDTCxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyx1QkFBdUIsaUNBQ2hELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQixLQUM1Qyx1QkFBdUIsRUFBRSxLQUFLLElBQzlCLENBQ0gsQ0FBQyxJQUFJLENBQUM7U0FDUjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUE4QjtRQUNoRCxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxxQkFBVyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFDcEUsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLHlCQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdEQsSUFBSTtZQUNGLE9BQU8sQ0FDTCxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyx1QkFBdUIsaUNBQ2hELElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQixLQUM1Qyx1QkFBdUIsRUFBRSxLQUFLLElBQzlCLENBQ0gsQ0FBQyxJQUFJLENBQUM7U0FDUjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNJLEtBQUssQ0FBQyxzQkFBc0IsQ0FDakMsTUFBaUM7UUFFakMsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMscUJBQVcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyx5QkFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELElBQUk7WUFDRixPQUFPLENBQ0wsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsNEJBQTRCLGlDQUNyRCxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsS0FDNUMsb0NBQW9DLEVBQUU7b0JBQ3BDLFVBQVUsRUFBRSxNQUFNO2lCQUNuQixJQUNELENBQ0gsQ0FBQyxJQUFJLENBQUM7U0FDUjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNJLEtBQUssQ0FBQyx3QkFBd0IsQ0FDbkMsTUFBaUM7UUFFakMsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMscUJBQVcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyx5QkFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELElBQUk7WUFDRixPQUFPLENBQ0wsTUFBTSxJQUFJLENBQUMsa0JBQWtCLENBQUMsNEJBQTRCLGlDQUNyRCxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsS0FDNUMsb0NBQW9DLEVBQUU7b0JBQ3BDLE1BQU0sRUFBRSxNQUFNO2lCQUNmLElBQ0QsQ0FDSCxDQUFDLElBQUksQ0FBQztTQUNSO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztDQUNGO0FBOUlELHNEQThJQyJ9